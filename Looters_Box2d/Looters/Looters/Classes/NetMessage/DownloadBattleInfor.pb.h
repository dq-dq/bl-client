// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadBattleInfor.proto

#ifndef PROTOBUF_DownloadBattleInfor_2eproto__INCLUDED
#define PROTOBUF_DownloadBattleInfor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DownloadBattleInfor_2eproto();
void protobuf_AssignDesc_DownloadBattleInfor_2eproto();
void protobuf_ShutdownFile_DownloadBattleInfor_2eproto();

class DownloadBattleInforRequest;
class DownloadBattleInforResponse;
class DownloadBattleInforResponse_BattleInfor;
class DownloadBattleInforResponse_BattleInfor_AttackerUsed;

// ===================================================================

class DownloadBattleInforRequest : public ::google::protobuf::MessageLite {
 public:
  DownloadBattleInforRequest();
  virtual ~DownloadBattleInforRequest();
  
  DownloadBattleInforRequest(const DownloadBattleInforRequest& from);
  
  inline DownloadBattleInforRequest& operator=(const DownloadBattleInforRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadBattleInforRequest& default_instance();
  
  void Swap(DownloadBattleInforRequest* other);
  
  // implements Message ----------------------------------------------
  
  DownloadBattleInforRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadBattleInforRequest& from);
  void MergeFrom(const DownloadBattleInforRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string mailAddress = 1;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 1;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // optional string battleCouont = 2;
  inline bool has_battlecouont() const;
  inline void clear_battlecouont();
  static const int kBattleCouontFieldNumber = 2;
  inline const ::std::string& battlecouont() const;
  inline void set_battlecouont(const ::std::string& value);
  inline void set_battlecouont(const char* value);
  inline void set_battlecouont(const char* value, size_t size);
  inline ::std::string* mutable_battlecouont();
  inline ::std::string* release_battlecouont();
  
  // @@protoc_insertion_point(class_scope:message.DownloadBattleInforRequest)
 private:
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  inline void set_has_battlecouont();
  inline void clear_has_battlecouont();
  
  ::std::string* mailaddress_;
  ::std::string* battlecouont_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadBattleInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadBattleInforRequest* default_instance_;
};
// -------------------------------------------------------------------

class DownloadBattleInforResponse_BattleInfor_AttackerUsed : public ::google::protobuf::MessageLite {
 public:
  DownloadBattleInforResponse_BattleInfor_AttackerUsed();
  virtual ~DownloadBattleInforResponse_BattleInfor_AttackerUsed();
  
  DownloadBattleInforResponse_BattleInfor_AttackerUsed(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from);
  
  inline DownloadBattleInforResponse_BattleInfor_AttackerUsed& operator=(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadBattleInforResponse_BattleInfor_AttackerUsed& default_instance();
  
  void Swap(DownloadBattleInforResponse_BattleInfor_AttackerUsed* other);
  
  // implements Message ----------------------------------------------
  
  DownloadBattleInforResponse_BattleInfor_AttackerUsed* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from);
  void MergeFrom(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 used_id = 1;
  inline bool has_used_id() const;
  inline void clear_used_id();
  static const int kUsedIdFieldNumber = 1;
  inline ::google::protobuf::int32 used_id() const;
  inline void set_used_id(::google::protobuf::int32 value);
  
  // optional int32 used_count = 2;
  inline bool has_used_count() const;
  inline void clear_used_count();
  static const int kUsedCountFieldNumber = 2;
  inline ::google::protobuf::int32 used_count() const;
  inline void set_used_count(::google::protobuf::int32 value);
  
  // optional int32 used_type = 3;
  inline bool has_used_type() const;
  inline void clear_used_type();
  static const int kUsedTypeFieldNumber = 3;
  inline ::google::protobuf::int32 used_type() const;
  inline void set_used_type(::google::protobuf::int32 value);
  
  // optional int32 character_count = 4;
  inline bool has_character_count() const;
  inline void clear_character_count();
  static const int kCharacterCountFieldNumber = 4;
  inline ::google::protobuf::int32 character_count() const;
  inline void set_character_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadBattleInforResponse.BattleInfor.AttackerUsed)
 private:
  inline void set_has_used_id();
  inline void clear_has_used_id();
  inline void set_has_used_count();
  inline void clear_has_used_count();
  inline void set_has_used_type();
  inline void clear_has_used_type();
  inline void set_has_character_count();
  inline void clear_has_character_count();
  
  ::google::protobuf::int32 used_id_;
  ::google::protobuf::int32 used_count_;
  ::google::protobuf::int32 used_type_;
  ::google::protobuf::int32 character_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadBattleInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadBattleInforResponse_BattleInfor_AttackerUsed* default_instance_;
};
// -------------------------------------------------------------------

class DownloadBattleInforResponse_BattleInfor : public ::google::protobuf::MessageLite {
 public:
  DownloadBattleInforResponse_BattleInfor();
  virtual ~DownloadBattleInforResponse_BattleInfor();
  
  DownloadBattleInforResponse_BattleInfor(const DownloadBattleInforResponse_BattleInfor& from);
  
  inline DownloadBattleInforResponse_BattleInfor& operator=(const DownloadBattleInforResponse_BattleInfor& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadBattleInforResponse_BattleInfor& default_instance();
  
  void Swap(DownloadBattleInforResponse_BattleInfor* other);
  
  // implements Message ----------------------------------------------
  
  DownloadBattleInforResponse_BattleInfor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadBattleInforResponse_BattleInfor& from);
  void MergeFrom(const DownloadBattleInforResponse_BattleInfor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DownloadBattleInforResponse_BattleInfor_AttackerUsed AttackerUsed;
  
  // accessors -------------------------------------------------------
  
  // optional int32 attacker_level = 1;
  inline bool has_attacker_level() const;
  inline void clear_attacker_level();
  static const int kAttackerLevelFieldNumber = 1;
  inline ::google::protobuf::int32 attacker_level() const;
  inline void set_attacker_level(::google::protobuf::int32 value);
  
  // optional string attacker_nick_name = 2;
  inline bool has_attacker_nick_name() const;
  inline void clear_attacker_nick_name();
  static const int kAttackerNickNameFieldNumber = 2;
  inline const ::std::string& attacker_nick_name() const;
  inline void set_attacker_nick_name(const ::std::string& value);
  inline void set_attacker_nick_name(const char* value);
  inline void set_attacker_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_attacker_nick_name();
  inline ::std::string* release_attacker_nick_name();
  
  // optional int32 attacker_get_golden_count = 3;
  inline bool has_attacker_get_golden_count() const;
  inline void clear_attacker_get_golden_count();
  static const int kAttackerGetGoldenCountFieldNumber = 3;
  inline ::google::protobuf::int32 attacker_get_golden_count() const;
  inline void set_attacker_get_golden_count(::google::protobuf::int32 value);
  
  // optional int32 attacker_get_elixir_count = 4;
  inline bool has_attacker_get_elixir_count() const;
  inline void clear_attacker_get_elixir_count();
  static const int kAttackerGetElixirCountFieldNumber = 4;
  inline ::google::protobuf::int32 attacker_get_elixir_count() const;
  inline void set_attacker_get_elixir_count(::google::protobuf::int32 value);
  
  // optional string attack_time = 5;
  inline bool has_attack_time() const;
  inline void clear_attack_time();
  static const int kAttackTimeFieldNumber = 5;
  inline const ::std::string& attack_time() const;
  inline void set_attack_time(const ::std::string& value);
  inline void set_attack_time(const char* value);
  inline void set_attack_time(const char* value, size_t size);
  inline ::std::string* mutable_attack_time();
  inline ::std::string* release_attack_time();
  
  // optional sint32 defencer_get_pvp_mark = 6;
  inline bool has_defencer_get_pvp_mark() const;
  inline void clear_defencer_get_pvp_mark();
  static const int kDefencerGetPvpMarkFieldNumber = 6;
  inline ::google::protobuf::int32 defencer_get_pvp_mark() const;
  inline void set_defencer_get_pvp_mark(::google::protobuf::int32 value);
  
  // optional string clans_name = 7;
  inline bool has_clans_name() const;
  inline void clear_clans_name();
  static const int kClansNameFieldNumber = 7;
  inline const ::std::string& clans_name() const;
  inline void set_clans_name(const ::std::string& value);
  inline void set_clans_name(const char* value);
  inline void set_clans_name(const char* value, size_t size);
  inline ::std::string* mutable_clans_name();
  inline ::std::string* release_clans_name();
  
  // optional string clans_image_name = 8;
  inline bool has_clans_image_name() const;
  inline void clear_clans_image_name();
  static const int kClansImageNameFieldNumber = 8;
  inline const ::std::string& clans_image_name() const;
  inline void set_clans_image_name(const ::std::string& value);
  inline void set_clans_image_name(const char* value);
  inline void set_clans_image_name(const char* value, size_t size);
  inline ::std::string* mutable_clans_image_name();
  inline ::std::string* release_clans_image_name();
  
  // repeated .message.DownloadBattleInforResponse.BattleInfor.AttackerUsed attackerUsedList = 9;
  inline int attackerusedlist_size() const;
  inline void clear_attackerusedlist();
  static const int kAttackerUsedListFieldNumber = 9;
  inline const ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed& attackerusedlist(int index) const;
  inline ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed* mutable_attackerusedlist(int index);
  inline ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed* add_attackerusedlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed >&
      attackerusedlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed >*
      mutable_attackerusedlist();
  
  // optional string replyFileName = 10;
  inline bool has_replyfilename() const;
  inline void clear_replyfilename();
  static const int kReplyFileNameFieldNumber = 10;
  inline const ::std::string& replyfilename() const;
  inline void set_replyfilename(const ::std::string& value);
  inline void set_replyfilename(const char* value);
  inline void set_replyfilename(const char* value, size_t size);
  inline ::std::string* mutable_replyfilename();
  inline ::std::string* release_replyfilename();
  
  // optional string bowie_id = 11;
  inline bool has_bowie_id() const;
  inline void clear_bowie_id();
  static const int kBowieIdFieldNumber = 11;
  inline const ::std::string& bowie_id() const;
  inline void set_bowie_id(const ::std::string& value);
  inline void set_bowie_id(const char* value);
  inline void set_bowie_id(const char* value, size_t size);
  inline ::std::string* mutable_bowie_id();
  inline ::std::string* release_bowie_id();
  
  // optional int32 star_count = 12;
  inline bool has_star_count() const;
  inline void clear_star_count();
  static const int kStarCountFieldNumber = 12;
  inline ::google::protobuf::int32 star_count() const;
  inline void set_star_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadBattleInforResponse.BattleInfor)
 private:
  inline void set_has_attacker_level();
  inline void clear_has_attacker_level();
  inline void set_has_attacker_nick_name();
  inline void clear_has_attacker_nick_name();
  inline void set_has_attacker_get_golden_count();
  inline void clear_has_attacker_get_golden_count();
  inline void set_has_attacker_get_elixir_count();
  inline void clear_has_attacker_get_elixir_count();
  inline void set_has_attack_time();
  inline void clear_has_attack_time();
  inline void set_has_defencer_get_pvp_mark();
  inline void clear_has_defencer_get_pvp_mark();
  inline void set_has_clans_name();
  inline void clear_has_clans_name();
  inline void set_has_clans_image_name();
  inline void clear_has_clans_image_name();
  inline void set_has_replyfilename();
  inline void clear_has_replyfilename();
  inline void set_has_bowie_id();
  inline void clear_has_bowie_id();
  inline void set_has_star_count();
  inline void clear_has_star_count();
  
  ::std::string* attacker_nick_name_;
  ::google::protobuf::int32 attacker_level_;
  ::google::protobuf::int32 attacker_get_golden_count_;
  ::std::string* attack_time_;
  ::google::protobuf::int32 attacker_get_elixir_count_;
  ::google::protobuf::int32 defencer_get_pvp_mark_;
  ::std::string* clans_name_;
  ::std::string* clans_image_name_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed > attackerusedlist_;
  ::std::string* replyfilename_;
  ::std::string* bowie_id_;
  ::google::protobuf::int32 star_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadBattleInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadBattleInforResponse_BattleInfor* default_instance_;
};
// -------------------------------------------------------------------

class DownloadBattleInforResponse : public ::google::protobuf::MessageLite {
 public:
  DownloadBattleInforResponse();
  virtual ~DownloadBattleInforResponse();
  
  DownloadBattleInforResponse(const DownloadBattleInforResponse& from);
  
  inline DownloadBattleInforResponse& operator=(const DownloadBattleInforResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadBattleInforResponse& default_instance();
  
  void Swap(DownloadBattleInforResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadBattleInforResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadBattleInforResponse& from);
  void MergeFrom(const DownloadBattleInforResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DownloadBattleInforResponse_BattleInfor BattleInfor;
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // repeated .message.DownloadBattleInforResponse.BattleInfor battleInforList = 3;
  inline int battleinforlist_size() const;
  inline void clear_battleinforlist();
  static const int kBattleInforListFieldNumber = 3;
  inline const ::message::DownloadBattleInforResponse_BattleInfor& battleinforlist(int index) const;
  inline ::message::DownloadBattleInforResponse_BattleInfor* mutable_battleinforlist(int index);
  inline ::message::DownloadBattleInforResponse_BattleInfor* add_battleinforlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor >&
      battleinforlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor >*
      mutable_battleinforlist();
  
  // @@protoc_insertion_point(class_scope:message.DownloadBattleInforResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor > battleinforlist_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadBattleInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadBattleInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadBattleInforResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// DownloadBattleInforRequest

// required string mailAddress = 1;
inline bool DownloadBattleInforRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadBattleInforRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadBattleInforRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadBattleInforRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& DownloadBattleInforRequest::mailaddress() const {
  return *mailaddress_;
}
inline void DownloadBattleInforRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void DownloadBattleInforRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void DownloadBattleInforRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* DownloadBattleInforRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string battleCouont = 2;
inline bool DownloadBattleInforRequest::has_battlecouont() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadBattleInforRequest::set_has_battlecouont() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadBattleInforRequest::clear_has_battlecouont() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadBattleInforRequest::clear_battlecouont() {
  if (battlecouont_ != &::google::protobuf::internal::kEmptyString) {
    battlecouont_->clear();
  }
  clear_has_battlecouont();
}
inline const ::std::string& DownloadBattleInforRequest::battlecouont() const {
  return *battlecouont_;
}
inline void DownloadBattleInforRequest::set_battlecouont(const ::std::string& value) {
  set_has_battlecouont();
  if (battlecouont_ == &::google::protobuf::internal::kEmptyString) {
    battlecouont_ = new ::std::string;
  }
  battlecouont_->assign(value);
}
inline void DownloadBattleInforRequest::set_battlecouont(const char* value) {
  set_has_battlecouont();
  if (battlecouont_ == &::google::protobuf::internal::kEmptyString) {
    battlecouont_ = new ::std::string;
  }
  battlecouont_->assign(value);
}
inline void DownloadBattleInforRequest::set_battlecouont(const char* value, size_t size) {
  set_has_battlecouont();
  if (battlecouont_ == &::google::protobuf::internal::kEmptyString) {
    battlecouont_ = new ::std::string;
  }
  battlecouont_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforRequest::mutable_battlecouont() {
  set_has_battlecouont();
  if (battlecouont_ == &::google::protobuf::internal::kEmptyString) {
    battlecouont_ = new ::std::string;
  }
  return battlecouont_;
}
inline ::std::string* DownloadBattleInforRequest::release_battlecouont() {
  clear_has_battlecouont();
  if (battlecouont_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battlecouont_;
    battlecouont_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DownloadBattleInforResponse_BattleInfor_AttackerUsed

// optional int32 used_id = 1;
inline bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::has_used_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_has_used_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_has_used_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_used_id() {
  used_id_ = 0;
  clear_has_used_id();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor_AttackerUsed::used_id() const {
  return used_id_;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_used_id(::google::protobuf::int32 value) {
  set_has_used_id();
  used_id_ = value;
}

// optional int32 used_count = 2;
inline bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::has_used_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_has_used_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_has_used_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_used_count() {
  used_count_ = 0;
  clear_has_used_count();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor_AttackerUsed::used_count() const {
  return used_count_;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_used_count(::google::protobuf::int32 value) {
  set_has_used_count();
  used_count_ = value;
}

// optional int32 used_type = 3;
inline bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::has_used_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_has_used_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_has_used_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_used_type() {
  used_type_ = 0;
  clear_has_used_type();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor_AttackerUsed::used_type() const {
  return used_type_;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_used_type(::google::protobuf::int32 value) {
  set_has_used_type();
  used_type_ = value;
}

// optional int32 character_count = 4;
inline bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::has_character_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_has_character_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_has_character_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::clear_character_count() {
  character_count_ = 0;
  clear_has_character_count();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor_AttackerUsed::character_count() const {
  return character_count_;
}
inline void DownloadBattleInforResponse_BattleInfor_AttackerUsed::set_character_count(::google::protobuf::int32 value) {
  set_has_character_count();
  character_count_ = value;
}

// -------------------------------------------------------------------

// DownloadBattleInforResponse_BattleInfor

// optional int32 attacker_level = 1;
inline bool DownloadBattleInforResponse_BattleInfor::has_attacker_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_attacker_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_attacker_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attacker_level() {
  attacker_level_ = 0;
  clear_has_attacker_level();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor::attacker_level() const {
  return attacker_level_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_level(::google::protobuf::int32 value) {
  set_has_attacker_level();
  attacker_level_ = value;
}

// optional string attacker_nick_name = 2;
inline bool DownloadBattleInforResponse_BattleInfor::has_attacker_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_attacker_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_attacker_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attacker_nick_name() {
  if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_->clear();
  }
  clear_has_attacker_nick_name();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::attacker_nick_name() const {
  return *attacker_nick_name_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_nick_name(const ::std::string& value) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_nick_name(const char* value) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_nick_name(const char* value, size_t size) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_attacker_nick_name() {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  return attacker_nick_name_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_attacker_nick_name() {
  clear_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_nick_name_;
    attacker_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 attacker_get_golden_count = 3;
inline bool DownloadBattleInforResponse_BattleInfor::has_attacker_get_golden_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_attacker_get_golden_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_attacker_get_golden_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attacker_get_golden_count() {
  attacker_get_golden_count_ = 0;
  clear_has_attacker_get_golden_count();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor::attacker_get_golden_count() const {
  return attacker_get_golden_count_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_get_golden_count(::google::protobuf::int32 value) {
  set_has_attacker_get_golden_count();
  attacker_get_golden_count_ = value;
}

// optional int32 attacker_get_elixir_count = 4;
inline bool DownloadBattleInforResponse_BattleInfor::has_attacker_get_elixir_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_attacker_get_elixir_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_attacker_get_elixir_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attacker_get_elixir_count() {
  attacker_get_elixir_count_ = 0;
  clear_has_attacker_get_elixir_count();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor::attacker_get_elixir_count() const {
  return attacker_get_elixir_count_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_attacker_get_elixir_count(::google::protobuf::int32 value) {
  set_has_attacker_get_elixir_count();
  attacker_get_elixir_count_ = value;
}

// optional string attack_time = 5;
inline bool DownloadBattleInforResponse_BattleInfor::has_attack_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_attack_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_attack_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attack_time() {
  if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
    attack_time_->clear();
  }
  clear_has_attack_time();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::attack_time() const {
  return *attack_time_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_attack_time(const ::std::string& value) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_attack_time(const char* value) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_attack_time(const char* value, size_t size) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_attack_time() {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  return attack_time_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_attack_time() {
  clear_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attack_time_;
    attack_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 defencer_get_pvp_mark = 6;
inline bool DownloadBattleInforResponse_BattleInfor::has_defencer_get_pvp_mark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_defencer_get_pvp_mark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_defencer_get_pvp_mark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_defencer_get_pvp_mark() {
  defencer_get_pvp_mark_ = 0;
  clear_has_defencer_get_pvp_mark();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor::defencer_get_pvp_mark() const {
  return defencer_get_pvp_mark_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_defencer_get_pvp_mark(::google::protobuf::int32 value) {
  set_has_defencer_get_pvp_mark();
  defencer_get_pvp_mark_ = value;
}

// optional string clans_name = 7;
inline bool DownloadBattleInforResponse_BattleInfor::has_clans_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_clans_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_clans_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_clans_name() {
  if (clans_name_ != &::google::protobuf::internal::kEmptyString) {
    clans_name_->clear();
  }
  clear_has_clans_name();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::clans_name() const {
  return *clans_name_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_name(const ::std::string& value) {
  set_has_clans_name();
  if (clans_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_name_ = new ::std::string;
  }
  clans_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_name(const char* value) {
  set_has_clans_name();
  if (clans_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_name_ = new ::std::string;
  }
  clans_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_name(const char* value, size_t size) {
  set_has_clans_name();
  if (clans_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_name_ = new ::std::string;
  }
  clans_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_clans_name() {
  set_has_clans_name();
  if (clans_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_name_ = new ::std::string;
  }
  return clans_name_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_clans_name() {
  clear_has_clans_name();
  if (clans_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clans_name_;
    clans_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string clans_image_name = 8;
inline bool DownloadBattleInforResponse_BattleInfor::has_clans_image_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_clans_image_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_clans_image_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_clans_image_name() {
  if (clans_image_name_ != &::google::protobuf::internal::kEmptyString) {
    clans_image_name_->clear();
  }
  clear_has_clans_image_name();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::clans_image_name() const {
  return *clans_image_name_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_image_name(const ::std::string& value) {
  set_has_clans_image_name();
  if (clans_image_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_image_name_ = new ::std::string;
  }
  clans_image_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_image_name(const char* value) {
  set_has_clans_image_name();
  if (clans_image_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_image_name_ = new ::std::string;
  }
  clans_image_name_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_clans_image_name(const char* value, size_t size) {
  set_has_clans_image_name();
  if (clans_image_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_image_name_ = new ::std::string;
  }
  clans_image_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_clans_image_name() {
  set_has_clans_image_name();
  if (clans_image_name_ == &::google::protobuf::internal::kEmptyString) {
    clans_image_name_ = new ::std::string;
  }
  return clans_image_name_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_clans_image_name() {
  clear_has_clans_image_name();
  if (clans_image_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clans_image_name_;
    clans_image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .message.DownloadBattleInforResponse.BattleInfor.AttackerUsed attackerUsedList = 9;
inline int DownloadBattleInforResponse_BattleInfor::attackerusedlist_size() const {
  return attackerusedlist_.size();
}
inline void DownloadBattleInforResponse_BattleInfor::clear_attackerusedlist() {
  attackerusedlist_.Clear();
}
inline const ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed& DownloadBattleInforResponse_BattleInfor::attackerusedlist(int index) const {
  return attackerusedlist_.Get(index);
}
inline ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed* DownloadBattleInforResponse_BattleInfor::mutable_attackerusedlist(int index) {
  return attackerusedlist_.Mutable(index);
}
inline ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed* DownloadBattleInforResponse_BattleInfor::add_attackerusedlist() {
  return attackerusedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed >&
DownloadBattleInforResponse_BattleInfor::attackerusedlist() const {
  return attackerusedlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor_AttackerUsed >*
DownloadBattleInforResponse_BattleInfor::mutable_attackerusedlist() {
  return &attackerusedlist_;
}

// optional string replyFileName = 10;
inline bool DownloadBattleInforResponse_BattleInfor::has_replyfilename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_replyfilename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_replyfilename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_replyfilename() {
  if (replyfilename_ != &::google::protobuf::internal::kEmptyString) {
    replyfilename_->clear();
  }
  clear_has_replyfilename();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::replyfilename() const {
  return *replyfilename_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_replyfilename(const ::std::string& value) {
  set_has_replyfilename();
  if (replyfilename_ == &::google::protobuf::internal::kEmptyString) {
    replyfilename_ = new ::std::string;
  }
  replyfilename_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_replyfilename(const char* value) {
  set_has_replyfilename();
  if (replyfilename_ == &::google::protobuf::internal::kEmptyString) {
    replyfilename_ = new ::std::string;
  }
  replyfilename_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_replyfilename(const char* value, size_t size) {
  set_has_replyfilename();
  if (replyfilename_ == &::google::protobuf::internal::kEmptyString) {
    replyfilename_ = new ::std::string;
  }
  replyfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_replyfilename() {
  set_has_replyfilename();
  if (replyfilename_ == &::google::protobuf::internal::kEmptyString) {
    replyfilename_ = new ::std::string;
  }
  return replyfilename_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_replyfilename() {
  clear_has_replyfilename();
  if (replyfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = replyfilename_;
    replyfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bowie_id = 11;
inline bool DownloadBattleInforResponse_BattleInfor::has_bowie_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_bowie_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_bowie_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_bowie_id() {
  if (bowie_id_ != &::google::protobuf::internal::kEmptyString) {
    bowie_id_->clear();
  }
  clear_has_bowie_id();
}
inline const ::std::string& DownloadBattleInforResponse_BattleInfor::bowie_id() const {
  return *bowie_id_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_bowie_id(const ::std::string& value) {
  set_has_bowie_id();
  if (bowie_id_ == &::google::protobuf::internal::kEmptyString) {
    bowie_id_ = new ::std::string;
  }
  bowie_id_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_bowie_id(const char* value) {
  set_has_bowie_id();
  if (bowie_id_ == &::google::protobuf::internal::kEmptyString) {
    bowie_id_ = new ::std::string;
  }
  bowie_id_->assign(value);
}
inline void DownloadBattleInforResponse_BattleInfor::set_bowie_id(const char* value, size_t size) {
  set_has_bowie_id();
  if (bowie_id_ == &::google::protobuf::internal::kEmptyString) {
    bowie_id_ = new ::std::string;
  }
  bowie_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::mutable_bowie_id() {
  set_has_bowie_id();
  if (bowie_id_ == &::google::protobuf::internal::kEmptyString) {
    bowie_id_ = new ::std::string;
  }
  return bowie_id_;
}
inline ::std::string* DownloadBattleInforResponse_BattleInfor::release_bowie_id() {
  clear_has_bowie_id();
  if (bowie_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bowie_id_;
    bowie_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 star_count = 12;
inline bool DownloadBattleInforResponse_BattleInfor::has_star_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DownloadBattleInforResponse_BattleInfor::set_has_star_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_has_star_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DownloadBattleInforResponse_BattleInfor::clear_star_count() {
  star_count_ = 0;
  clear_has_star_count();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse_BattleInfor::star_count() const {
  return star_count_;
}
inline void DownloadBattleInforResponse_BattleInfor::set_star_count(::google::protobuf::int32 value) {
  set_has_star_count();
  star_count_ = value;
}

// -------------------------------------------------------------------

// DownloadBattleInforResponse

// optional sint32 result = 1 [default = 0];
inline bool DownloadBattleInforResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadBattleInforResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadBattleInforResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadBattleInforResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 DownloadBattleInforResponse::result() const {
  return result_;
}
inline void DownloadBattleInforResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool DownloadBattleInforResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadBattleInforResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadBattleInforResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadBattleInforResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& DownloadBattleInforResponse::info() const {
  return *info_;
}
inline void DownloadBattleInforResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DownloadBattleInforResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DownloadBattleInforResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadBattleInforResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* DownloadBattleInforResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .message.DownloadBattleInforResponse.BattleInfor battleInforList = 3;
inline int DownloadBattleInforResponse::battleinforlist_size() const {
  return battleinforlist_.size();
}
inline void DownloadBattleInforResponse::clear_battleinforlist() {
  battleinforlist_.Clear();
}
inline const ::message::DownloadBattleInforResponse_BattleInfor& DownloadBattleInforResponse::battleinforlist(int index) const {
  return battleinforlist_.Get(index);
}
inline ::message::DownloadBattleInforResponse_BattleInfor* DownloadBattleInforResponse::mutable_battleinforlist(int index) {
  return battleinforlist_.Mutable(index);
}
inline ::message::DownloadBattleInforResponse_BattleInfor* DownloadBattleInforResponse::add_battleinforlist() {
  return battleinforlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor >&
DownloadBattleInforResponse::battleinforlist() const {
  return battleinforlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadBattleInforResponse_BattleInfor >*
DownloadBattleInforResponse::mutable_battleinforlist() {
  return &battleinforlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DownloadBattleInfor_2eproto__INCLUDED
