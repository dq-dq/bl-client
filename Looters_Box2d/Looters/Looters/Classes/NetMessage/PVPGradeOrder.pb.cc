// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PVPGradeOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_PVPGradeOrder_2eproto() {
  delete PVPGradeOrderRequest::default_instance_;
  delete PVPGradeOrderResponse::default_instance_;
  delete PVPGradeOrderResponse_PVPGradeOrderVO::default_instance_;
}

void protobuf_AddDesc_PVPGradeOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PVPGradeOrderRequest::default_instance_ = new PVPGradeOrderRequest();
  PVPGradeOrderResponse::default_instance_ = new PVPGradeOrderResponse();
  PVPGradeOrderResponse_PVPGradeOrderVO::default_instance_ = new PVPGradeOrderResponse_PVPGradeOrderVO();
  PVPGradeOrderRequest::default_instance_->InitAsDefaultInstance();
  PVPGradeOrderResponse::default_instance_->InitAsDefaultInstance();
  PVPGradeOrderResponse_PVPGradeOrderVO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PVPGradeOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PVPGradeOrder_2eproto {
  StaticDescriptorInitializer_PVPGradeOrder_2eproto() {
    protobuf_AddDesc_PVPGradeOrder_2eproto();
  }
} static_descriptor_initializer_PVPGradeOrder_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PVPGradeOrderRequest::kMailAddressFieldNumber;
#endif  // !_MSC_VER

PVPGradeOrderRequest::PVPGradeOrderRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PVPGradeOrderRequest::InitAsDefaultInstance() {
}

PVPGradeOrderRequest::PVPGradeOrderRequest(const PVPGradeOrderRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PVPGradeOrderRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPGradeOrderRequest::~PVPGradeOrderRequest() {
  SharedDtor();
}

void PVPGradeOrderRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (this != default_instance_) {
  }
}

void PVPGradeOrderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVPGradeOrderRequest& PVPGradeOrderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVPGradeOrder_2eproto();  return *default_instance_;
}

PVPGradeOrderRequest* PVPGradeOrderRequest::default_instance_ = NULL;

PVPGradeOrderRequest* PVPGradeOrderRequest::New() const {
  return new PVPGradeOrderRequest;
}

void PVPGradeOrderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PVPGradeOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPGradeOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
}

int PVPGradeOrderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPGradeOrderRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVPGradeOrderRequest*>(&from));
}

void PVPGradeOrderRequest::MergeFrom(const PVPGradeOrderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
  }
}

void PVPGradeOrderRequest::CopyFrom(const PVPGradeOrderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPGradeOrderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PVPGradeOrderRequest::Swap(PVPGradeOrderRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PVPGradeOrderRequest::GetTypeName() const {
  return "message.PVPGradeOrderRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PVPGradeOrderResponse_PVPGradeOrderVO::kPvpGradeOrderFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kPvpOrderChangeFlagFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kPvpOrderChangeCountFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kLevelFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kNicknameFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kPvpGradeFieldNumber;
const int PVPGradeOrderResponse_PVPGradeOrderVO::kMailAddressFieldNumber;
#endif  // !_MSC_VER

PVPGradeOrderResponse_PVPGradeOrderVO::PVPGradeOrderResponse_PVPGradeOrderVO()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PVPGradeOrderResponse_PVPGradeOrderVO::InitAsDefaultInstance() {
}

PVPGradeOrderResponse_PVPGradeOrderVO::PVPGradeOrderResponse_PVPGradeOrderVO(const PVPGradeOrderResponse_PVPGradeOrderVO& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PVPGradeOrderResponse_PVPGradeOrderVO::SharedCtor() {
  _cached_size_ = 0;
  pvp_grade_order_ = 0;
  pvp_order_change_flag_ = 0;
  pvp_order_change_count_ = 0;
  level_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pvp_grade_ = 0;
  mail_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPGradeOrderResponse_PVPGradeOrderVO::~PVPGradeOrderResponse_PVPGradeOrderVO() {
  SharedDtor();
}

void PVPGradeOrderResponse_PVPGradeOrderVO::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (mail_address_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_address_;
  }
  if (this != default_instance_) {
  }
}

void PVPGradeOrderResponse_PVPGradeOrderVO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVPGradeOrderResponse_PVPGradeOrderVO& PVPGradeOrderResponse_PVPGradeOrderVO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVPGradeOrder_2eproto();  return *default_instance_;
}

PVPGradeOrderResponse_PVPGradeOrderVO* PVPGradeOrderResponse_PVPGradeOrderVO::default_instance_ = NULL;

PVPGradeOrderResponse_PVPGradeOrderVO* PVPGradeOrderResponse_PVPGradeOrderVO::New() const {
  return new PVPGradeOrderResponse_PVPGradeOrderVO;
}

void PVPGradeOrderResponse_PVPGradeOrderVO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvp_grade_order_ = 0;
    pvp_order_change_flag_ = 0;
    pvp_order_change_count_ = 0;
    level_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    pvp_grade_ = 0;
    if (has_mail_address()) {
      if (mail_address_ != &::google::protobuf::internal::kEmptyString) {
        mail_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PVPGradeOrderResponse_PVPGradeOrderVO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pvp_grade_order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_grade_order_)));
          set_has_pvp_grade_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pvp_order_change_flag;
        break;
      }
      
      // optional int32 pvp_order_change_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_order_change_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_order_change_flag_)));
          set_has_pvp_order_change_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pvp_order_change_count;
        break;
      }
      
      // optional int32 pvp_order_change_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_order_change_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_order_change_count_)));
          set_has_pvp_order_change_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pvp_grade;
        break;
      }
      
      // optional int32 pvp_grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_grade_)));
          set_has_pvp_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mail_address;
        break;
      }
      
      // optional string mail_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPGradeOrderResponse_PVPGradeOrderVO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pvp_grade_order = 1;
  if (has_pvp_grade_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvp_grade_order(), output);
  }
  
  // optional int32 pvp_order_change_flag = 2;
  if (has_pvp_order_change_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pvp_order_change_flag(), output);
  }
  
  // optional int32 pvp_order_change_count = 3;
  if (has_pvp_order_change_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pvp_order_change_count(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }
  
  // optional int32 pvp_grade = 6;
  if (has_pvp_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvp_grade(), output);
  }
  
  // optional string mail_address = 7;
  if (has_mail_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mail_address(), output);
  }
  
}

int PVPGradeOrderResponse_PVPGradeOrderVO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pvp_grade_order = 1;
    if (has_pvp_grade_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_grade_order());
    }
    
    // optional int32 pvp_order_change_flag = 2;
    if (has_pvp_order_change_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_order_change_flag());
    }
    
    // optional int32 pvp_order_change_count = 3;
    if (has_pvp_order_change_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_order_change_count());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional int32 pvp_grade = 6;
    if (has_pvp_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_grade());
    }
    
    // optional string mail_address = 7;
    if (has_mail_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_address());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPGradeOrderResponse_PVPGradeOrderVO::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVPGradeOrderResponse_PVPGradeOrderVO*>(&from));
}

void PVPGradeOrderResponse_PVPGradeOrderVO::MergeFrom(const PVPGradeOrderResponse_PVPGradeOrderVO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvp_grade_order()) {
      set_pvp_grade_order(from.pvp_grade_order());
    }
    if (from.has_pvp_order_change_flag()) {
      set_pvp_order_change_flag(from.pvp_order_change_flag());
    }
    if (from.has_pvp_order_change_count()) {
      set_pvp_order_change_count(from.pvp_order_change_count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_pvp_grade()) {
      set_pvp_grade(from.pvp_grade());
    }
    if (from.has_mail_address()) {
      set_mail_address(from.mail_address());
    }
  }
}

void PVPGradeOrderResponse_PVPGradeOrderVO::CopyFrom(const PVPGradeOrderResponse_PVPGradeOrderVO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPGradeOrderResponse_PVPGradeOrderVO::IsInitialized() const {
  
  return true;
}

void PVPGradeOrderResponse_PVPGradeOrderVO::Swap(PVPGradeOrderResponse_PVPGradeOrderVO* other) {
  if (other != this) {
    std::swap(pvp_grade_order_, other->pvp_grade_order_);
    std::swap(pvp_order_change_flag_, other->pvp_order_change_flag_);
    std::swap(pvp_order_change_count_, other->pvp_order_change_count_);
    std::swap(level_, other->level_);
    std::swap(nickname_, other->nickname_);
    std::swap(pvp_grade_, other->pvp_grade_);
    std::swap(mail_address_, other->mail_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PVPGradeOrderResponse_PVPGradeOrderVO::GetTypeName() const {
  return "message.PVPGradeOrderResponse.PVPGradeOrderVO";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PVPGradeOrderResponse::kResultFieldNumber;
const int PVPGradeOrderResponse::kInfoFieldNumber;
const int PVPGradeOrderResponse::kPvpGradeOrderVOListFieldNumber;
#endif  // !_MSC_VER

PVPGradeOrderResponse::PVPGradeOrderResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PVPGradeOrderResponse::InitAsDefaultInstance() {
}

PVPGradeOrderResponse::PVPGradeOrderResponse(const PVPGradeOrderResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PVPGradeOrderResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPGradeOrderResponse::~PVPGradeOrderResponse() {
  SharedDtor();
}

void PVPGradeOrderResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void PVPGradeOrderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVPGradeOrderResponse& PVPGradeOrderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVPGradeOrder_2eproto();  return *default_instance_;
}

PVPGradeOrderResponse* PVPGradeOrderResponse::default_instance_ = NULL;

PVPGradeOrderResponse* PVPGradeOrderResponse::New() const {
  return new PVPGradeOrderResponse;
}

void PVPGradeOrderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  pvp_grade_ordervolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PVPGradeOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pvp_grade_OrderVOList;
        break;
      }
      
      // repeated .message.PVPGradeOrderResponse.PVPGradeOrderVO pvp_grade_OrderVOList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_grade_OrderVOList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvp_grade_ordervolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pvp_grade_OrderVOList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPGradeOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // repeated .message.PVPGradeOrderResponse.PVPGradeOrderVO pvp_grade_OrderVOList = 3;
  for (int i = 0; i < this->pvp_grade_ordervolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pvp_grade_ordervolist(i), output);
  }
  
}

int PVPGradeOrderResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  // repeated .message.PVPGradeOrderResponse.PVPGradeOrderVO pvp_grade_OrderVOList = 3;
  total_size += 1 * this->pvp_grade_ordervolist_size();
  for (int i = 0; i < this->pvp_grade_ordervolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvp_grade_ordervolist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPGradeOrderResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVPGradeOrderResponse*>(&from));
}

void PVPGradeOrderResponse::MergeFrom(const PVPGradeOrderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pvp_grade_ordervolist_.MergeFrom(from.pvp_grade_ordervolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void PVPGradeOrderResponse::CopyFrom(const PVPGradeOrderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPGradeOrderResponse::IsInitialized() const {
  
  return true;
}

void PVPGradeOrderResponse::Swap(PVPGradeOrderResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    pvp_grade_ordervolist_.Swap(&other->pvp_grade_ordervolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PVPGradeOrderResponse::GetTypeName() const {
  return "message.PVPGradeOrderResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
