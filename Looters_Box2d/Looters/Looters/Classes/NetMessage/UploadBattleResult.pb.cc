// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UploadBattleResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UploadBattleResult_2eproto() {
  delete UploadBattleResultRequest::default_instance_;
  delete UploadBattleResultRequest_BuildDestoryStatus::default_instance_;
  delete UploadBattleResultRequest_CharacterUsedStatus::default_instance_;
  delete UploadBattleResultResponse::default_instance_;
}

void protobuf_AddDesc_UploadBattleResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UploadBattleResultRequest::default_instance_ = new UploadBattleResultRequest();
  UploadBattleResultRequest_BuildDestoryStatus::default_instance_ = new UploadBattleResultRequest_BuildDestoryStatus();
  UploadBattleResultRequest_CharacterUsedStatus::default_instance_ = new UploadBattleResultRequest_CharacterUsedStatus();
  UploadBattleResultResponse::default_instance_ = new UploadBattleResultResponse();
  UploadBattleResultRequest::default_instance_->InitAsDefaultInstance();
  UploadBattleResultRequest_BuildDestoryStatus::default_instance_->InitAsDefaultInstance();
  UploadBattleResultRequest_CharacterUsedStatus::default_instance_->InitAsDefaultInstance();
  UploadBattleResultResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UploadBattleResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UploadBattleResult_2eproto {
  StaticDescriptorInitializer_UploadBattleResult_2eproto() {
    protobuf_AddDesc_UploadBattleResult_2eproto();
  }
} static_descriptor_initializer_UploadBattleResult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UploadBattleResultRequest_BuildDestoryStatus::kBuildingIdFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kUuidFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kMapIndexXFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kMapIndexYFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kDestoryStatusFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kLoseCountFieldNumber;
const int UploadBattleResultRequest_BuildDestoryStatus::kLoseElixirCountFieldNumber;
#endif  // !_MSC_VER

UploadBattleResultRequest_BuildDestoryStatus::UploadBattleResultRequest_BuildDestoryStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleResultRequest_BuildDestoryStatus::InitAsDefaultInstance() {
}

UploadBattleResultRequest_BuildDestoryStatus::UploadBattleResultRequest_BuildDestoryStatus(const UploadBattleResultRequest_BuildDestoryStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleResultRequest_BuildDestoryStatus::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0;
  uuid_ = 0;
  map_index_x_ = 0;
  map_index_y_ = 0;
  destory_status_ = 0;
  lose_count_ = 0;
  lose_elixir_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleResultRequest_BuildDestoryStatus::~UploadBattleResultRequest_BuildDestoryStatus() {
  SharedDtor();
}

void UploadBattleResultRequest_BuildDestoryStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadBattleResultRequest_BuildDestoryStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleResultRequest_BuildDestoryStatus& UploadBattleResultRequest_BuildDestoryStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleResult_2eproto();  return *default_instance_;
}

UploadBattleResultRequest_BuildDestoryStatus* UploadBattleResultRequest_BuildDestoryStatus::default_instance_ = NULL;

UploadBattleResultRequest_BuildDestoryStatus* UploadBattleResultRequest_BuildDestoryStatus::New() const {
  return new UploadBattleResultRequest_BuildDestoryStatus;
}

void UploadBattleResultRequest_BuildDestoryStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0;
    uuid_ = 0;
    map_index_x_ = 0;
    map_index_y_ = 0;
    destory_status_ = 0;
    lose_count_ = 0;
    lose_elixir_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleResultRequest_BuildDestoryStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }
      
      // optional int32 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_index_x;
        break;
      }
      
      // optional int32 map_index_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_x_)));
          set_has_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_index_y;
        break;
      }
      
      // optional int32 map_index_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_y_)));
          set_has_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destory_status;
        break;
      }
      
      // optional int32 destory_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destory_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destory_status_)));
          set_has_destory_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lose_count;
        break;
      }
      
      // optional int32 lose_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lose_elixir_count;
        break;
      }
      
      // optional int32 lose_elixir_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_elixir_count_)));
          set_has_lose_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleResultRequest_BuildDestoryStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->building_id(), output);
  }
  
  // optional int32 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uuid(), output);
  }
  
  // optional int32 map_index_x = 3;
  if (has_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_index_x(), output);
  }
  
  // optional int32 map_index_y = 4;
  if (has_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_index_y(), output);
  }
  
  // optional int32 destory_status = 5;
  if (has_destory_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->destory_status(), output);
  }
  
  // optional int32 lose_count = 6;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lose_count(), output);
  }
  
  // optional int32 lose_elixir_count = 7;
  if (has_lose_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_elixir_count(), output);
  }
  
}

int UploadBattleResultRequest_BuildDestoryStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional int32 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }
    
    // optional int32 map_index_x = 3;
    if (has_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_x());
    }
    
    // optional int32 map_index_y = 4;
    if (has_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_y());
    }
    
    // optional int32 destory_status = 5;
    if (has_destory_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destory_status());
    }
    
    // optional int32 lose_count = 6;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_count());
    }
    
    // optional int32 lose_elixir_count = 7;
    if (has_lose_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_elixir_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleResultRequest_BuildDestoryStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleResultRequest_BuildDestoryStatus*>(&from));
}

void UploadBattleResultRequest_BuildDestoryStatus::MergeFrom(const UploadBattleResultRequest_BuildDestoryStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_map_index_x()) {
      set_map_index_x(from.map_index_x());
    }
    if (from.has_map_index_y()) {
      set_map_index_y(from.map_index_y());
    }
    if (from.has_destory_status()) {
      set_destory_status(from.destory_status());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
    if (from.has_lose_elixir_count()) {
      set_lose_elixir_count(from.lose_elixir_count());
    }
  }
}

void UploadBattleResultRequest_BuildDestoryStatus::CopyFrom(const UploadBattleResultRequest_BuildDestoryStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleResultRequest_BuildDestoryStatus::IsInitialized() const {
  
  return true;
}

void UploadBattleResultRequest_BuildDestoryStatus::Swap(UploadBattleResultRequest_BuildDestoryStatus* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(map_index_x_, other->map_index_x_);
    std::swap(map_index_y_, other->map_index_y_);
    std::swap(destory_status_, other->destory_status_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(lose_elixir_count_, other->lose_elixir_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleResultRequest_BuildDestoryStatus::GetTypeName() const {
  return "message.UploadBattleResultRequest.BuildDestoryStatus";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UploadBattleResultRequest_CharacterUsedStatus::kCharacterIdOrSpellIdFieldNumber;
const int UploadBattleResultRequest_CharacterUsedStatus::kCountFieldNumber;
const int UploadBattleResultRequest_CharacterUsedStatus::kUsedTypeFieldNumber;
#endif  // !_MSC_VER

UploadBattleResultRequest_CharacterUsedStatus::UploadBattleResultRequest_CharacterUsedStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleResultRequest_CharacterUsedStatus::InitAsDefaultInstance() {
}

UploadBattleResultRequest_CharacterUsedStatus::UploadBattleResultRequest_CharacterUsedStatus(const UploadBattleResultRequest_CharacterUsedStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleResultRequest_CharacterUsedStatus::SharedCtor() {
  _cached_size_ = 0;
  characteridorspellid_ = 0;
  count_ = 0;
  used_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleResultRequest_CharacterUsedStatus::~UploadBattleResultRequest_CharacterUsedStatus() {
  SharedDtor();
}

void UploadBattleResultRequest_CharacterUsedStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadBattleResultRequest_CharacterUsedStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleResultRequest_CharacterUsedStatus& UploadBattleResultRequest_CharacterUsedStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleResult_2eproto();  return *default_instance_;
}

UploadBattleResultRequest_CharacterUsedStatus* UploadBattleResultRequest_CharacterUsedStatus::default_instance_ = NULL;

UploadBattleResultRequest_CharacterUsedStatus* UploadBattleResultRequest_CharacterUsedStatus::New() const {
  return new UploadBattleResultRequest_CharacterUsedStatus;
}

void UploadBattleResultRequest_CharacterUsedStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    characteridorspellid_ = 0;
    count_ = 0;
    used_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleResultRequest_CharacterUsedStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 characterIdOrSpellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &characteridorspellid_)));
          set_has_characteridorspellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_type;
        break;
      }
      
      // optional int32 used_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_type_)));
          set_has_used_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleResultRequest_CharacterUsedStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 characterIdOrSpellId = 1;
  if (has_characteridorspellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->characteridorspellid(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 used_type = 3;
  if (has_used_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->used_type(), output);
  }
  
}

int UploadBattleResultRequest_CharacterUsedStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 characterIdOrSpellId = 1;
    if (has_characteridorspellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->characteridorspellid());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 used_type = 3;
    if (has_used_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_type());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleResultRequest_CharacterUsedStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleResultRequest_CharacterUsedStatus*>(&from));
}

void UploadBattleResultRequest_CharacterUsedStatus::MergeFrom(const UploadBattleResultRequest_CharacterUsedStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_characteridorspellid()) {
      set_characteridorspellid(from.characteridorspellid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_used_type()) {
      set_used_type(from.used_type());
    }
  }
}

void UploadBattleResultRequest_CharacterUsedStatus::CopyFrom(const UploadBattleResultRequest_CharacterUsedStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleResultRequest_CharacterUsedStatus::IsInitialized() const {
  
  return true;
}

void UploadBattleResultRequest_CharacterUsedStatus::Swap(UploadBattleResultRequest_CharacterUsedStatus* other) {
  if (other != this) {
    std::swap(characteridorspellid_, other->characteridorspellid_);
    std::swap(count_, other->count_);
    std::swap(used_type_, other->used_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleResultRequest_CharacterUsedStatus::GetTypeName() const {
  return "message.UploadBattleResultRequest.CharacterUsedStatus";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UploadBattleResultRequest::kMailAddressFieldNumber;
const int UploadBattleResultRequest::kGoldenCountFieldNumber;
const int UploadBattleResultRequest::kElixirCountFieldNumber;
const int UploadBattleResultRequest::kPvpMarkFieldNumber;
const int UploadBattleResultRequest::kStarPercentFieldNumber;
const int UploadBattleResultRequest::kBuildDistoryStatusListFieldNumber;
const int UploadBattleResultRequest::kCharacterUsedStatusListFieldNumber;
const int UploadBattleResultRequest::kUseClansFlagFieldNumber;
const int UploadBattleResultRequest::kStarCountFieldNumber;
const int UploadBattleResultRequest::kStrMd5FieldNumber;
#endif  // !_MSC_VER

UploadBattleResultRequest::UploadBattleResultRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleResultRequest::InitAsDefaultInstance() {
}

UploadBattleResultRequest::UploadBattleResultRequest(const UploadBattleResultRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleResultRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golden_count_ = 0;
  elixir_count_ = 0;
  pvp_mark_ = 0;
  star_percent_ = 0;
  use_clans_flag_ = false;
  star_count_ = 0;
  str_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleResultRequest::~UploadBattleResultRequest() {
  SharedDtor();
}

void UploadBattleResultRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete str_md5_;
  }
  if (this != default_instance_) {
  }
}

void UploadBattleResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleResultRequest& UploadBattleResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleResult_2eproto();  return *default_instance_;
}

UploadBattleResultRequest* UploadBattleResultRequest::default_instance_ = NULL;

UploadBattleResultRequest* UploadBattleResultRequest::New() const {
  return new UploadBattleResultRequest;
}

void UploadBattleResultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    golden_count_ = 0;
    elixir_count_ = 0;
    pvp_mark_ = 0;
    star_percent_ = 0;
    use_clans_flag_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_count_ = 0;
    if (has_str_md5()) {
      if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
        str_md5_->clear();
      }
    }
  }
  builddistorystatuslist_.Clear();
  characterusedstatuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_golden_count;
        break;
      }
      
      // optional int32 golden_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_count_)));
          set_has_golden_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elixir_count;
        break;
      }
      
      // optional int32 elixir_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elixir_count_)));
          set_has_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pvp_mark;
        break;
      }
      
      // optional int32 pvp_mark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_mark_)));
          set_has_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star_percent;
        break;
      }
      
      // optional int32 star_percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_percent_)));
          set_has_star_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_BuildDistoryStatusList;
        break;
      }
      
      // repeated .message.UploadBattleResultRequest.BuildDestoryStatus BuildDistoryStatusList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuildDistoryStatusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builddistorystatuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_BuildDistoryStatusList;
        if (input->ExpectTag(58)) goto parse_characterUsedStatusList;
        break;
      }
      
      // repeated .message.UploadBattleResultRequest.CharacterUsedStatus characterUsedStatusList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characterUsedStatusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characterusedstatuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_characterUsedStatusList;
        if (input->ExpectTag(64)) goto parse_use_clans_flag;
        break;
      }
      
      // optional bool use_clans_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_clans_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_clans_flag_)));
          set_has_use_clans_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_star_count;
        break;
      }
      
      // optional int32 star_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_count_)));
          set_has_star_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_str_md5;
        break;
      }
      
      // optional string str_md5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // optional int32 golden_count = 2;
  if (has_golden_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->golden_count(), output);
  }
  
  // optional int32 elixir_count = 3;
  if (has_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->elixir_count(), output);
  }
  
  // optional int32 pvp_mark = 4;
  if (has_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pvp_mark(), output);
  }
  
  // optional int32 star_percent = 5;
  if (has_star_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star_percent(), output);
  }
  
  // repeated .message.UploadBattleResultRequest.BuildDestoryStatus BuildDistoryStatusList = 6;
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->builddistorystatuslist(i), output);
  }
  
  // repeated .message.UploadBattleResultRequest.CharacterUsedStatus characterUsedStatusList = 7;
  for (int i = 0; i < this->characterusedstatuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->characterusedstatuslist(i), output);
  }
  
  // optional bool use_clans_flag = 8;
  if (has_use_clans_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_clans_flag(), output);
  }
  
  // optional int32 star_count = 9;
  if (has_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->star_count(), output);
  }
  
  // optional string str_md5 = 10;
  if (has_str_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->str_md5(), output);
  }
  
}

int UploadBattleResultRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // optional int32 golden_count = 2;
    if (has_golden_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden_count());
    }
    
    // optional int32 elixir_count = 3;
    if (has_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elixir_count());
    }
    
    // optional int32 pvp_mark = 4;
    if (has_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_mark());
    }
    
    // optional int32 star_percent = 5;
    if (has_star_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_percent());
    }
    
    // optional bool use_clans_flag = 8;
    if (has_use_clans_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 star_count = 9;
    if (has_star_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_count());
    }
    
    // optional string str_md5 = 10;
    if (has_str_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_md5());
    }
    
  }
  // repeated .message.UploadBattleResultRequest.BuildDestoryStatus BuildDistoryStatusList = 6;
  total_size += 1 * this->builddistorystatuslist_size();
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builddistorystatuslist(i));
  }
  
  // repeated .message.UploadBattleResultRequest.CharacterUsedStatus characterUsedStatusList = 7;
  total_size += 1 * this->characterusedstatuslist_size();
  for (int i = 0; i < this->characterusedstatuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characterusedstatuslist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleResultRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleResultRequest*>(&from));
}

void UploadBattleResultRequest::MergeFrom(const UploadBattleResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  builddistorystatuslist_.MergeFrom(from.builddistorystatuslist_);
  characterusedstatuslist_.MergeFrom(from.characterusedstatuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_golden_count()) {
      set_golden_count(from.golden_count());
    }
    if (from.has_elixir_count()) {
      set_elixir_count(from.elixir_count());
    }
    if (from.has_pvp_mark()) {
      set_pvp_mark(from.pvp_mark());
    }
    if (from.has_star_percent()) {
      set_star_percent(from.star_percent());
    }
    if (from.has_use_clans_flag()) {
      set_use_clans_flag(from.use_clans_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star_count()) {
      set_star_count(from.star_count());
    }
    if (from.has_str_md5()) {
      set_str_md5(from.str_md5());
    }
  }
}

void UploadBattleResultRequest::CopyFrom(const UploadBattleResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UploadBattleResultRequest::Swap(UploadBattleResultRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(golden_count_, other->golden_count_);
    std::swap(elixir_count_, other->elixir_count_);
    std::swap(pvp_mark_, other->pvp_mark_);
    std::swap(star_percent_, other->star_percent_);
    builddistorystatuslist_.Swap(&other->builddistorystatuslist_);
    characterusedstatuslist_.Swap(&other->characterusedstatuslist_);
    std::swap(use_clans_flag_, other->use_clans_flag_);
    std::swap(star_count_, other->star_count_);
    std::swap(str_md5_, other->str_md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleResultRequest::GetTypeName() const {
  return "message.UploadBattleResultRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadBattleResultResponse::kResultFieldNumber;
const int UploadBattleResultResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

UploadBattleResultResponse::UploadBattleResultResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleResultResponse::InitAsDefaultInstance() {
}

UploadBattleResultResponse::UploadBattleResultResponse(const UploadBattleResultResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleResultResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleResultResponse::~UploadBattleResultResponse() {
  SharedDtor();
}

void UploadBattleResultResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void UploadBattleResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleResultResponse& UploadBattleResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleResult_2eproto();  return *default_instance_;
}

UploadBattleResultResponse* UploadBattleResultResponse::default_instance_ = NULL;

UploadBattleResultResponse* UploadBattleResultResponse::New() const {
  return new UploadBattleResultResponse;
}

void UploadBattleResultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
}

int UploadBattleResultResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleResultResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleResultResponse*>(&from));
}

void UploadBattleResultResponse::MergeFrom(const UploadBattleResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void UploadBattleResultResponse::CopyFrom(const UploadBattleResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleResultResponse::IsInitialized() const {
  
  return true;
}

void UploadBattleResultResponse::Swap(UploadBattleResultResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleResultResponse::GetTypeName() const {
  return "message.UploadBattleResultResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
