// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OperateSequence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_OperateSequence_2eproto() {
  delete OperateSequenceRequest::default_instance_;
  delete OperateSequenceRequest_Operate::default_instance_;
  delete OperateSequenceRequest_Accelerate::default_instance_;
  delete OperateSequenceResponse::default_instance_;
}

void protobuf_AddDesc_OperateSequence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  OperateSequenceRequest::default_instance_ = new OperateSequenceRequest();
  OperateSequenceRequest_Operate::default_instance_ = new OperateSequenceRequest_Operate();
  OperateSequenceRequest_Accelerate::default_instance_ = new OperateSequenceRequest_Accelerate();
  OperateSequenceResponse::default_instance_ = new OperateSequenceResponse();
  OperateSequenceRequest::default_instance_->InitAsDefaultInstance();
  OperateSequenceRequest_Operate::default_instance_->InitAsDefaultInstance();
  OperateSequenceRequest_Accelerate::default_instance_->InitAsDefaultInstance();
  OperateSequenceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OperateSequence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OperateSequence_2eproto {
  StaticDescriptorInitializer_OperateSequence_2eproto() {
    protobuf_AddDesc_OperateSequence_2eproto();
  }
} static_descriptor_initializer_OperateSequence_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OperateSequenceRequest_Operate::kTypeFieldNumber;
const int OperateSequenceRequest_Operate::kOperationTimeFieldNumber;
const int OperateSequenceRequest_Operate::kUuidFieldNumber;
const int OperateSequenceRequest_Operate::kBuildingIdFieldNumber;
const int OperateSequenceRequest_Operate::kEndTimeFieldNumber;
const int OperateSequenceRequest_Operate::kMoveToMapIndexXFieldNumber;
const int OperateSequenceRequest_Operate::kCharacterIdFieldNumber;
const int OperateSequenceRequest_Operate::kProduceCountFieldNumber;
const int OperateSequenceRequest_Operate::kRemainingTimeFieldNumber;
const int OperateSequenceRequest_Operate::kMoveToMapIndexYFieldNumber;
const int OperateSequenceRequest_Operate::kBuildUpgradeStatusFieldNumber;
const int OperateSequenceRequest_Operate::kTreasureIdFieldNumber;
const int OperateSequenceRequest_Operate::kStrMd5FieldNumber;
#endif  // !_MSC_VER

OperateSequenceRequest_Operate::OperateSequenceRequest_Operate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OperateSequenceRequest_Operate::InitAsDefaultInstance() {
}

OperateSequenceRequest_Operate::OperateSequenceRequest_Operate(const OperateSequenceRequest_Operate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OperateSequenceRequest_Operate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  operation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = 0;
  building_id_ = 0;
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  move_to_map_index_x_ = 0;
  character_id_ = 0;
  produce_count_ = 0;
  remaining_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  move_to_map_index_y_ = 0;
  build_upgrade_status_ = 0;
  treasure_id_ = 0;
  str_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateSequenceRequest_Operate::~OperateSequenceRequest_Operate() {
  SharedDtor();
}

void OperateSequenceRequest_Operate::SharedDtor() {
  if (operation_time_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_time_;
  }
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (remaining_time_ != &::google::protobuf::internal::kEmptyString) {
    delete remaining_time_;
  }
  if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete str_md5_;
  }
  if (this != default_instance_) {
  }
}

void OperateSequenceRequest_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperateSequenceRequest_Operate& OperateSequenceRequest_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperateSequence_2eproto();  return *default_instance_;
}

OperateSequenceRequest_Operate* OperateSequenceRequest_Operate::default_instance_ = NULL;

OperateSequenceRequest_Operate* OperateSequenceRequest_Operate::New() const {
  return new OperateSequenceRequest_Operate;
}

void OperateSequenceRequest_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_operation_time()) {
      if (operation_time_ != &::google::protobuf::internal::kEmptyString) {
        operation_time_->clear();
      }
    }
    uuid_ = 0;
    building_id_ = 0;
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    move_to_map_index_x_ = 0;
    character_id_ = 0;
    produce_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_remaining_time()) {
      if (remaining_time_ != &::google::protobuf::internal::kEmptyString) {
        remaining_time_->clear();
      }
    }
    move_to_map_index_y_ = 0;
    build_upgrade_status_ = 0;
    treasure_id_ = 0;
    if (has_str_md5()) {
      if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
        str_md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OperateSequenceRequest_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation_time;
        break;
      }
      
      // optional string operation_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }
      
      // optional int32 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_building_id;
        break;
      }
      
      // optional int32 building_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_move_to_map_index_x;
        break;
      }
      
      // optional int32 move_to_map_index_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_to_map_index_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_to_map_index_x_)));
          set_has_move_to_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_character_id;
        break;
      }
      
      // optional int32 character_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_produce_count;
        break;
      }
      
      // optional int32 produce_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produce_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &produce_count_)));
          set_has_produce_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_remaining_time;
        break;
      }
      
      // optional string remaining_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remaining_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remaining_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_move_to_map_index_y;
        break;
      }
      
      // optional int32 move_to_map_index_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_to_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_to_map_index_y_)));
          set_has_move_to_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_build_upgrade_status;
        break;
      }
      
      // optional int32 build_upgrade_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_upgrade_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_upgrade_status_)));
          set_has_build_upgrade_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_treasure_id;
        break;
      }
      
      // optional int32 treasure_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_str_md5;
        break;
      }
      
      // optional string str_md5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateSequenceRequest_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }
  
  // optional string operation_time = 2;
  if (has_operation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation_time(), output);
  }
  
  // optional int32 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uuid(), output);
  }
  
  // optional int32 building_id = 4;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->building_id(), output);
  }
  
  // optional string end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->end_time(), output);
  }
  
  // optional int32 move_to_map_index_x = 6;
  if (has_move_to_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->move_to_map_index_x(), output);
  }
  
  // optional int32 character_id = 7;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->character_id(), output);
  }
  
  // optional int32 produce_count = 8;
  if (has_produce_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->produce_count(), output);
  }
  
  // optional string remaining_time = 9;
  if (has_remaining_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->remaining_time(), output);
  }
  
  // optional int32 move_to_map_index_y = 10;
  if (has_move_to_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->move_to_map_index_y(), output);
  }
  
  // optional int32 build_upgrade_status = 11;
  if (has_build_upgrade_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->build_upgrade_status(), output);
  }
  
  // optional int32 treasure_id = 12;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->treasure_id(), output);
  }
  
  // optional string str_md5 = 13;
  if (has_str_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->str_md5(), output);
  }
  
}

int OperateSequenceRequest_Operate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }
    
    // optional string operation_time = 2;
    if (has_operation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation_time());
    }
    
    // optional int32 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }
    
    // optional int32 building_id = 4;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }
    
    // optional int32 move_to_map_index_x = 6;
    if (has_move_to_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_to_map_index_x());
    }
    
    // optional int32 character_id = 7;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }
    
    // optional int32 produce_count = 8;
    if (has_produce_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->produce_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string remaining_time = 9;
    if (has_remaining_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remaining_time());
    }
    
    // optional int32 move_to_map_index_y = 10;
    if (has_move_to_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_to_map_index_y());
    }
    
    // optional int32 build_upgrade_status = 11;
    if (has_build_upgrade_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_upgrade_status());
    }
    
    // optional int32 treasure_id = 12;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }
    
    // optional string str_md5 = 13;
    if (has_str_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_md5());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateSequenceRequest_Operate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperateSequenceRequest_Operate*>(&from));
}

void OperateSequenceRequest_Operate::MergeFrom(const OperateSequenceRequest_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operation_time()) {
      set_operation_time(from.operation_time());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_move_to_map_index_x()) {
      set_move_to_map_index_x(from.move_to_map_index_x());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_produce_count()) {
      set_produce_count(from.produce_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_remaining_time()) {
      set_remaining_time(from.remaining_time());
    }
    if (from.has_move_to_map_index_y()) {
      set_move_to_map_index_y(from.move_to_map_index_y());
    }
    if (from.has_build_upgrade_status()) {
      set_build_upgrade_status(from.build_upgrade_status());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
    if (from.has_str_md5()) {
      set_str_md5(from.str_md5());
    }
  }
}

void OperateSequenceRequest_Operate::CopyFrom(const OperateSequenceRequest_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateSequenceRequest_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OperateSequenceRequest_Operate::Swap(OperateSequenceRequest_Operate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operation_time_, other->operation_time_);
    std::swap(uuid_, other->uuid_);
    std::swap(building_id_, other->building_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(move_to_map_index_x_, other->move_to_map_index_x_);
    std::swap(character_id_, other->character_id_);
    std::swap(produce_count_, other->produce_count_);
    std::swap(remaining_time_, other->remaining_time_);
    std::swap(move_to_map_index_y_, other->move_to_map_index_y_);
    std::swap(build_upgrade_status_, other->build_upgrade_status_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(str_md5_, other->str_md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OperateSequenceRequest_Operate::GetTypeName() const {
  return "message.OperateSequenceRequest.Operate";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OperateSequenceRequest_Accelerate::kTypeFieldNumber;
const int OperateSequenceRequest_Accelerate::kIdFieldNumber;
const int OperateSequenceRequest_Accelerate::kUuidFieldNumber;
const int OperateSequenceRequest_Accelerate::kRemainTimeFieldNumber;
const int OperateSequenceRequest_Accelerate::kGemCountFieldNumber;
#endif  // !_MSC_VER

OperateSequenceRequest_Accelerate::OperateSequenceRequest_Accelerate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OperateSequenceRequest_Accelerate::InitAsDefaultInstance() {
}

OperateSequenceRequest_Accelerate::OperateSequenceRequest_Accelerate(const OperateSequenceRequest_Accelerate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OperateSequenceRequest_Accelerate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  uuid_ = 0;
  remain_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gem_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateSequenceRequest_Accelerate::~OperateSequenceRequest_Accelerate() {
  SharedDtor();
}

void OperateSequenceRequest_Accelerate::SharedDtor() {
  if (remain_time_ != &::google::protobuf::internal::kEmptyString) {
    delete remain_time_;
  }
  if (this != default_instance_) {
  }
}

void OperateSequenceRequest_Accelerate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperateSequenceRequest_Accelerate& OperateSequenceRequest_Accelerate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperateSequence_2eproto();  return *default_instance_;
}

OperateSequenceRequest_Accelerate* OperateSequenceRequest_Accelerate::default_instance_ = NULL;

OperateSequenceRequest_Accelerate* OperateSequenceRequest_Accelerate::New() const {
  return new OperateSequenceRequest_Accelerate;
}

void OperateSequenceRequest_Accelerate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    uuid_ = 0;
    if (has_remain_time()) {
      if (remain_time_ != &::google::protobuf::internal::kEmptyString) {
        remain_time_->clear();
      }
    }
    gem_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OperateSequenceRequest_Accelerate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }
      
      // optional int32 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remain_time;
        break;
      }
      
      // optional string remain_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remain_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remain_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gem_count;
        break;
      }
      
      // required int32 gem_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_count_)));
          set_has_gem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateSequenceRequest_Accelerate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uuid(), output);
  }
  
  // optional string remain_time = 4;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->remain_time(), output);
  }
  
  // required int32 gem_count = 5;
  if (has_gem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gem_count(), output);
  }
  
}

int OperateSequenceRequest_Accelerate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }
    
    // optional string remain_time = 4;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remain_time());
    }
    
    // required int32 gem_count = 5;
    if (has_gem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateSequenceRequest_Accelerate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperateSequenceRequest_Accelerate*>(&from));
}

void OperateSequenceRequest_Accelerate::MergeFrom(const OperateSequenceRequest_Accelerate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_gem_count()) {
      set_gem_count(from.gem_count());
    }
  }
}

void OperateSequenceRequest_Accelerate::CopyFrom(const OperateSequenceRequest_Accelerate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateSequenceRequest_Accelerate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  return true;
}

void OperateSequenceRequest_Accelerate::Swap(OperateSequenceRequest_Accelerate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(uuid_, other->uuid_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(gem_count_, other->gem_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OperateSequenceRequest_Accelerate::GetTypeName() const {
  return "message.OperateSequenceRequest.Accelerate";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OperateSequenceRequest::kVersionFieldNumber;
const int OperateSequenceRequest::kMailAddressFieldNumber;
const int OperateSequenceRequest::kOperateListFieldNumber;
const int OperateSequenceRequest::kAccelerateListFieldNumber;
#endif  // !_MSC_VER

OperateSequenceRequest::OperateSequenceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OperateSequenceRequest::InitAsDefaultInstance() {
}

OperateSequenceRequest::OperateSequenceRequest(const OperateSequenceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OperateSequenceRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateSequenceRequest::~OperateSequenceRequest() {
  SharedDtor();
}

void OperateSequenceRequest::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (this != default_instance_) {
  }
}

void OperateSequenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperateSequenceRequest& OperateSequenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperateSequence_2eproto();  return *default_instance_;
}

OperateSequenceRequest* OperateSequenceRequest::default_instance_ = NULL;

OperateSequenceRequest* OperateSequenceRequest::New() const {
  return new OperateSequenceRequest;
}

void OperateSequenceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
  }
  operatelist_.Clear();
  acceleratelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OperateSequenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailAddress;
        break;
      }
      
      // required string mailAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operateList;
        break;
      }
      
      // repeated .message.OperateSequenceRequest.Operate operateList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operateList;
        if (input->ExpectTag(34)) goto parse_accelerateList;
        break;
      }
      
      // repeated .message.OperateSequenceRequest.Accelerate accelerateList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accelerateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceleratelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_accelerateList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateSequenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required string mailAddress = 2;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mailaddress(), output);
  }
  
  // repeated .message.OperateSequenceRequest.Operate operateList = 3;
  for (int i = 0; i < this->operatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->operatelist(i), output);
  }
  
  // repeated .message.OperateSequenceRequest.Accelerate accelerateList = 4;
  for (int i = 0; i < this->acceleratelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->acceleratelist(i), output);
  }
  
}

int OperateSequenceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string mailAddress = 2;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
  }
  // repeated .message.OperateSequenceRequest.Operate operateList = 3;
  total_size += 1 * this->operatelist_size();
  for (int i = 0; i < this->operatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatelist(i));
  }
  
  // repeated .message.OperateSequenceRequest.Accelerate accelerateList = 4;
  total_size += 1 * this->acceleratelist_size();
  for (int i = 0; i < this->acceleratelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceleratelist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateSequenceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperateSequenceRequest*>(&from));
}

void OperateSequenceRequest::MergeFrom(const OperateSequenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatelist_.MergeFrom(from.operatelist_);
  acceleratelist_.MergeFrom(from.acceleratelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
  }
}

void OperateSequenceRequest::CopyFrom(const OperateSequenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateSequenceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < operatelist_size(); i++) {
    if (!this->operatelist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < acceleratelist_size(); i++) {
    if (!this->acceleratelist(i).IsInitialized()) return false;
  }
  return true;
}

void OperateSequenceRequest::Swap(OperateSequenceRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(mailaddress_, other->mailaddress_);
    operatelist_.Swap(&other->operatelist_);
    acceleratelist_.Swap(&other->acceleratelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OperateSequenceRequest::GetTypeName() const {
  return "message.OperateSequenceRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OperateSequenceResponse::kResultFieldNumber;
const int OperateSequenceResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

OperateSequenceResponse::OperateSequenceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OperateSequenceResponse::InitAsDefaultInstance() {
}

OperateSequenceResponse::OperateSequenceResponse(const OperateSequenceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OperateSequenceResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateSequenceResponse::~OperateSequenceResponse() {
  SharedDtor();
}

void OperateSequenceResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void OperateSequenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperateSequenceResponse& OperateSequenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperateSequence_2eproto();  return *default_instance_;
}

OperateSequenceResponse* OperateSequenceResponse::default_instance_ = NULL;

OperateSequenceResponse* OperateSequenceResponse::New() const {
  return new OperateSequenceResponse;
}

void OperateSequenceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OperateSequenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateSequenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
}

int OperateSequenceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateSequenceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperateSequenceResponse*>(&from));
}

void OperateSequenceResponse::MergeFrom(const OperateSequenceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void OperateSequenceResponse::CopyFrom(const OperateSequenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateSequenceResponse::IsInitialized() const {
  
  return true;
}

void OperateSequenceResponse::Swap(OperateSequenceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OperateSequenceResponse::GetTypeName() const {
  return "message.OperateSequenceResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
