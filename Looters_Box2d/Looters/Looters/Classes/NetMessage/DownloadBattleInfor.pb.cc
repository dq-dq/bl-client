// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownloadBattleInfor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_DownloadBattleInfor_2eproto() {
  delete DownloadBattleInforRequest::default_instance_;
  delete DownloadBattleInforResponse::default_instance_;
  delete DownloadBattleInforResponse_BattleInfor::default_instance_;
  delete DownloadBattleInforResponse_BattleInfor_AttackerUsed::default_instance_;
}

void protobuf_AddDesc_DownloadBattleInfor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  DownloadBattleInforRequest::default_instance_ = new DownloadBattleInforRequest();
  DownloadBattleInforResponse::default_instance_ = new DownloadBattleInforResponse();
  DownloadBattleInforResponse_BattleInfor::default_instance_ = new DownloadBattleInforResponse_BattleInfor();
  DownloadBattleInforResponse_BattleInfor_AttackerUsed::default_instance_ = new DownloadBattleInforResponse_BattleInfor_AttackerUsed();
  DownloadBattleInforRequest::default_instance_->InitAsDefaultInstance();
  DownloadBattleInforResponse::default_instance_->InitAsDefaultInstance();
  DownloadBattleInforResponse_BattleInfor::default_instance_->InitAsDefaultInstance();
  DownloadBattleInforResponse_BattleInfor_AttackerUsed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownloadBattleInfor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownloadBattleInfor_2eproto {
  StaticDescriptorInitializer_DownloadBattleInfor_2eproto() {
    protobuf_AddDesc_DownloadBattleInfor_2eproto();
  }
} static_descriptor_initializer_DownloadBattleInfor_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DownloadBattleInforRequest::kMailAddressFieldNumber;
const int DownloadBattleInforRequest::kBattleCouontFieldNumber;
#endif  // !_MSC_VER

DownloadBattleInforRequest::DownloadBattleInforRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadBattleInforRequest::InitAsDefaultInstance() {
}

DownloadBattleInforRequest::DownloadBattleInforRequest(const DownloadBattleInforRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadBattleInforRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlecouont_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadBattleInforRequest::~DownloadBattleInforRequest() {
  SharedDtor();
}

void DownloadBattleInforRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (battlecouont_ != &::google::protobuf::internal::kEmptyString) {
    delete battlecouont_;
  }
  if (this != default_instance_) {
  }
}

void DownloadBattleInforRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadBattleInforRequest& DownloadBattleInforRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadBattleInfor_2eproto();  return *default_instance_;
}

DownloadBattleInforRequest* DownloadBattleInforRequest::default_instance_ = NULL;

DownloadBattleInforRequest* DownloadBattleInforRequest::New() const {
  return new DownloadBattleInforRequest;
}

void DownloadBattleInforRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    if (has_battlecouont()) {
      if (battlecouont_ != &::google::protobuf::internal::kEmptyString) {
        battlecouont_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadBattleInforRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleCouont;
        break;
      }
      
      // optional string battleCouont = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleCouont:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlecouont()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadBattleInforRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // optional string battleCouont = 2;
  if (has_battlecouont()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->battlecouont(), output);
  }
  
}

int DownloadBattleInforRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // optional string battleCouont = 2;
    if (has_battlecouont()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlecouont());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadBattleInforRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadBattleInforRequest*>(&from));
}

void DownloadBattleInforRequest::MergeFrom(const DownloadBattleInforRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_battlecouont()) {
      set_battlecouont(from.battlecouont());
    }
  }
}

void DownloadBattleInforRequest::CopyFrom(const DownloadBattleInforRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadBattleInforRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DownloadBattleInforRequest::Swap(DownloadBattleInforRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(battlecouont_, other->battlecouont_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadBattleInforRequest::GetTypeName() const {
  return "message.DownloadBattleInforRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadBattleInforResponse_BattleInfor_AttackerUsed::kUsedIdFieldNumber;
const int DownloadBattleInforResponse_BattleInfor_AttackerUsed::kUsedCountFieldNumber;
const int DownloadBattleInforResponse_BattleInfor_AttackerUsed::kUsedTypeFieldNumber;
const int DownloadBattleInforResponse_BattleInfor_AttackerUsed::kCharacterCountFieldNumber;
#endif  // !_MSC_VER

DownloadBattleInforResponse_BattleInfor_AttackerUsed::DownloadBattleInforResponse_BattleInfor_AttackerUsed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::InitAsDefaultInstance() {
}

DownloadBattleInforResponse_BattleInfor_AttackerUsed::DownloadBattleInforResponse_BattleInfor_AttackerUsed(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::SharedCtor() {
  _cached_size_ = 0;
  used_id_ = 0;
  used_count_ = 0;
  used_type_ = 0;
  character_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadBattleInforResponse_BattleInfor_AttackerUsed::~DownloadBattleInforResponse_BattleInfor_AttackerUsed() {
  SharedDtor();
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadBattleInforResponse_BattleInfor_AttackerUsed& DownloadBattleInforResponse_BattleInfor_AttackerUsed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadBattleInfor_2eproto();  return *default_instance_;
}

DownloadBattleInforResponse_BattleInfor_AttackerUsed* DownloadBattleInforResponse_BattleInfor_AttackerUsed::default_instance_ = NULL;

DownloadBattleInforResponse_BattleInfor_AttackerUsed* DownloadBattleInforResponse_BattleInfor_AttackerUsed::New() const {
  return new DownloadBattleInforResponse_BattleInfor_AttackerUsed;
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    used_id_ = 0;
    used_count_ = 0;
    used_type_ = 0;
    character_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 used_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_id_)));
          set_has_used_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_count;
        break;
      }
      
      // optional int32 used_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_count_)));
          set_has_used_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_type;
        break;
      }
      
      // optional int32 used_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_type_)));
          set_has_used_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_character_count;
        break;
      }
      
      // optional int32 character_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_count_)));
          set_has_character_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 used_id = 1;
  if (has_used_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->used_id(), output);
  }
  
  // optional int32 used_count = 2;
  if (has_used_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_count(), output);
  }
  
  // optional int32 used_type = 3;
  if (has_used_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->used_type(), output);
  }
  
  // optional int32 character_count = 4;
  if (has_character_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->character_count(), output);
  }
  
}

int DownloadBattleInforResponse_BattleInfor_AttackerUsed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 used_id = 1;
    if (has_used_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_id());
    }
    
    // optional int32 used_count = 2;
    if (has_used_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_count());
    }
    
    // optional int32 used_type = 3;
    if (has_used_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_type());
    }
    
    // optional int32 character_count = 4;
    if (has_character_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadBattleInforResponse_BattleInfor_AttackerUsed*>(&from));
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::MergeFrom(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_used_id()) {
      set_used_id(from.used_id());
    }
    if (from.has_used_count()) {
      set_used_count(from.used_count());
    }
    if (from.has_used_type()) {
      set_used_type(from.used_type());
    }
    if (from.has_character_count()) {
      set_character_count(from.character_count());
    }
  }
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::CopyFrom(const DownloadBattleInforResponse_BattleInfor_AttackerUsed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadBattleInforResponse_BattleInfor_AttackerUsed::IsInitialized() const {
  
  return true;
}

void DownloadBattleInforResponse_BattleInfor_AttackerUsed::Swap(DownloadBattleInforResponse_BattleInfor_AttackerUsed* other) {
  if (other != this) {
    std::swap(used_id_, other->used_id_);
    std::swap(used_count_, other->used_count_);
    std::swap(used_type_, other->used_type_);
    std::swap(character_count_, other->character_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadBattleInforResponse_BattleInfor_AttackerUsed::GetTypeName() const {
  return "message.DownloadBattleInforResponse.BattleInfor.AttackerUsed";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadBattleInforResponse_BattleInfor::kAttackerLevelFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kAttackerNickNameFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kAttackerGetGoldenCountFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kAttackerGetElixirCountFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kAttackTimeFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kDefencerGetPvpMarkFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kClansNameFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kClansImageNameFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kAttackerUsedListFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kReplyFileNameFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kBowieIdFieldNumber;
const int DownloadBattleInforResponse_BattleInfor::kStarCountFieldNumber;
#endif  // !_MSC_VER

DownloadBattleInforResponse_BattleInfor::DownloadBattleInforResponse_BattleInfor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadBattleInforResponse_BattleInfor::InitAsDefaultInstance() {
}

DownloadBattleInforResponse_BattleInfor::DownloadBattleInforResponse_BattleInfor(const DownloadBattleInforResponse_BattleInfor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadBattleInforResponse_BattleInfor::SharedCtor() {
  _cached_size_ = 0;
  attacker_level_ = 0;
  attacker_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_get_golden_count_ = 0;
  attacker_get_elixir_count_ = 0;
  attack_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defencer_get_pvp_mark_ = 0;
  clans_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clans_image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replyfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bowie_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  star_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadBattleInforResponse_BattleInfor::~DownloadBattleInforResponse_BattleInfor() {
  SharedDtor();
}

void DownloadBattleInforResponse_BattleInfor::SharedDtor() {
  if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_nick_name_;
  }
  if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
    delete attack_time_;
  }
  if (clans_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clans_name_;
  }
  if (clans_image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clans_image_name_;
  }
  if (replyfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete replyfilename_;
  }
  if (bowie_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bowie_id_;
  }
  if (this != default_instance_) {
  }
}

void DownloadBattleInforResponse_BattleInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadBattleInforResponse_BattleInfor& DownloadBattleInforResponse_BattleInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadBattleInfor_2eproto();  return *default_instance_;
}

DownloadBattleInforResponse_BattleInfor* DownloadBattleInforResponse_BattleInfor::default_instance_ = NULL;

DownloadBattleInforResponse_BattleInfor* DownloadBattleInforResponse_BattleInfor::New() const {
  return new DownloadBattleInforResponse_BattleInfor;
}

void DownloadBattleInforResponse_BattleInfor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_level_ = 0;
    if (has_attacker_nick_name()) {
      if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_nick_name_->clear();
      }
    }
    attacker_get_golden_count_ = 0;
    attacker_get_elixir_count_ = 0;
    if (has_attack_time()) {
      if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
        attack_time_->clear();
      }
    }
    defencer_get_pvp_mark_ = 0;
    if (has_clans_name()) {
      if (clans_name_ != &::google::protobuf::internal::kEmptyString) {
        clans_name_->clear();
      }
    }
    if (has_clans_image_name()) {
      if (clans_image_name_ != &::google::protobuf::internal::kEmptyString) {
        clans_image_name_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_replyfilename()) {
      if (replyfilename_ != &::google::protobuf::internal::kEmptyString) {
        replyfilename_->clear();
      }
    }
    if (has_bowie_id()) {
      if (bowie_id_ != &::google::protobuf::internal::kEmptyString) {
        bowie_id_->clear();
      }
    }
    star_count_ = 0;
  }
  attackerusedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadBattleInforResponse_BattleInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attacker_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_level_)));
          set_has_attacker_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attacker_nick_name;
        break;
      }
      
      // optional string attacker_nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attacker_get_golden_count;
        break;
      }
      
      // optional int32 attacker_get_golden_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_get_golden_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_get_golden_count_)));
          set_has_attacker_get_golden_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attacker_get_elixir_count;
        break;
      }
      
      // optional int32 attacker_get_elixir_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_get_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_get_elixir_count_)));
          set_has_attacker_get_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attack_time;
        break;
      }
      
      // optional string attack_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attack_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defencer_get_pvp_mark;
        break;
      }
      
      // optional sint32 defencer_get_pvp_mark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defencer_get_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defencer_get_pvp_mark_)));
          set_has_defencer_get_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clans_name;
        break;
      }
      
      // optional string clans_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clans_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clans_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_clans_image_name;
        break;
      }
      
      // optional string clans_image_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clans_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clans_image_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attackerUsedList;
        break;
      }
      
      // repeated .message.DownloadBattleInforResponse.BattleInfor.AttackerUsed attackerUsedList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackerUsedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackerusedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attackerUsedList;
        if (input->ExpectTag(82)) goto parse_replyFileName;
        break;
      }
      
      // optional string replyFileName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replyFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replyfilename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bowie_id;
        break;
      }
      
      // optional string bowie_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bowie_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bowie_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_star_count;
        break;
      }
      
      // optional int32 star_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_count_)));
          set_has_star_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadBattleInforResponse_BattleInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attacker_level = 1;
  if (has_attacker_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attacker_level(), output);
  }
  
  // optional string attacker_nick_name = 2;
  if (has_attacker_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attacker_nick_name(), output);
  }
  
  // optional int32 attacker_get_golden_count = 3;
  if (has_attacker_get_golden_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attacker_get_golden_count(), output);
  }
  
  // optional int32 attacker_get_elixir_count = 4;
  if (has_attacker_get_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attacker_get_elixir_count(), output);
  }
  
  // optional string attack_time = 5;
  if (has_attack_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attack_time(), output);
  }
  
  // optional sint32 defencer_get_pvp_mark = 6;
  if (has_defencer_get_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->defencer_get_pvp_mark(), output);
  }
  
  // optional string clans_name = 7;
  if (has_clans_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clans_name(), output);
  }
  
  // optional string clans_image_name = 8;
  if (has_clans_image_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->clans_image_name(), output);
  }
  
  // repeated .message.DownloadBattleInforResponse.BattleInfor.AttackerUsed attackerUsedList = 9;
  for (int i = 0; i < this->attackerusedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->attackerusedlist(i), output);
  }
  
  // optional string replyFileName = 10;
  if (has_replyfilename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->replyfilename(), output);
  }
  
  // optional string bowie_id = 11;
  if (has_bowie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bowie_id(), output);
  }
  
  // optional int32 star_count = 12;
  if (has_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->star_count(), output);
  }
  
}

int DownloadBattleInforResponse_BattleInfor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attacker_level = 1;
    if (has_attacker_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_level());
    }
    
    // optional string attacker_nick_name = 2;
    if (has_attacker_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_nick_name());
    }
    
    // optional int32 attacker_get_golden_count = 3;
    if (has_attacker_get_golden_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_get_golden_count());
    }
    
    // optional int32 attacker_get_elixir_count = 4;
    if (has_attacker_get_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_get_elixir_count());
    }
    
    // optional string attack_time = 5;
    if (has_attack_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attack_time());
    }
    
    // optional sint32 defencer_get_pvp_mark = 6;
    if (has_defencer_get_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defencer_get_pvp_mark());
    }
    
    // optional string clans_name = 7;
    if (has_clans_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clans_name());
    }
    
    // optional string clans_image_name = 8;
    if (has_clans_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clans_image_name());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string replyFileName = 10;
    if (has_replyfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replyfilename());
    }
    
    // optional string bowie_id = 11;
    if (has_bowie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bowie_id());
    }
    
    // optional int32 star_count = 12;
    if (has_star_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_count());
    }
    
  }
  // repeated .message.DownloadBattleInforResponse.BattleInfor.AttackerUsed attackerUsedList = 9;
  total_size += 1 * this->attackerusedlist_size();
  for (int i = 0; i < this->attackerusedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackerusedlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadBattleInforResponse_BattleInfor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadBattleInforResponse_BattleInfor*>(&from));
}

void DownloadBattleInforResponse_BattleInfor::MergeFrom(const DownloadBattleInforResponse_BattleInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackerusedlist_.MergeFrom(from.attackerusedlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_level()) {
      set_attacker_level(from.attacker_level());
    }
    if (from.has_attacker_nick_name()) {
      set_attacker_nick_name(from.attacker_nick_name());
    }
    if (from.has_attacker_get_golden_count()) {
      set_attacker_get_golden_count(from.attacker_get_golden_count());
    }
    if (from.has_attacker_get_elixir_count()) {
      set_attacker_get_elixir_count(from.attacker_get_elixir_count());
    }
    if (from.has_attack_time()) {
      set_attack_time(from.attack_time());
    }
    if (from.has_defencer_get_pvp_mark()) {
      set_defencer_get_pvp_mark(from.defencer_get_pvp_mark());
    }
    if (from.has_clans_name()) {
      set_clans_name(from.clans_name());
    }
    if (from.has_clans_image_name()) {
      set_clans_image_name(from.clans_image_name());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_replyfilename()) {
      set_replyfilename(from.replyfilename());
    }
    if (from.has_bowie_id()) {
      set_bowie_id(from.bowie_id());
    }
    if (from.has_star_count()) {
      set_star_count(from.star_count());
    }
  }
}

void DownloadBattleInforResponse_BattleInfor::CopyFrom(const DownloadBattleInforResponse_BattleInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadBattleInforResponse_BattleInfor::IsInitialized() const {
  
  return true;
}

void DownloadBattleInforResponse_BattleInfor::Swap(DownloadBattleInforResponse_BattleInfor* other) {
  if (other != this) {
    std::swap(attacker_level_, other->attacker_level_);
    std::swap(attacker_nick_name_, other->attacker_nick_name_);
    std::swap(attacker_get_golden_count_, other->attacker_get_golden_count_);
    std::swap(attacker_get_elixir_count_, other->attacker_get_elixir_count_);
    std::swap(attack_time_, other->attack_time_);
    std::swap(defencer_get_pvp_mark_, other->defencer_get_pvp_mark_);
    std::swap(clans_name_, other->clans_name_);
    std::swap(clans_image_name_, other->clans_image_name_);
    attackerusedlist_.Swap(&other->attackerusedlist_);
    std::swap(replyfilename_, other->replyfilename_);
    std::swap(bowie_id_, other->bowie_id_);
    std::swap(star_count_, other->star_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadBattleInforResponse_BattleInfor::GetTypeName() const {
  return "message.DownloadBattleInforResponse.BattleInfor";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadBattleInforResponse::kResultFieldNumber;
const int DownloadBattleInforResponse::kInfoFieldNumber;
const int DownloadBattleInforResponse::kBattleInforListFieldNumber;
#endif  // !_MSC_VER

DownloadBattleInforResponse::DownloadBattleInforResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadBattleInforResponse::InitAsDefaultInstance() {
}

DownloadBattleInforResponse::DownloadBattleInforResponse(const DownloadBattleInforResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadBattleInforResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadBattleInforResponse::~DownloadBattleInforResponse() {
  SharedDtor();
}

void DownloadBattleInforResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void DownloadBattleInforResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadBattleInforResponse& DownloadBattleInforResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadBattleInfor_2eproto();  return *default_instance_;
}

DownloadBattleInforResponse* DownloadBattleInforResponse::default_instance_ = NULL;

DownloadBattleInforResponse* DownloadBattleInforResponse::New() const {
  return new DownloadBattleInforResponse;
}

void DownloadBattleInforResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  battleinforlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadBattleInforResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleInforList;
        break;
      }
      
      // repeated .message.DownloadBattleInforResponse.BattleInfor battleInforList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleInforList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleinforlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleInforList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadBattleInforResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // repeated .message.DownloadBattleInforResponse.BattleInfor battleInforList = 3;
  for (int i = 0; i < this->battleinforlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->battleinforlist(i), output);
  }
  
}

int DownloadBattleInforResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  // repeated .message.DownloadBattleInforResponse.BattleInfor battleInforList = 3;
  total_size += 1 * this->battleinforlist_size();
  for (int i = 0; i < this->battleinforlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleinforlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadBattleInforResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadBattleInforResponse*>(&from));
}

void DownloadBattleInforResponse::MergeFrom(const DownloadBattleInforResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleinforlist_.MergeFrom(from.battleinforlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void DownloadBattleInforResponse::CopyFrom(const DownloadBattleInforResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadBattleInforResponse::IsInitialized() const {
  
  return true;
}

void DownloadBattleInforResponse::Swap(DownloadBattleInforResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    battleinforlist_.Swap(&other->battleinforlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadBattleInforResponse::GetTypeName() const {
  return "message.DownloadBattleInforResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
