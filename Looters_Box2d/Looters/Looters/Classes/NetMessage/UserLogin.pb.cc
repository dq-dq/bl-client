// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UserLogin_2eproto() {
  delete UserLoginRequest::default_instance_;
  delete UserLoginResponse::default_instance_;
  delete UserLoginResponse_AreaData::default_instance_;
}

void protobuf_AddDesc_UserLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UserLoginRequest::default_instance_ = new UserLoginRequest();
  UserLoginResponse::default_instance_ = new UserLoginResponse();
  UserLoginResponse_AreaData::default_instance_ = new UserLoginResponse_AreaData();
  UserLoginRequest::default_instance_->InitAsDefaultInstance();
  UserLoginResponse::default_instance_->InitAsDefaultInstance();
  UserLoginResponse_AreaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserLogin_2eproto {
  StaticDescriptorInitializer_UserLogin_2eproto() {
    protobuf_AddDesc_UserLogin_2eproto();
  }
} static_descriptor_initializer_UserLogin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserLoginRequest::kMailAddressFieldNumber;
const int UserLoginRequest::kLanguageFieldNumber;
const int UserLoginRequest::kVersionFieldNumber;
const int UserLoginRequest::kMachineNumFieldNumber;
const int UserLoginRequest::kInstanceIdFieldNumber;
const int UserLoginRequest::kAreaIdFieldNumber;
const int UserLoginRequest::kLoginIdFieldNumber;
const int UserLoginRequest::kThirdPartyTypeFieldNumber;
const int UserLoginRequest::kLoginTypeFieldNumber;
const int UserLoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

UserLoginRequest::UserLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginRequest::InitAsDefaultInstance() {
}

UserLoginRequest::UserLoginRequest(const UserLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machinenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_id_ = 0;
  area_id_ = 0;
  loginid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  third_party_type_ = 0;
  login_type_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRequest::~UserLoginRequest() {
  SharedDtor();
}

void UserLoginRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (machinenum_ != &::google::protobuf::internal::kEmptyString) {
    delete machinenum_;
  }
  if (loginid_ != &::google::protobuf::internal::kEmptyString) {
    delete loginid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginRequest& UserLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();  return *default_instance_;
}

UserLoginRequest* UserLoginRequest::default_instance_ = NULL;

UserLoginRequest* UserLoginRequest::New() const {
  return new UserLoginRequest;
}

void UserLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_machinenum()) {
      if (machinenum_ != &::google::protobuf::internal::kEmptyString) {
        machinenum_->clear();
      }
    }
    instance_id_ = 0;
    area_id_ = 0;
    if (has_loginid()) {
      if (loginid_ != &::google::protobuf::internal::kEmptyString) {
        loginid_->clear();
      }
    }
    third_party_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    login_type_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }
      
      // required string language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // required string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_machineNum;
        break;
      }
      
      // optional string machineNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinenum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_instance_id;
        break;
      }
      
      // optional int32 instance_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_area_id;
        break;
      }
      
      // optional int32 area_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_loginId;
        break;
      }
      
      // optional string loginId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_third_party_type;
        break;
      }
      
      // optional int32 third_party_type = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_third_party_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &third_party_type_)));
          set_has_third_party_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_login_type;
        break;
      }
      
      // optional int32 login_type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_password;
        break;
      }
      
      // optional string password = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // required string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }
  
  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  // optional string machineNum = 4;
  if (has_machinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->machinenum(), output);
  }
  
  // optional int32 instance_id = 5;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instance_id(), output);
  }
  
  // optional int32 area_id = 6;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->area_id(), output);
  }
  
  // optional string loginId = 7;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->loginid(), output);
  }
  
  // optional int32 third_party_type = 8 [default = 0];
  if (has_third_party_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->third_party_type(), output);
  }
  
  // optional int32 login_type = 9 [default = 0];
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->login_type(), output);
  }
  
  // optional string password = 10;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->password(), output);
  }
  
}

int UserLoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // required string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string machineNum = 4;
    if (has_machinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machinenum());
    }
    
    // optional int32 instance_id = 5;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 area_id = 6;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }
    
    // optional string loginId = 7;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginid());
    }
    
    // optional int32 third_party_type = 8 [default = 0];
    if (has_third_party_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->third_party_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 login_type = 9 [default = 0];
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_type());
    }
    
    // optional string password = 10;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginRequest*>(&from));
}

void UserLoginRequest::MergeFrom(const UserLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_machinenum()) {
      set_machinenum(from.machinenum());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_third_party_type()) {
      set_third_party_type(from.third_party_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void UserLoginRequest::CopyFrom(const UserLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UserLoginRequest::Swap(UserLoginRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(language_, other->language_);
    std::swap(version_, other->version_);
    std::swap(machinenum_, other->machinenum_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(loginid_, other->loginid_);
    std::swap(third_party_type_, other->third_party_type_);
    std::swap(login_type_, other->login_type_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginRequest::GetTypeName() const {
  return "message.UserLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginResponse_AreaData::kAreaIdFieldNumber;
const int UserLoginResponse_AreaData::kAreaNameFieldNumber;
#endif  // !_MSC_VER

UserLoginResponse_AreaData::UserLoginResponse_AreaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginResponse_AreaData::InitAsDefaultInstance() {
}

UserLoginResponse_AreaData::UserLoginResponse_AreaData(const UserLoginResponse_AreaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginResponse_AreaData::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginResponse_AreaData::~UserLoginResponse_AreaData() {
  SharedDtor();
}

void UserLoginResponse_AreaData::SharedDtor() {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginResponse_AreaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginResponse_AreaData& UserLoginResponse_AreaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();  return *default_instance_;
}

UserLoginResponse_AreaData* UserLoginResponse_AreaData::default_instance_ = NULL;

UserLoginResponse_AreaData* UserLoginResponse_AreaData::New() const {
  return new UserLoginResponse_AreaData;
}

void UserLoginResponse_AreaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginResponse_AreaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_name;
        break;
      }
      
      // optional string area_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginResponse_AreaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }
  
  // optional string area_name = 2;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->area_name(), output);
  }
  
}

int UserLoginResponse_AreaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }
    
    // optional string area_name = 2;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginResponse_AreaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginResponse_AreaData*>(&from));
}

void UserLoginResponse_AreaData::MergeFrom(const UserLoginResponse_AreaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
  }
}

void UserLoginResponse_AreaData::CopyFrom(const UserLoginResponse_AreaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginResponse_AreaData::IsInitialized() const {
  
  return true;
}

void UserLoginResponse_AreaData::Swap(UserLoginResponse_AreaData* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(area_name_, other->area_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginResponse_AreaData::GetTypeName() const {
  return "message.UserLoginResponse.AreaData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserLoginResponse::kResultFieldNumber;
const int UserLoginResponse::kInfoFieldNumber;
const int UserLoginResponse::kGameServerAddressFieldNumber;
const int UserLoginResponse::kVerifyCodeFieldNumber;
const int UserLoginResponse::kVersionFieldNumber;
const int UserLoginResponse::kUpdateAbleFieldNumber;
const int UserLoginResponse::kFileServerAddressFieldNumber;
const int UserLoginResponse::kInstanceIdFieldNumber;
const int UserLoginResponse::kTempMailAddressFieldNumber;
const int UserLoginResponse::kAreaIdFieldNumber;
const int UserLoginResponse::kBankServerFieldNumber;
const int UserLoginResponse::kAreaNameFieldNumber;
const int UserLoginResponse::kAreaDataListFieldNumber;
#endif  // !_MSC_VER

UserLoginResponse::UserLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginResponse::InitAsDefaultInstance() {
}

UserLoginResponse::UserLoginResponse(const UserLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserveraddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifycode_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updateable_ = 0;
  fileserveraddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_id_ = 0;
  tempmailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0;
  bankserver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginResponse::~UserLoginResponse() {
  SharedDtor();
}

void UserLoginResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (gameserveraddress_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserveraddress_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (fileserveraddress_ != &::google::protobuf::internal::kEmptyString) {
    delete fileserveraddress_;
  }
  if (tempmailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete tempmailaddress_;
  }
  if (bankserver_ != &::google::protobuf::internal::kEmptyString) {
    delete bankserver_;
  }
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginResponse& UserLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();  return *default_instance_;
}

UserLoginResponse* UserLoginResponse::default_instance_ = NULL;

UserLoginResponse* UserLoginResponse::New() const {
  return new UserLoginResponse;
}

void UserLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_gameserveraddress()) {
      if (gameserveraddress_ != &::google::protobuf::internal::kEmptyString) {
        gameserveraddress_->clear();
      }
    }
    verifycode_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    updateable_ = 0;
    if (has_fileserveraddress()) {
      if (fileserveraddress_ != &::google::protobuf::internal::kEmptyString) {
        fileserveraddress_->clear();
      }
    }
    instance_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tempmailaddress()) {
      if (tempmailaddress_ != &::google::protobuf::internal::kEmptyString) {
        tempmailaddress_->clear();
      }
    }
    area_id_ = 0;
    if (has_bankserver()) {
      if (bankserver_ != &::google::protobuf::internal::kEmptyString) {
        bankserver_->clear();
      }
    }
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
  }
  areadatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameServerAddress;
        break;
      }
      
      // optional string gameServerAddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameServerAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserveraddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_verifyCode;
        break;
      }
      
      // optional uint64 verifyCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verifyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &verifycode_)));
          set_has_verifycode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_updateAble;
        break;
      }
      
      // optional int32 updateAble = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateable_)));
          set_has_updateable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fileServerAddress;
        break;
      }
      
      // optional string fileServerAddress = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileServerAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileserveraddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_instance_id;
        break;
      }
      
      // optional int32 instance_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tempMailAddress;
        break;
      }
      
      // optional string tempMailAddress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tempMailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tempmailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_area_id;
        break;
      }
      
      // optional int32 area_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bankServer;
        break;
      }
      
      // optional string bankServer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_area_name;
        break;
      }
      
      // optional string area_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_areaDataList;
        break;
      }
      
      // repeated .message.UserLoginResponse.AreaData areaDataList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areadatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_areaDataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // optional string gameServerAddress = 3;
  if (has_gameserveraddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameserveraddress(), output);
  }
  
  // optional uint64 verifyCode = 4;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->verifycode(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  // optional int32 updateAble = 6;
  if (has_updateable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->updateable(), output);
  }
  
  // optional string fileServerAddress = 7;
  if (has_fileserveraddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->fileserveraddress(), output);
  }
  
  // optional int32 instance_id = 8;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->instance_id(), output);
  }
  
  // optional string tempMailAddress = 9;
  if (has_tempmailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tempmailaddress(), output);
  }
  
  // optional int32 area_id = 10;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->area_id(), output);
  }
  
  // optional string bankServer = 11;
  if (has_bankserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bankserver(), output);
  }
  
  // optional string area_name = 12;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->area_name(), output);
  }
  
  // repeated .message.UserLoginResponse.AreaData areaDataList = 13;
  for (int i = 0; i < this->areadatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->areadatalist(i), output);
  }
  
}

int UserLoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // optional string gameServerAddress = 3;
    if (has_gameserveraddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserveraddress());
    }
    
    // optional uint64 verifyCode = 4;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->verifycode());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional int32 updateAble = 6;
    if (has_updateable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateable());
    }
    
    // optional string fileServerAddress = 7;
    if (has_fileserveraddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileserveraddress());
    }
    
    // optional int32 instance_id = 8;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string tempMailAddress = 9;
    if (has_tempmailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tempmailaddress());
    }
    
    // optional int32 area_id = 10;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }
    
    // optional string bankServer = 11;
    if (has_bankserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankserver());
    }
    
    // optional string area_name = 12;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }
    
  }
  // repeated .message.UserLoginResponse.AreaData areaDataList = 13;
  total_size += 1 * this->areadatalist_size();
  for (int i = 0; i < this->areadatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areadatalist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginResponse*>(&from));
}

void UserLoginResponse::MergeFrom(const UserLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  areadatalist_.MergeFrom(from.areadatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_gameserveraddress()) {
      set_gameserveraddress(from.gameserveraddress());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_updateable()) {
      set_updateable(from.updateable());
    }
    if (from.has_fileserveraddress()) {
      set_fileserveraddress(from.fileserveraddress());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tempmailaddress()) {
      set_tempmailaddress(from.tempmailaddress());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_bankserver()) {
      set_bankserver(from.bankserver());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
  }
}

void UserLoginResponse::CopyFrom(const UserLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginResponse::IsInitialized() const {
  
  return true;
}

void UserLoginResponse::Swap(UserLoginResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(gameserveraddress_, other->gameserveraddress_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(version_, other->version_);
    std::swap(updateable_, other->updateable_);
    std::swap(fileserveraddress_, other->fileserveraddress_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(tempmailaddress_, other->tempmailaddress_);
    std::swap(area_id_, other->area_id_);
    std::swap(bankserver_, other->bankserver_);
    std::swap(area_name_, other->area_name_);
    areadatalist_.Swap(&other->areadatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginResponse::GetTypeName() const {
  return "message.UserLoginResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
