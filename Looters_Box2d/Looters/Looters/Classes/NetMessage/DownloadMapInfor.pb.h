// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadMapInfor.proto

#ifndef PROTOBUF_DownloadMapInfor_2eproto__INCLUDED
#define PROTOBUF_DownloadMapInfor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DownloadMapInfor_2eproto();
void protobuf_AssignDesc_DownloadMapInfor_2eproto();
void protobuf_ShutdownFile_DownloadMapInfor_2eproto();

class DownloadMapInforRequest;
class DownloadMapInforResponse;
class DownloadMapInforResponse_UserMapData;
class DownloadMapInforResponse_UserMapData_HousingOrClans;
class DownloadMapInforResponse_UserMapData_BarrackOrLib;
class DownloadMapInforResponse_UserCharacter;
class DownloadMapInforResponse_Spell;
class DownloadMapInforResponse_BattleInfor;
class DownloadMapInforResponse_BuildDestoryStatus;

// ===================================================================

class DownloadMapInforRequest : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforRequest();
  virtual ~DownloadMapInforRequest();
  
  DownloadMapInforRequest(const DownloadMapInforRequest& from);
  
  inline DownloadMapInforRequest& operator=(const DownloadMapInforRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforRequest& default_instance();
  
  void Swap(DownloadMapInforRequest* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforRequest& from);
  void MergeFrom(const DownloadMapInforRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string mailAddress = 1;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 1;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforRequest)
 private:
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  
  ::std::string* mailaddress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforRequest* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_UserMapData_HousingOrClans : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_UserMapData_HousingOrClans();
  virtual ~DownloadMapInforResponse_UserMapData_HousingOrClans();
  
  DownloadMapInforResponse_UserMapData_HousingOrClans(const DownloadMapInforResponse_UserMapData_HousingOrClans& from);
  
  inline DownloadMapInforResponse_UserMapData_HousingOrClans& operator=(const DownloadMapInforResponse_UserMapData_HousingOrClans& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_UserMapData_HousingOrClans& default_instance();
  
  void Swap(DownloadMapInforResponse_UserMapData_HousingOrClans* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_UserMapData_HousingOrClans* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_UserMapData_HousingOrClans& from);
  void MergeFrom(const DownloadMapInforResponse_UserMapData_HousingOrClans& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 character_id = 1;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 1;
  inline ::google::protobuf::int32 character_id() const;
  inline void set_character_id(::google::protobuf::int32 value);
  
  // optional int32 character_level = 2;
  inline bool has_character_level() const;
  inline void clear_character_level();
  static const int kCharacterLevelFieldNumber = 2;
  inline ::google::protobuf::int32 character_level() const;
  inline void set_character_level(::google::protobuf::int32 value);
  
  // optional int32 finished_produce_count = 3;
  inline bool has_finished_produce_count() const;
  inline void clear_finished_produce_count();
  static const int kFinishedProduceCountFieldNumber = 3;
  inline ::google::protobuf::int32 finished_produce_count() const;
  inline void set_finished_produce_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.UserMapData.HousingOrClans)
 private:
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_character_level();
  inline void clear_has_character_level();
  inline void set_has_finished_produce_count();
  inline void clear_has_finished_produce_count();
  
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 character_level_;
  ::google::protobuf::int32 finished_produce_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_UserMapData_HousingOrClans* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_UserMapData_BarrackOrLib : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_UserMapData_BarrackOrLib();
  virtual ~DownloadMapInforResponse_UserMapData_BarrackOrLib();
  
  DownloadMapInforResponse_UserMapData_BarrackOrLib(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from);
  
  inline DownloadMapInforResponse_UserMapData_BarrackOrLib& operator=(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_UserMapData_BarrackOrLib& default_instance();
  
  void Swap(DownloadMapInforResponse_UserMapData_BarrackOrLib* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_UserMapData_BarrackOrLib* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from);
  void MergeFrom(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 character_id = 1;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 1;
  inline ::google::protobuf::int32 character_id() const;
  inline void set_character_id(::google::protobuf::int32 value);
  
  // optional int32 character_level = 2;
  inline bool has_character_level() const;
  inline void clear_character_level();
  static const int kCharacterLevelFieldNumber = 2;
  inline ::google::protobuf::int32 character_level() const;
  inline void set_character_level(::google::protobuf::int32 value);
  
  // optional string end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const char* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  
  // optional int32 produce_count = 4;
  inline bool has_produce_count() const;
  inline void clear_produce_count();
  static const int kProduceCountFieldNumber = 4;
  inline ::google::protobuf::int32 produce_count() const;
  inline void set_produce_count(::google::protobuf::int32 value);
  
  // optional int32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.UserMapData.BarrackOrLib)
 private:
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_character_level();
  inline void clear_has_character_level();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_produce_count();
  inline void clear_has_produce_count();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 character_level_;
  ::std::string* end_time_;
  ::google::protobuf::int32 produce_count_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_UserMapData_BarrackOrLib* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_UserMapData : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_UserMapData();
  virtual ~DownloadMapInforResponse_UserMapData();
  
  DownloadMapInforResponse_UserMapData(const DownloadMapInforResponse_UserMapData& from);
  
  inline DownloadMapInforResponse_UserMapData& operator=(const DownloadMapInforResponse_UserMapData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_UserMapData& default_instance();
  
  void Swap(DownloadMapInforResponse_UserMapData* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_UserMapData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_UserMapData& from);
  void MergeFrom(const DownloadMapInforResponse_UserMapData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DownloadMapInforResponse_UserMapData_HousingOrClans HousingOrClans;
  typedef DownloadMapInforResponse_UserMapData_BarrackOrLib BarrackOrLib;
  
  // accessors -------------------------------------------------------
  
  // optional int32 map_index_x = 1;
  inline bool has_map_index_x() const;
  inline void clear_map_index_x();
  static const int kMapIndexXFieldNumber = 1;
  inline ::google::protobuf::int32 map_index_x() const;
  inline void set_map_index_x(::google::protobuf::int32 value);
  
  // optional int32 uniqueness_build_id = 2;
  inline bool has_uniqueness_build_id() const;
  inline void clear_uniqueness_build_id();
  static const int kUniquenessBuildIdFieldNumber = 2;
  inline ::google::protobuf::int32 uniqueness_build_id() const;
  inline void set_uniqueness_build_id(::google::protobuf::int32 value);
  
  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 building_id = 4;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 4;
  inline ::google::protobuf::int32 building_id() const;
  inline void set_building_id(::google::protobuf::int32 value);
  
  // optional int32 Building_level = 5;
  inline bool has_building_level() const;
  inline void clear_building_level();
  static const int kBuildingLevelFieldNumber = 5;
  inline ::google::protobuf::int32 building_level() const;
  inline void set_building_level(::google::protobuf::int32 value);
  
  // optional int32 map_index_y = 6;
  inline bool has_map_index_y() const;
  inline void clear_map_index_y();
  static const int kMapIndexYFieldNumber = 6;
  inline ::google::protobuf::int32 map_index_y() const;
  inline void set_map_index_y(::google::protobuf::int32 value);
  
  // repeated .message.DownloadMapInforResponse.UserMapData.HousingOrClans housingOrClansList = 7;
  inline int housingorclanslist_size() const;
  inline void clear_housingorclanslist();
  static const int kHousingOrClansListFieldNumber = 7;
  inline const ::message::DownloadMapInforResponse_UserMapData_HousingOrClans& housingorclanslist(int index) const;
  inline ::message::DownloadMapInforResponse_UserMapData_HousingOrClans* mutable_housingorclanslist(int index);
  inline ::message::DownloadMapInforResponse_UserMapData_HousingOrClans* add_housingorclanslist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_HousingOrClans >&
      housingorclanslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_HousingOrClans >*
      mutable_housingorclanslist();
  
  // repeated .message.DownloadMapInforResponse.UserMapData.BarrackOrLib barrackOrLibList = 8;
  inline int barrackorliblist_size() const;
  inline void clear_barrackorliblist();
  static const int kBarrackOrLibListFieldNumber = 8;
  inline const ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib& barrackorliblist(int index) const;
  inline ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib* mutable_barrackorliblist(int index);
  inline ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib* add_barrackorliblist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib >&
      barrackorliblist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib >*
      mutable_barrackorliblist();
  
  // optional int32 produce_count = 9;
  inline bool has_produce_count() const;
  inline void clear_produce_count();
  static const int kProduceCountFieldNumber = 9;
  inline ::google::protobuf::int32 produce_count() const;
  inline void set_produce_count(::google::protobuf::int32 value);
  
  // optional string harvest_start_time = 10;
  inline bool has_harvest_start_time() const;
  inline void clear_harvest_start_time();
  static const int kHarvestStartTimeFieldNumber = 10;
  inline const ::std::string& harvest_start_time() const;
  inline void set_harvest_start_time(const ::std::string& value);
  inline void set_harvest_start_time(const char* value);
  inline void set_harvest_start_time(const char* value, size_t size);
  inline ::std::string* mutable_harvest_start_time();
  inline ::std::string* release_harvest_start_time();
  
  // optional int32 collect_count = 11;
  inline bool has_collect_count() const;
  inline void clear_collect_count();
  static const int kCollectCountFieldNumber = 11;
  inline ::google::protobuf::int32 collect_count() const;
  inline void set_collect_count(::google::protobuf::int32 value);
  
  // optional string end_time = 12;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 12;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const char* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  
  // optional string build_upgrade_end_time = 13;
  inline bool has_build_upgrade_end_time() const;
  inline void clear_build_upgrade_end_time();
  static const int kBuildUpgradeEndTimeFieldNumber = 13;
  inline const ::std::string& build_upgrade_end_time() const;
  inline void set_build_upgrade_end_time(const ::std::string& value);
  inline void set_build_upgrade_end_time(const char* value);
  inline void set_build_upgrade_end_time(const char* value, size_t size);
  inline ::std::string* mutable_build_upgrade_end_time();
  inline ::std::string* release_build_upgrade_end_time();
  
  // optional int32 build_status = 14;
  inline bool has_build_status() const;
  inline void clear_build_status();
  static const int kBuildStatusFieldNumber = 14;
  inline ::google::protobuf::int32 build_status() const;
  inline void set_build_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.UserMapData)
 private:
  inline void set_has_map_index_x();
  inline void clear_has_map_index_x();
  inline void set_has_uniqueness_build_id();
  inline void clear_has_uniqueness_build_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_building_level();
  inline void clear_has_building_level();
  inline void set_has_map_index_y();
  inline void clear_has_map_index_y();
  inline void set_has_produce_count();
  inline void clear_has_produce_count();
  inline void set_has_harvest_start_time();
  inline void clear_has_harvest_start_time();
  inline void set_has_collect_count();
  inline void clear_has_collect_count();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_build_upgrade_end_time();
  inline void clear_has_build_upgrade_end_time();
  inline void set_has_build_status();
  inline void clear_has_build_status();
  
  ::google::protobuf::int32 map_index_x_;
  ::google::protobuf::int32 uniqueness_build_id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 building_id_;
  ::google::protobuf::int32 building_level_;
  ::google::protobuf::int32 map_index_y_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_HousingOrClans > housingorclanslist_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib > barrackorliblist_;
  ::std::string* harvest_start_time_;
  ::google::protobuf::int32 produce_count_;
  ::google::protobuf::int32 collect_count_;
  ::std::string* end_time_;
  ::std::string* build_upgrade_end_time_;
  ::google::protobuf::int32 build_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_UserMapData* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_UserCharacter : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_UserCharacter();
  virtual ~DownloadMapInforResponse_UserCharacter();
  
  DownloadMapInforResponse_UserCharacter(const DownloadMapInforResponse_UserCharacter& from);
  
  inline DownloadMapInforResponse_UserCharacter& operator=(const DownloadMapInforResponse_UserCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_UserCharacter& default_instance();
  
  void Swap(DownloadMapInforResponse_UserCharacter* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_UserCharacter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_UserCharacter& from);
  void MergeFrom(const DownloadMapInforResponse_UserCharacter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 character_id = 1;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 1;
  inline ::google::protobuf::int32 character_id() const;
  inline void set_character_id(::google::protobuf::int32 value);
  
  // optional int32 character_level = 2;
  inline bool has_character_level() const;
  inline void clear_character_level();
  static const int kCharacterLevelFieldNumber = 2;
  inline ::google::protobuf::int32 character_level() const;
  inline void set_character_level(::google::protobuf::int32 value);
  
  // optional string upgrade_character_finish_time = 3;
  inline bool has_upgrade_character_finish_time() const;
  inline void clear_upgrade_character_finish_time();
  static const int kUpgradeCharacterFinishTimeFieldNumber = 3;
  inline const ::std::string& upgrade_character_finish_time() const;
  inline void set_upgrade_character_finish_time(const ::std::string& value);
  inline void set_upgrade_character_finish_time(const char* value);
  inline void set_upgrade_character_finish_time(const char* value, size_t size);
  inline ::std::string* mutable_upgrade_character_finish_time();
  inline ::std::string* release_upgrade_character_finish_time();
  
  // optional int32 character_count = 4;
  inline bool has_character_count() const;
  inline void clear_character_count();
  static const int kCharacterCountFieldNumber = 4;
  inline ::google::protobuf::int32 character_count() const;
  inline void set_character_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.UserCharacter)
 private:
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_character_level();
  inline void clear_has_character_level();
  inline void set_has_upgrade_character_finish_time();
  inline void clear_has_upgrade_character_finish_time();
  inline void set_has_character_count();
  inline void clear_has_character_count();
  
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 character_level_;
  ::std::string* upgrade_character_finish_time_;
  ::google::protobuf::int32 character_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_UserCharacter* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_Spell : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_Spell();
  virtual ~DownloadMapInforResponse_Spell();
  
  DownloadMapInforResponse_Spell(const DownloadMapInforResponse_Spell& from);
  
  inline DownloadMapInforResponse_Spell& operator=(const DownloadMapInforResponse_Spell& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_Spell& default_instance();
  
  void Swap(DownloadMapInforResponse_Spell* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_Spell* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_Spell& from);
  void MergeFrom(const DownloadMapInforResponse_Spell& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 Spell_type_id = 1;
  inline bool has_spell_type_id() const;
  inline void clear_spell_type_id();
  static const int kSpellTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 spell_type_id() const;
  inline void set_spell_type_id(::google::protobuf::int32 value);
  
  // optional int32 spell_level = 2;
  inline bool has_spell_level() const;
  inline void clear_spell_level();
  static const int kSpellLevelFieldNumber = 2;
  inline ::google::protobuf::int32 spell_level() const;
  inline void set_spell_level(::google::protobuf::int32 value);
  
  // optional int32 spell_count = 3;
  inline bool has_spell_count() const;
  inline void clear_spell_count();
  static const int kSpellCountFieldNumber = 3;
  inline ::google::protobuf::int32 spell_count() const;
  inline void set_spell_count(::google::protobuf::int32 value);
  
  // optional string spell_create_end_time = 4;
  inline bool has_spell_create_end_time() const;
  inline void clear_spell_create_end_time();
  static const int kSpellCreateEndTimeFieldNumber = 4;
  inline const ::std::string& spell_create_end_time() const;
  inline void set_spell_create_end_time(const ::std::string& value);
  inline void set_spell_create_end_time(const char* value);
  inline void set_spell_create_end_time(const char* value, size_t size);
  inline ::std::string* mutable_spell_create_end_time();
  inline ::std::string* release_spell_create_end_time();
  
  // optional string spell_upgrade_end_time = 5;
  inline bool has_spell_upgrade_end_time() const;
  inline void clear_spell_upgrade_end_time();
  static const int kSpellUpgradeEndTimeFieldNumber = 5;
  inline const ::std::string& spell_upgrade_end_time() const;
  inline void set_spell_upgrade_end_time(const ::std::string& value);
  inline void set_spell_upgrade_end_time(const char* value);
  inline void set_spell_upgrade_end_time(const char* value, size_t size);
  inline ::std::string* mutable_spell_upgrade_end_time();
  inline ::std::string* release_spell_upgrade_end_time();
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.Spell)
 private:
  inline void set_has_spell_type_id();
  inline void clear_has_spell_type_id();
  inline void set_has_spell_level();
  inline void clear_has_spell_level();
  inline void set_has_spell_count();
  inline void clear_has_spell_count();
  inline void set_has_spell_create_end_time();
  inline void clear_has_spell_create_end_time();
  inline void set_has_spell_upgrade_end_time();
  inline void clear_has_spell_upgrade_end_time();
  
  ::google::protobuf::int32 spell_type_id_;
  ::google::protobuf::int32 spell_level_;
  ::std::string* spell_create_end_time_;
  ::std::string* spell_upgrade_end_time_;
  ::google::protobuf::int32 spell_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_Spell* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_BattleInfor : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_BattleInfor();
  virtual ~DownloadMapInforResponse_BattleInfor();
  
  DownloadMapInforResponse_BattleInfor(const DownloadMapInforResponse_BattleInfor& from);
  
  inline DownloadMapInforResponse_BattleInfor& operator=(const DownloadMapInforResponse_BattleInfor& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_BattleInfor& default_instance();
  
  void Swap(DownloadMapInforResponse_BattleInfor* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_BattleInfor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_BattleInfor& from);
  void MergeFrom(const DownloadMapInforResponse_BattleInfor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string attacker_nick_name = 1;
  inline bool has_attacker_nick_name() const;
  inline void clear_attacker_nick_name();
  static const int kAttackerNickNameFieldNumber = 1;
  inline const ::std::string& attacker_nick_name() const;
  inline void set_attacker_nick_name(const ::std::string& value);
  inline void set_attacker_nick_name(const char* value);
  inline void set_attacker_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_attacker_nick_name();
  inline ::std::string* release_attacker_nick_name();
  
  // optional sint32 defencer_get_pvp_mark = 2;
  inline bool has_defencer_get_pvp_mark() const;
  inline void clear_defencer_get_pvp_mark();
  static const int kDefencerGetPvpMarkFieldNumber = 2;
  inline ::google::protobuf::int32 defencer_get_pvp_mark() const;
  inline void set_defencer_get_pvp_mark(::google::protobuf::int32 value);
  
  // optional string attack_time = 3;
  inline bool has_attack_time() const;
  inline void clear_attack_time();
  static const int kAttackTimeFieldNumber = 3;
  inline const ::std::string& attack_time() const;
  inline void set_attack_time(const ::std::string& value);
  inline void set_attack_time(const char* value);
  inline void set_attack_time(const char* value, size_t size);
  inline ::std::string* mutable_attack_time();
  inline ::std::string* release_attack_time();
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.BattleInfor)
 private:
  inline void set_has_attacker_nick_name();
  inline void clear_has_attacker_nick_name();
  inline void set_has_defencer_get_pvp_mark();
  inline void clear_has_defencer_get_pvp_mark();
  inline void set_has_attack_time();
  inline void clear_has_attack_time();
  
  ::std::string* attacker_nick_name_;
  ::std::string* attack_time_;
  ::google::protobuf::int32 defencer_get_pvp_mark_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_BattleInfor* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse_BuildDestoryStatus : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse_BuildDestoryStatus();
  virtual ~DownloadMapInforResponse_BuildDestoryStatus();
  
  DownloadMapInforResponse_BuildDestoryStatus(const DownloadMapInforResponse_BuildDestoryStatus& from);
  
  inline DownloadMapInforResponse_BuildDestoryStatus& operator=(const DownloadMapInforResponse_BuildDestoryStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse_BuildDestoryStatus& default_instance();
  
  void Swap(DownloadMapInforResponse_BuildDestoryStatus* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse_BuildDestoryStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse_BuildDestoryStatus& from);
  void MergeFrom(const DownloadMapInforResponse_BuildDestoryStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 building_id = 1;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 1;
  inline ::google::protobuf::int32 building_id() const;
  inline void set_building_id(::google::protobuf::int32 value);
  
  // optional int32 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);
  
  // optional int32 map_index_x = 3;
  inline bool has_map_index_x() const;
  inline void clear_map_index_x();
  static const int kMapIndexXFieldNumber = 3;
  inline ::google::protobuf::int32 map_index_x() const;
  inline void set_map_index_x(::google::protobuf::int32 value);
  
  // optional int32 map_index_y = 4;
  inline bool has_map_index_y() const;
  inline void clear_map_index_y();
  static const int kMapIndexYFieldNumber = 4;
  inline ::google::protobuf::int32 map_index_y() const;
  inline void set_map_index_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse.BuildDestoryStatus)
 private:
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_map_index_x();
  inline void clear_has_map_index_x();
  inline void set_has_map_index_y();
  inline void clear_has_map_index_y();
  
  ::google::protobuf::int32 building_id_;
  ::google::protobuf::int32 uuid_;
  ::google::protobuf::int32 map_index_x_;
  ::google::protobuf::int32 map_index_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse_BuildDestoryStatus* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMapInforResponse : public ::google::protobuf::MessageLite {
 public:
  DownloadMapInforResponse();
  virtual ~DownloadMapInforResponse();
  
  DownloadMapInforResponse(const DownloadMapInforResponse& from);
  
  inline DownloadMapInforResponse& operator=(const DownloadMapInforResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DownloadMapInforResponse& default_instance();
  
  void Swap(DownloadMapInforResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadMapInforResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownloadMapInforResponse& from);
  void MergeFrom(const DownloadMapInforResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DownloadMapInforResponse_UserMapData UserMapData;
  typedef DownloadMapInforResponse_UserCharacter UserCharacter;
  typedef DownloadMapInforResponse_Spell Spell;
  typedef DownloadMapInforResponse_BattleInfor BattleInfor;
  typedef DownloadMapInforResponse_BuildDestoryStatus BuildDestoryStatus;
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // required string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  
  // required int32 golden_count = 4;
  inline bool has_golden_count() const;
  inline void clear_golden_count();
  static const int kGoldenCountFieldNumber = 4;
  inline ::google::protobuf::int32 golden_count() const;
  inline void set_golden_count(::google::protobuf::int32 value);
  
  // required int32 elixir_count = 5;
  inline bool has_elixir_count() const;
  inline void clear_elixir_count();
  static const int kElixirCountFieldNumber = 5;
  inline ::google::protobuf::int32 elixir_count() const;
  inline void set_elixir_count(::google::protobuf::int32 value);
  
  // required int32 pvp_mark = 6;
  inline bool has_pvp_mark() const;
  inline void clear_pvp_mark();
  static const int kPvpMarkFieldNumber = 6;
  inline ::google::protobuf::int32 pvp_mark() const;
  inline void set_pvp_mark(::google::protobuf::int32 value);
  
  // required int32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // required int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // repeated .message.DownloadMapInforResponse.UserMapData userMapDataList = 9;
  inline int usermapdatalist_size() const;
  inline void clear_usermapdatalist();
  static const int kUserMapDataListFieldNumber = 9;
  inline const ::message::DownloadMapInforResponse_UserMapData& usermapdatalist(int index) const;
  inline ::message::DownloadMapInforResponse_UserMapData* mutable_usermapdatalist(int index);
  inline ::message::DownloadMapInforResponse_UserMapData* add_usermapdatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData >&
      usermapdatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData >*
      mutable_usermapdatalist();
  
  // repeated .message.DownloadMapInforResponse.UserCharacter userCharacterList = 10;
  inline int usercharacterlist_size() const;
  inline void clear_usercharacterlist();
  static const int kUserCharacterListFieldNumber = 10;
  inline const ::message::DownloadMapInforResponse_UserCharacter& usercharacterlist(int index) const;
  inline ::message::DownloadMapInforResponse_UserCharacter* mutable_usercharacterlist(int index);
  inline ::message::DownloadMapInforResponse_UserCharacter* add_usercharacterlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserCharacter >&
      usercharacterlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserCharacter >*
      mutable_usercharacterlist();
  
  // repeated .message.DownloadMapInforResponse.Spell spellList = 11;
  inline int spelllist_size() const;
  inline void clear_spelllist();
  static const int kSpellListFieldNumber = 11;
  inline const ::message::DownloadMapInforResponse_Spell& spelllist(int index) const;
  inline ::message::DownloadMapInforResponse_Spell* mutable_spelllist(int index);
  inline ::message::DownloadMapInforResponse_Spell* add_spelllist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_Spell >&
      spelllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_Spell >*
      mutable_spelllist();
  
  // optional int64 shield_time = 12;
  inline bool has_shield_time() const;
  inline void clear_shield_time();
  static const int kShieldTimeFieldNumber = 12;
  inline ::google::protobuf::int64 shield_time() const;
  inline void set_shield_time(::google::protobuf::int64 value);
  
  // optional int32 destroy_status = 13;
  inline bool has_destroy_status() const;
  inline void clear_destroy_status();
  static const int kDestroyStatusFieldNumber = 13;
  inline ::google::protobuf::int32 destroy_status() const;
  inline void set_destroy_status(::google::protobuf::int32 value);
  
  // optional bool battle_request_flag = 14;
  inline bool has_battle_request_flag() const;
  inline void clear_battle_request_flag();
  static const int kBattleRequestFlagFieldNumber = 14;
  inline bool battle_request_flag() const;
  inline void set_battle_request_flag(bool value);
  
  // optional int32 battle_end_time = 15;
  inline bool has_battle_end_time() const;
  inline void clear_battle_end_time();
  static const int kBattleEndTimeFieldNumber = 15;
  inline ::google::protobuf::int32 battle_end_time() const;
  inline void set_battle_end_time(::google::protobuf::int32 value);
  
  // repeated .message.DownloadMapInforResponse.BattleInfor battleInforList = 16;
  inline int battleinforlist_size() const;
  inline void clear_battleinforlist();
  static const int kBattleInforListFieldNumber = 16;
  inline const ::message::DownloadMapInforResponse_BattleInfor& battleinforlist(int index) const;
  inline ::message::DownloadMapInforResponse_BattleInfor* mutable_battleinforlist(int index);
  inline ::message::DownloadMapInforResponse_BattleInfor* add_battleinforlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BattleInfor >&
      battleinforlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BattleInfor >*
      mutable_battleinforlist();
  
  // optional int32 gem_count = 17;
  inline bool has_gem_count() const;
  inline void clear_gem_count();
  static const int kGemCountFieldNumber = 17;
  inline ::google::protobuf::int32 gem_count() const;
  inline void set_gem_count(::google::protobuf::int32 value);
  
  // repeated .message.DownloadMapInforResponse.BuildDestoryStatus BuildDistoryStatusList = 18;
  inline int builddistorystatuslist_size() const;
  inline void clear_builddistorystatuslist();
  static const int kBuildDistoryStatusListFieldNumber = 18;
  inline const ::message::DownloadMapInforResponse_BuildDestoryStatus& builddistorystatuslist(int index) const;
  inline ::message::DownloadMapInforResponse_BuildDestoryStatus* mutable_builddistorystatuslist(int index);
  inline ::message::DownloadMapInforResponse_BuildDestoryStatus* add_builddistorystatuslist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BuildDestoryStatus >&
      builddistorystatuslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BuildDestoryStatus >*
      mutable_builddistorystatuslist();
  
  // optional int32 battleMathingUseCount = 19;
  inline bool has_battlemathingusecount() const;
  inline void clear_battlemathingusecount();
  static const int kBattleMathingUseCountFieldNumber = 19;
  inline ::google::protobuf::int32 battlemathingusecount() const;
  inline void set_battlemathingusecount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.DownloadMapInforResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_golden_count();
  inline void clear_has_golden_count();
  inline void set_has_elixir_count();
  inline void clear_has_elixir_count();
  inline void set_has_pvp_mark();
  inline void clear_has_pvp_mark();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_shield_time();
  inline void clear_has_shield_time();
  inline void set_has_destroy_status();
  inline void clear_has_destroy_status();
  inline void set_has_battle_request_flag();
  inline void clear_has_battle_request_flag();
  inline void set_has_battle_end_time();
  inline void clear_has_battle_end_time();
  inline void set_has_gem_count();
  inline void clear_has_gem_count();
  inline void set_has_battlemathingusecount();
  inline void clear_has_battlemathingusecount();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 golden_count_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 elixir_count_;
  ::google::protobuf::int32 pvp_mark_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData > usermapdatalist_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserCharacter > usercharacterlist_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_Spell > spelllist_;
  ::google::protobuf::int64 shield_time_;
  ::google::protobuf::int32 destroy_status_;
  bool battle_request_flag_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BattleInfor > battleinforlist_;
  ::google::protobuf::int32 battle_end_time_;
  ::google::protobuf::int32 gem_count_;
  ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BuildDestoryStatus > builddistorystatuslist_;
  ::google::protobuf::int32 battlemathingusecount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_DownloadMapInfor_2eproto();
  friend void protobuf_AssignDesc_DownloadMapInfor_2eproto();
  friend void protobuf_ShutdownFile_DownloadMapInfor_2eproto();
  
  void InitAsDefaultInstance();
  static DownloadMapInforResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// DownloadMapInforRequest

// required string mailAddress = 1;
inline bool DownloadMapInforRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& DownloadMapInforRequest::mailaddress() const {
  return *mailaddress_;
}
inline void DownloadMapInforRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void DownloadMapInforRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void DownloadMapInforRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* DownloadMapInforRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_UserMapData_HousingOrClans

// optional int32 character_id = 1;
inline bool DownloadMapInforResponse_UserMapData_HousingOrClans::has_character_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_has_character_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_character_id() {
  character_id_ = 0;
  clear_has_character_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_HousingOrClans::character_id() const {
  return character_id_;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_character_id(::google::protobuf::int32 value) {
  set_has_character_id();
  character_id_ = value;
}

// optional int32 character_level = 2;
inline bool DownloadMapInforResponse_UserMapData_HousingOrClans::has_character_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_has_character_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_has_character_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_character_level() {
  character_level_ = 0;
  clear_has_character_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_HousingOrClans::character_level() const {
  return character_level_;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_character_level(::google::protobuf::int32 value) {
  set_has_character_level();
  character_level_ = value;
}

// optional int32 finished_produce_count = 3;
inline bool DownloadMapInforResponse_UserMapData_HousingOrClans::has_finished_produce_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_has_finished_produce_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_has_finished_produce_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::clear_finished_produce_count() {
  finished_produce_count_ = 0;
  clear_has_finished_produce_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_HousingOrClans::finished_produce_count() const {
  return finished_produce_count_;
}
inline void DownloadMapInforResponse_UserMapData_HousingOrClans::set_finished_produce_count(::google::protobuf::int32 value) {
  set_has_finished_produce_count();
  finished_produce_count_ = value;
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_UserMapData_BarrackOrLib

// optional int32 character_id = 1;
inline bool DownloadMapInforResponse_UserMapData_BarrackOrLib::has_character_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_has_character_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_character_id() {
  character_id_ = 0;
  clear_has_character_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_BarrackOrLib::character_id() const {
  return character_id_;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_character_id(::google::protobuf::int32 value) {
  set_has_character_id();
  character_id_ = value;
}

// optional int32 character_level = 2;
inline bool DownloadMapInforResponse_UserMapData_BarrackOrLib::has_character_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_has_character_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_has_character_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_character_level() {
  character_level_ = 0;
  clear_has_character_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_BarrackOrLib::character_level() const {
  return character_level_;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_character_level(::google::protobuf::int32 value) {
  set_has_character_level();
  character_level_ = value;
}

// optional string end_time = 3;
inline bool DownloadMapInforResponse_UserMapData_BarrackOrLib::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& DownloadMapInforResponse_UserMapData_BarrackOrLib::end_time() const {
  return *end_time_;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_end_time(const char* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_UserMapData_BarrackOrLib::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  return end_time_;
}
inline ::std::string* DownloadMapInforResponse_UserMapData_BarrackOrLib::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 produce_count = 4;
inline bool DownloadMapInforResponse_UserMapData_BarrackOrLib::has_produce_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_has_produce_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_has_produce_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_produce_count() {
  produce_count_ = 0;
  clear_has_produce_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_BarrackOrLib::produce_count() const {
  return produce_count_;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_produce_count(::google::protobuf::int32 value) {
  set_has_produce_count();
  produce_count_ = value;
}

// optional int32 index = 5;
inline bool DownloadMapInforResponse_UserMapData_BarrackOrLib::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData_BarrackOrLib::index() const {
  return index_;
}
inline void DownloadMapInforResponse_UserMapData_BarrackOrLib::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_UserMapData

// optional int32 map_index_x = 1;
inline bool DownloadMapInforResponse_UserMapData::has_map_index_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_map_index_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_map_index_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_UserMapData::clear_map_index_x() {
  map_index_x_ = 0;
  clear_has_map_index_x();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::map_index_x() const {
  return map_index_x_;
}
inline void DownloadMapInforResponse_UserMapData::set_map_index_x(::google::protobuf::int32 value) {
  set_has_map_index_x();
  map_index_x_ = value;
}

// optional int32 uniqueness_build_id = 2;
inline bool DownloadMapInforResponse_UserMapData::has_uniqueness_build_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_uniqueness_build_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_uniqueness_build_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_UserMapData::clear_uniqueness_build_id() {
  uniqueness_build_id_ = 0;
  clear_has_uniqueness_build_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::uniqueness_build_id() const {
  return uniqueness_build_id_;
}
inline void DownloadMapInforResponse_UserMapData::set_uniqueness_build_id(::google::protobuf::int32 value) {
  set_has_uniqueness_build_id();
  uniqueness_build_id_ = value;
}

// optional int32 status = 3;
inline bool DownloadMapInforResponse_UserMapData::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_UserMapData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::status() const {
  return status_;
}
inline void DownloadMapInforResponse_UserMapData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 building_id = 4;
inline bool DownloadMapInforResponse_UserMapData::has_building_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_building_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse_UserMapData::clear_building_id() {
  building_id_ = 0;
  clear_has_building_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::building_id() const {
  return building_id_;
}
inline void DownloadMapInforResponse_UserMapData::set_building_id(::google::protobuf::int32 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional int32 Building_level = 5;
inline bool DownloadMapInforResponse_UserMapData::has_building_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_building_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_building_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadMapInforResponse_UserMapData::clear_building_level() {
  building_level_ = 0;
  clear_has_building_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::building_level() const {
  return building_level_;
}
inline void DownloadMapInforResponse_UserMapData::set_building_level(::google::protobuf::int32 value) {
  set_has_building_level();
  building_level_ = value;
}

// optional int32 map_index_y = 6;
inline bool DownloadMapInforResponse_UserMapData::has_map_index_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_map_index_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_map_index_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadMapInforResponse_UserMapData::clear_map_index_y() {
  map_index_y_ = 0;
  clear_has_map_index_y();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::map_index_y() const {
  return map_index_y_;
}
inline void DownloadMapInforResponse_UserMapData::set_map_index_y(::google::protobuf::int32 value) {
  set_has_map_index_y();
  map_index_y_ = value;
}

// repeated .message.DownloadMapInforResponse.UserMapData.HousingOrClans housingOrClansList = 7;
inline int DownloadMapInforResponse_UserMapData::housingorclanslist_size() const {
  return housingorclanslist_.size();
}
inline void DownloadMapInforResponse_UserMapData::clear_housingorclanslist() {
  housingorclanslist_.Clear();
}
inline const ::message::DownloadMapInforResponse_UserMapData_HousingOrClans& DownloadMapInforResponse_UserMapData::housingorclanslist(int index) const {
  return housingorclanslist_.Get(index);
}
inline ::message::DownloadMapInforResponse_UserMapData_HousingOrClans* DownloadMapInforResponse_UserMapData::mutable_housingorclanslist(int index) {
  return housingorclanslist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_UserMapData_HousingOrClans* DownloadMapInforResponse_UserMapData::add_housingorclanslist() {
  return housingorclanslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_HousingOrClans >&
DownloadMapInforResponse_UserMapData::housingorclanslist() const {
  return housingorclanslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_HousingOrClans >*
DownloadMapInforResponse_UserMapData::mutable_housingorclanslist() {
  return &housingorclanslist_;
}

// repeated .message.DownloadMapInforResponse.UserMapData.BarrackOrLib barrackOrLibList = 8;
inline int DownloadMapInforResponse_UserMapData::barrackorliblist_size() const {
  return barrackorliblist_.size();
}
inline void DownloadMapInforResponse_UserMapData::clear_barrackorliblist() {
  barrackorliblist_.Clear();
}
inline const ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib& DownloadMapInforResponse_UserMapData::barrackorliblist(int index) const {
  return barrackorliblist_.Get(index);
}
inline ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib* DownloadMapInforResponse_UserMapData::mutable_barrackorliblist(int index) {
  return barrackorliblist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib* DownloadMapInforResponse_UserMapData::add_barrackorliblist() {
  return barrackorliblist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib >&
DownloadMapInforResponse_UserMapData::barrackorliblist() const {
  return barrackorliblist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData_BarrackOrLib >*
DownloadMapInforResponse_UserMapData::mutable_barrackorliblist() {
  return &barrackorliblist_;
}

// optional int32 produce_count = 9;
inline bool DownloadMapInforResponse_UserMapData::has_produce_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_produce_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_produce_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DownloadMapInforResponse_UserMapData::clear_produce_count() {
  produce_count_ = 0;
  clear_has_produce_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::produce_count() const {
  return produce_count_;
}
inline void DownloadMapInforResponse_UserMapData::set_produce_count(::google::protobuf::int32 value) {
  set_has_produce_count();
  produce_count_ = value;
}

// optional string harvest_start_time = 10;
inline bool DownloadMapInforResponse_UserMapData::has_harvest_start_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_harvest_start_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_harvest_start_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DownloadMapInforResponse_UserMapData::clear_harvest_start_time() {
  if (harvest_start_time_ != &::google::protobuf::internal::kEmptyString) {
    harvest_start_time_->clear();
  }
  clear_has_harvest_start_time();
}
inline const ::std::string& DownloadMapInforResponse_UserMapData::harvest_start_time() const {
  return *harvest_start_time_;
}
inline void DownloadMapInforResponse_UserMapData::set_harvest_start_time(const ::std::string& value) {
  set_has_harvest_start_time();
  if (harvest_start_time_ == &::google::protobuf::internal::kEmptyString) {
    harvest_start_time_ = new ::std::string;
  }
  harvest_start_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_harvest_start_time(const char* value) {
  set_has_harvest_start_time();
  if (harvest_start_time_ == &::google::protobuf::internal::kEmptyString) {
    harvest_start_time_ = new ::std::string;
  }
  harvest_start_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_harvest_start_time(const char* value, size_t size) {
  set_has_harvest_start_time();
  if (harvest_start_time_ == &::google::protobuf::internal::kEmptyString) {
    harvest_start_time_ = new ::std::string;
  }
  harvest_start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_UserMapData::mutable_harvest_start_time() {
  set_has_harvest_start_time();
  if (harvest_start_time_ == &::google::protobuf::internal::kEmptyString) {
    harvest_start_time_ = new ::std::string;
  }
  return harvest_start_time_;
}
inline ::std::string* DownloadMapInforResponse_UserMapData::release_harvest_start_time() {
  clear_has_harvest_start_time();
  if (harvest_start_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = harvest_start_time_;
    harvest_start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 collect_count = 11;
inline bool DownloadMapInforResponse_UserMapData::has_collect_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_collect_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_collect_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DownloadMapInforResponse_UserMapData::clear_collect_count() {
  collect_count_ = 0;
  clear_has_collect_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::collect_count() const {
  return collect_count_;
}
inline void DownloadMapInforResponse_UserMapData::set_collect_count(::google::protobuf::int32 value) {
  set_has_collect_count();
  collect_count_ = value;
}

// optional string end_time = 12;
inline bool DownloadMapInforResponse_UserMapData::has_end_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_end_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DownloadMapInforResponse_UserMapData::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& DownloadMapInforResponse_UserMapData::end_time() const {
  return *end_time_;
}
inline void DownloadMapInforResponse_UserMapData::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_end_time(const char* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_UserMapData::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  return end_time_;
}
inline ::std::string* DownloadMapInforResponse_UserMapData::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string build_upgrade_end_time = 13;
inline bool DownloadMapInforResponse_UserMapData::has_build_upgrade_end_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_build_upgrade_end_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_build_upgrade_end_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DownloadMapInforResponse_UserMapData::clear_build_upgrade_end_time() {
  if (build_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
    build_upgrade_end_time_->clear();
  }
  clear_has_build_upgrade_end_time();
}
inline const ::std::string& DownloadMapInforResponse_UserMapData::build_upgrade_end_time() const {
  return *build_upgrade_end_time_;
}
inline void DownloadMapInforResponse_UserMapData::set_build_upgrade_end_time(const ::std::string& value) {
  set_has_build_upgrade_end_time();
  if (build_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    build_upgrade_end_time_ = new ::std::string;
  }
  build_upgrade_end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_build_upgrade_end_time(const char* value) {
  set_has_build_upgrade_end_time();
  if (build_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    build_upgrade_end_time_ = new ::std::string;
  }
  build_upgrade_end_time_->assign(value);
}
inline void DownloadMapInforResponse_UserMapData::set_build_upgrade_end_time(const char* value, size_t size) {
  set_has_build_upgrade_end_time();
  if (build_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    build_upgrade_end_time_ = new ::std::string;
  }
  build_upgrade_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_UserMapData::mutable_build_upgrade_end_time() {
  set_has_build_upgrade_end_time();
  if (build_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    build_upgrade_end_time_ = new ::std::string;
  }
  return build_upgrade_end_time_;
}
inline ::std::string* DownloadMapInforResponse_UserMapData::release_build_upgrade_end_time() {
  clear_has_build_upgrade_end_time();
  if (build_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = build_upgrade_end_time_;
    build_upgrade_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 build_status = 14;
inline bool DownloadMapInforResponse_UserMapData::has_build_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DownloadMapInforResponse_UserMapData::set_has_build_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DownloadMapInforResponse_UserMapData::clear_has_build_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DownloadMapInforResponse_UserMapData::clear_build_status() {
  build_status_ = 0;
  clear_has_build_status();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserMapData::build_status() const {
  return build_status_;
}
inline void DownloadMapInforResponse_UserMapData::set_build_status(::google::protobuf::int32 value) {
  set_has_build_status();
  build_status_ = value;
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_UserCharacter

// optional int32 character_id = 1;
inline bool DownloadMapInforResponse_UserCharacter::has_character_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_UserCharacter::set_has_character_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_character_id() {
  character_id_ = 0;
  clear_has_character_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserCharacter::character_id() const {
  return character_id_;
}
inline void DownloadMapInforResponse_UserCharacter::set_character_id(::google::protobuf::int32 value) {
  set_has_character_id();
  character_id_ = value;
}

// optional int32 character_level = 2;
inline bool DownloadMapInforResponse_UserCharacter::has_character_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_UserCharacter::set_has_character_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_has_character_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_character_level() {
  character_level_ = 0;
  clear_has_character_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserCharacter::character_level() const {
  return character_level_;
}
inline void DownloadMapInforResponse_UserCharacter::set_character_level(::google::protobuf::int32 value) {
  set_has_character_level();
  character_level_ = value;
}

// optional string upgrade_character_finish_time = 3;
inline bool DownloadMapInforResponse_UserCharacter::has_upgrade_character_finish_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_UserCharacter::set_has_upgrade_character_finish_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_has_upgrade_character_finish_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_upgrade_character_finish_time() {
  if (upgrade_character_finish_time_ != &::google::protobuf::internal::kEmptyString) {
    upgrade_character_finish_time_->clear();
  }
  clear_has_upgrade_character_finish_time();
}
inline const ::std::string& DownloadMapInforResponse_UserCharacter::upgrade_character_finish_time() const {
  return *upgrade_character_finish_time_;
}
inline void DownloadMapInforResponse_UserCharacter::set_upgrade_character_finish_time(const ::std::string& value) {
  set_has_upgrade_character_finish_time();
  if (upgrade_character_finish_time_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_character_finish_time_ = new ::std::string;
  }
  upgrade_character_finish_time_->assign(value);
}
inline void DownloadMapInforResponse_UserCharacter::set_upgrade_character_finish_time(const char* value) {
  set_has_upgrade_character_finish_time();
  if (upgrade_character_finish_time_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_character_finish_time_ = new ::std::string;
  }
  upgrade_character_finish_time_->assign(value);
}
inline void DownloadMapInforResponse_UserCharacter::set_upgrade_character_finish_time(const char* value, size_t size) {
  set_has_upgrade_character_finish_time();
  if (upgrade_character_finish_time_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_character_finish_time_ = new ::std::string;
  }
  upgrade_character_finish_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_UserCharacter::mutable_upgrade_character_finish_time() {
  set_has_upgrade_character_finish_time();
  if (upgrade_character_finish_time_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_character_finish_time_ = new ::std::string;
  }
  return upgrade_character_finish_time_;
}
inline ::std::string* DownloadMapInforResponse_UserCharacter::release_upgrade_character_finish_time() {
  clear_has_upgrade_character_finish_time();
  if (upgrade_character_finish_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = upgrade_character_finish_time_;
    upgrade_character_finish_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 character_count = 4;
inline bool DownloadMapInforResponse_UserCharacter::has_character_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse_UserCharacter::set_has_character_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_has_character_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse_UserCharacter::clear_character_count() {
  character_count_ = 0;
  clear_has_character_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_UserCharacter::character_count() const {
  return character_count_;
}
inline void DownloadMapInforResponse_UserCharacter::set_character_count(::google::protobuf::int32 value) {
  set_has_character_count();
  character_count_ = value;
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_Spell

// optional int32 Spell_type_id = 1;
inline bool DownloadMapInforResponse_Spell::has_spell_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_Spell::set_has_spell_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_Spell::clear_has_spell_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_Spell::clear_spell_type_id() {
  spell_type_id_ = 0;
  clear_has_spell_type_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_Spell::spell_type_id() const {
  return spell_type_id_;
}
inline void DownloadMapInforResponse_Spell::set_spell_type_id(::google::protobuf::int32 value) {
  set_has_spell_type_id();
  spell_type_id_ = value;
}

// optional int32 spell_level = 2;
inline bool DownloadMapInforResponse_Spell::has_spell_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_Spell::set_has_spell_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_Spell::clear_has_spell_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_Spell::clear_spell_level() {
  spell_level_ = 0;
  clear_has_spell_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_Spell::spell_level() const {
  return spell_level_;
}
inline void DownloadMapInforResponse_Spell::set_spell_level(::google::protobuf::int32 value) {
  set_has_spell_level();
  spell_level_ = value;
}

// optional int32 spell_count = 3;
inline bool DownloadMapInforResponse_Spell::has_spell_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_Spell::set_has_spell_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_Spell::clear_has_spell_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_Spell::clear_spell_count() {
  spell_count_ = 0;
  clear_has_spell_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_Spell::spell_count() const {
  return spell_count_;
}
inline void DownloadMapInforResponse_Spell::set_spell_count(::google::protobuf::int32 value) {
  set_has_spell_count();
  spell_count_ = value;
}

// optional string spell_create_end_time = 4;
inline bool DownloadMapInforResponse_Spell::has_spell_create_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse_Spell::set_has_spell_create_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse_Spell::clear_has_spell_create_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse_Spell::clear_spell_create_end_time() {
  if (spell_create_end_time_ != &::google::protobuf::internal::kEmptyString) {
    spell_create_end_time_->clear();
  }
  clear_has_spell_create_end_time();
}
inline const ::std::string& DownloadMapInforResponse_Spell::spell_create_end_time() const {
  return *spell_create_end_time_;
}
inline void DownloadMapInforResponse_Spell::set_spell_create_end_time(const ::std::string& value) {
  set_has_spell_create_end_time();
  if (spell_create_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_create_end_time_ = new ::std::string;
  }
  spell_create_end_time_->assign(value);
}
inline void DownloadMapInforResponse_Spell::set_spell_create_end_time(const char* value) {
  set_has_spell_create_end_time();
  if (spell_create_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_create_end_time_ = new ::std::string;
  }
  spell_create_end_time_->assign(value);
}
inline void DownloadMapInforResponse_Spell::set_spell_create_end_time(const char* value, size_t size) {
  set_has_spell_create_end_time();
  if (spell_create_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_create_end_time_ = new ::std::string;
  }
  spell_create_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_Spell::mutable_spell_create_end_time() {
  set_has_spell_create_end_time();
  if (spell_create_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_create_end_time_ = new ::std::string;
  }
  return spell_create_end_time_;
}
inline ::std::string* DownloadMapInforResponse_Spell::release_spell_create_end_time() {
  clear_has_spell_create_end_time();
  if (spell_create_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spell_create_end_time_;
    spell_create_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string spell_upgrade_end_time = 5;
inline bool DownloadMapInforResponse_Spell::has_spell_upgrade_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadMapInforResponse_Spell::set_has_spell_upgrade_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadMapInforResponse_Spell::clear_has_spell_upgrade_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadMapInforResponse_Spell::clear_spell_upgrade_end_time() {
  if (spell_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
    spell_upgrade_end_time_->clear();
  }
  clear_has_spell_upgrade_end_time();
}
inline const ::std::string& DownloadMapInforResponse_Spell::spell_upgrade_end_time() const {
  return *spell_upgrade_end_time_;
}
inline void DownloadMapInforResponse_Spell::set_spell_upgrade_end_time(const ::std::string& value) {
  set_has_spell_upgrade_end_time();
  if (spell_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_upgrade_end_time_ = new ::std::string;
  }
  spell_upgrade_end_time_->assign(value);
}
inline void DownloadMapInforResponse_Spell::set_spell_upgrade_end_time(const char* value) {
  set_has_spell_upgrade_end_time();
  if (spell_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_upgrade_end_time_ = new ::std::string;
  }
  spell_upgrade_end_time_->assign(value);
}
inline void DownloadMapInforResponse_Spell::set_spell_upgrade_end_time(const char* value, size_t size) {
  set_has_spell_upgrade_end_time();
  if (spell_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_upgrade_end_time_ = new ::std::string;
  }
  spell_upgrade_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_Spell::mutable_spell_upgrade_end_time() {
  set_has_spell_upgrade_end_time();
  if (spell_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    spell_upgrade_end_time_ = new ::std::string;
  }
  return spell_upgrade_end_time_;
}
inline ::std::string* DownloadMapInforResponse_Spell::release_spell_upgrade_end_time() {
  clear_has_spell_upgrade_end_time();
  if (spell_upgrade_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spell_upgrade_end_time_;
    spell_upgrade_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_BattleInfor

// optional string attacker_nick_name = 1;
inline bool DownloadMapInforResponse_BattleInfor::has_attacker_nick_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_BattleInfor::set_has_attacker_nick_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_has_attacker_nick_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_attacker_nick_name() {
  if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_->clear();
  }
  clear_has_attacker_nick_name();
}
inline const ::std::string& DownloadMapInforResponse_BattleInfor::attacker_nick_name() const {
  return *attacker_nick_name_;
}
inline void DownloadMapInforResponse_BattleInfor::set_attacker_nick_name(const ::std::string& value) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(value);
}
inline void DownloadMapInforResponse_BattleInfor::set_attacker_nick_name(const char* value) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(value);
}
inline void DownloadMapInforResponse_BattleInfor::set_attacker_nick_name(const char* value, size_t size) {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  attacker_nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_BattleInfor::mutable_attacker_nick_name() {
  set_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_nick_name_ = new ::std::string;
  }
  return attacker_nick_name_;
}
inline ::std::string* DownloadMapInforResponse_BattleInfor::release_attacker_nick_name() {
  clear_has_attacker_nick_name();
  if (attacker_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_nick_name_;
    attacker_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 defencer_get_pvp_mark = 2;
inline bool DownloadMapInforResponse_BattleInfor::has_defencer_get_pvp_mark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_BattleInfor::set_has_defencer_get_pvp_mark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_has_defencer_get_pvp_mark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_defencer_get_pvp_mark() {
  defencer_get_pvp_mark_ = 0;
  clear_has_defencer_get_pvp_mark();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_BattleInfor::defencer_get_pvp_mark() const {
  return defencer_get_pvp_mark_;
}
inline void DownloadMapInforResponse_BattleInfor::set_defencer_get_pvp_mark(::google::protobuf::int32 value) {
  set_has_defencer_get_pvp_mark();
  defencer_get_pvp_mark_ = value;
}

// optional string attack_time = 3;
inline bool DownloadMapInforResponse_BattleInfor::has_attack_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_BattleInfor::set_has_attack_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_has_attack_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_BattleInfor::clear_attack_time() {
  if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
    attack_time_->clear();
  }
  clear_has_attack_time();
}
inline const ::std::string& DownloadMapInforResponse_BattleInfor::attack_time() const {
  return *attack_time_;
}
inline void DownloadMapInforResponse_BattleInfor::set_attack_time(const ::std::string& value) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(value);
}
inline void DownloadMapInforResponse_BattleInfor::set_attack_time(const char* value) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(value);
}
inline void DownloadMapInforResponse_BattleInfor::set_attack_time(const char* value, size_t size) {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  attack_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse_BattleInfor::mutable_attack_time() {
  set_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    attack_time_ = new ::std::string;
  }
  return attack_time_;
}
inline ::std::string* DownloadMapInforResponse_BattleInfor::release_attack_time() {
  clear_has_attack_time();
  if (attack_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attack_time_;
    attack_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DownloadMapInforResponse_BuildDestoryStatus

// optional int32 building_id = 1;
inline bool DownloadMapInforResponse_BuildDestoryStatus::has_building_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_has_building_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_building_id() {
  building_id_ = 0;
  clear_has_building_id();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_BuildDestoryStatus::building_id() const {
  return building_id_;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_building_id(::google::protobuf::int32 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional int32 uuid = 2;
inline bool DownloadMapInforResponse_BuildDestoryStatus::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_BuildDestoryStatus::uuid() const {
  return uuid_;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 map_index_x = 3;
inline bool DownloadMapInforResponse_BuildDestoryStatus::has_map_index_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_has_map_index_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_has_map_index_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_map_index_x() {
  map_index_x_ = 0;
  clear_has_map_index_x();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_BuildDestoryStatus::map_index_x() const {
  return map_index_x_;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_map_index_x(::google::protobuf::int32 value) {
  set_has_map_index_x();
  map_index_x_ = value;
}

// optional int32 map_index_y = 4;
inline bool DownloadMapInforResponse_BuildDestoryStatus::has_map_index_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_has_map_index_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_has_map_index_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::clear_map_index_y() {
  map_index_y_ = 0;
  clear_has_map_index_y();
}
inline ::google::protobuf::int32 DownloadMapInforResponse_BuildDestoryStatus::map_index_y() const {
  return map_index_y_;
}
inline void DownloadMapInforResponse_BuildDestoryStatus::set_map_index_y(::google::protobuf::int32 value) {
  set_has_map_index_y();
  map_index_y_ = value;
}

// -------------------------------------------------------------------

// DownloadMapInforResponse

// optional sint32 result = 1 [default = 0];
inline bool DownloadMapInforResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMapInforResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMapInforResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMapInforResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::result() const {
  return result_;
}
inline void DownloadMapInforResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool DownloadMapInforResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMapInforResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMapInforResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMapInforResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& DownloadMapInforResponse::info() const {
  return *info_;
}
inline void DownloadMapInforResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DownloadMapInforResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DownloadMapInforResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* DownloadMapInforResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string nick_name = 3;
inline bool DownloadMapInforResponse::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMapInforResponse::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMapInforResponse::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMapInforResponse::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& DownloadMapInforResponse::nick_name() const {
  return *nick_name_;
}
inline void DownloadMapInforResponse::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void DownloadMapInforResponse::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void DownloadMapInforResponse::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMapInforResponse::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* DownloadMapInforResponse::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 golden_count = 4;
inline bool DownloadMapInforResponse::has_golden_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMapInforResponse::set_has_golden_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMapInforResponse::clear_has_golden_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMapInforResponse::clear_golden_count() {
  golden_count_ = 0;
  clear_has_golden_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::golden_count() const {
  return golden_count_;
}
inline void DownloadMapInforResponse::set_golden_count(::google::protobuf::int32 value) {
  set_has_golden_count();
  golden_count_ = value;
}

// required int32 elixir_count = 5;
inline bool DownloadMapInforResponse::has_elixir_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadMapInforResponse::set_has_elixir_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadMapInforResponse::clear_has_elixir_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadMapInforResponse::clear_elixir_count() {
  elixir_count_ = 0;
  clear_has_elixir_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::elixir_count() const {
  return elixir_count_;
}
inline void DownloadMapInforResponse::set_elixir_count(::google::protobuf::int32 value) {
  set_has_elixir_count();
  elixir_count_ = value;
}

// required int32 pvp_mark = 6;
inline bool DownloadMapInforResponse::has_pvp_mark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadMapInforResponse::set_has_pvp_mark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadMapInforResponse::clear_has_pvp_mark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadMapInforResponse::clear_pvp_mark() {
  pvp_mark_ = 0;
  clear_has_pvp_mark();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::pvp_mark() const {
  return pvp_mark_;
}
inline void DownloadMapInforResponse::set_pvp_mark(::google::protobuf::int32 value) {
  set_has_pvp_mark();
  pvp_mark_ = value;
}

// required int32 exp = 7;
inline bool DownloadMapInforResponse::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DownloadMapInforResponse::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DownloadMapInforResponse::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DownloadMapInforResponse::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::exp() const {
  return exp_;
}
inline void DownloadMapInforResponse::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 level = 8;
inline bool DownloadMapInforResponse::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DownloadMapInforResponse::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DownloadMapInforResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DownloadMapInforResponse::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::level() const {
  return level_;
}
inline void DownloadMapInforResponse::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .message.DownloadMapInforResponse.UserMapData userMapDataList = 9;
inline int DownloadMapInforResponse::usermapdatalist_size() const {
  return usermapdatalist_.size();
}
inline void DownloadMapInforResponse::clear_usermapdatalist() {
  usermapdatalist_.Clear();
}
inline const ::message::DownloadMapInforResponse_UserMapData& DownloadMapInforResponse::usermapdatalist(int index) const {
  return usermapdatalist_.Get(index);
}
inline ::message::DownloadMapInforResponse_UserMapData* DownloadMapInforResponse::mutable_usermapdatalist(int index) {
  return usermapdatalist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_UserMapData* DownloadMapInforResponse::add_usermapdatalist() {
  return usermapdatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData >&
DownloadMapInforResponse::usermapdatalist() const {
  return usermapdatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserMapData >*
DownloadMapInforResponse::mutable_usermapdatalist() {
  return &usermapdatalist_;
}

// repeated .message.DownloadMapInforResponse.UserCharacter userCharacterList = 10;
inline int DownloadMapInforResponse::usercharacterlist_size() const {
  return usercharacterlist_.size();
}
inline void DownloadMapInforResponse::clear_usercharacterlist() {
  usercharacterlist_.Clear();
}
inline const ::message::DownloadMapInforResponse_UserCharacter& DownloadMapInforResponse::usercharacterlist(int index) const {
  return usercharacterlist_.Get(index);
}
inline ::message::DownloadMapInforResponse_UserCharacter* DownloadMapInforResponse::mutable_usercharacterlist(int index) {
  return usercharacterlist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_UserCharacter* DownloadMapInforResponse::add_usercharacterlist() {
  return usercharacterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserCharacter >&
DownloadMapInforResponse::usercharacterlist() const {
  return usercharacterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_UserCharacter >*
DownloadMapInforResponse::mutable_usercharacterlist() {
  return &usercharacterlist_;
}

// repeated .message.DownloadMapInforResponse.Spell spellList = 11;
inline int DownloadMapInforResponse::spelllist_size() const {
  return spelllist_.size();
}
inline void DownloadMapInforResponse::clear_spelllist() {
  spelllist_.Clear();
}
inline const ::message::DownloadMapInforResponse_Spell& DownloadMapInforResponse::spelllist(int index) const {
  return spelllist_.Get(index);
}
inline ::message::DownloadMapInforResponse_Spell* DownloadMapInforResponse::mutable_spelllist(int index) {
  return spelllist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_Spell* DownloadMapInforResponse::add_spelllist() {
  return spelllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_Spell >&
DownloadMapInforResponse::spelllist() const {
  return spelllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_Spell >*
DownloadMapInforResponse::mutable_spelllist() {
  return &spelllist_;
}

// optional int64 shield_time = 12;
inline bool DownloadMapInforResponse::has_shield_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DownloadMapInforResponse::set_has_shield_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DownloadMapInforResponse::clear_has_shield_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DownloadMapInforResponse::clear_shield_time() {
  shield_time_ = GOOGLE_LONGLONG(0);
  clear_has_shield_time();
}
inline ::google::protobuf::int64 DownloadMapInforResponse::shield_time() const {
  return shield_time_;
}
inline void DownloadMapInforResponse::set_shield_time(::google::protobuf::int64 value) {
  set_has_shield_time();
  shield_time_ = value;
}

// optional int32 destroy_status = 13;
inline bool DownloadMapInforResponse::has_destroy_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DownloadMapInforResponse::set_has_destroy_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DownloadMapInforResponse::clear_has_destroy_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DownloadMapInforResponse::clear_destroy_status() {
  destroy_status_ = 0;
  clear_has_destroy_status();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::destroy_status() const {
  return destroy_status_;
}
inline void DownloadMapInforResponse::set_destroy_status(::google::protobuf::int32 value) {
  set_has_destroy_status();
  destroy_status_ = value;
}

// optional bool battle_request_flag = 14;
inline bool DownloadMapInforResponse::has_battle_request_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DownloadMapInforResponse::set_has_battle_request_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DownloadMapInforResponse::clear_has_battle_request_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DownloadMapInforResponse::clear_battle_request_flag() {
  battle_request_flag_ = false;
  clear_has_battle_request_flag();
}
inline bool DownloadMapInforResponse::battle_request_flag() const {
  return battle_request_flag_;
}
inline void DownloadMapInforResponse::set_battle_request_flag(bool value) {
  set_has_battle_request_flag();
  battle_request_flag_ = value;
}

// optional int32 battle_end_time = 15;
inline bool DownloadMapInforResponse::has_battle_end_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DownloadMapInforResponse::set_has_battle_end_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DownloadMapInforResponse::clear_has_battle_end_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DownloadMapInforResponse::clear_battle_end_time() {
  battle_end_time_ = 0;
  clear_has_battle_end_time();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::battle_end_time() const {
  return battle_end_time_;
}
inline void DownloadMapInforResponse::set_battle_end_time(::google::protobuf::int32 value) {
  set_has_battle_end_time();
  battle_end_time_ = value;
}

// repeated .message.DownloadMapInforResponse.BattleInfor battleInforList = 16;
inline int DownloadMapInforResponse::battleinforlist_size() const {
  return battleinforlist_.size();
}
inline void DownloadMapInforResponse::clear_battleinforlist() {
  battleinforlist_.Clear();
}
inline const ::message::DownloadMapInforResponse_BattleInfor& DownloadMapInforResponse::battleinforlist(int index) const {
  return battleinforlist_.Get(index);
}
inline ::message::DownloadMapInforResponse_BattleInfor* DownloadMapInforResponse::mutable_battleinforlist(int index) {
  return battleinforlist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_BattleInfor* DownloadMapInforResponse::add_battleinforlist() {
  return battleinforlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BattleInfor >&
DownloadMapInforResponse::battleinforlist() const {
  return battleinforlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BattleInfor >*
DownloadMapInforResponse::mutable_battleinforlist() {
  return &battleinforlist_;
}

// optional int32 gem_count = 17;
inline bool DownloadMapInforResponse::has_gem_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DownloadMapInforResponse::set_has_gem_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DownloadMapInforResponse::clear_has_gem_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DownloadMapInforResponse::clear_gem_count() {
  gem_count_ = 0;
  clear_has_gem_count();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::gem_count() const {
  return gem_count_;
}
inline void DownloadMapInforResponse::set_gem_count(::google::protobuf::int32 value) {
  set_has_gem_count();
  gem_count_ = value;
}

// repeated .message.DownloadMapInforResponse.BuildDestoryStatus BuildDistoryStatusList = 18;
inline int DownloadMapInforResponse::builddistorystatuslist_size() const {
  return builddistorystatuslist_.size();
}
inline void DownloadMapInforResponse::clear_builddistorystatuslist() {
  builddistorystatuslist_.Clear();
}
inline const ::message::DownloadMapInforResponse_BuildDestoryStatus& DownloadMapInforResponse::builddistorystatuslist(int index) const {
  return builddistorystatuslist_.Get(index);
}
inline ::message::DownloadMapInforResponse_BuildDestoryStatus* DownloadMapInforResponse::mutable_builddistorystatuslist(int index) {
  return builddistorystatuslist_.Mutable(index);
}
inline ::message::DownloadMapInforResponse_BuildDestoryStatus* DownloadMapInforResponse::add_builddistorystatuslist() {
  return builddistorystatuslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BuildDestoryStatus >&
DownloadMapInforResponse::builddistorystatuslist() const {
  return builddistorystatuslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DownloadMapInforResponse_BuildDestoryStatus >*
DownloadMapInforResponse::mutable_builddistorystatuslist() {
  return &builddistorystatuslist_;
}

// optional int32 battleMathingUseCount = 19;
inline bool DownloadMapInforResponse::has_battlemathingusecount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DownloadMapInforResponse::set_has_battlemathingusecount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DownloadMapInforResponse::clear_has_battlemathingusecount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DownloadMapInforResponse::clear_battlemathingusecount() {
  battlemathingusecount_ = 0;
  clear_has_battlemathingusecount();
}
inline ::google::protobuf::int32 DownloadMapInforResponse::battlemathingusecount() const {
  return battlemathingusecount_;
}
inline void DownloadMapInforResponse::set_battlemathingusecount(::google::protobuf::int32 value) {
  set_has_battlemathingusecount();
  battlemathingusecount_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DownloadMapInfor_2eproto__INCLUDED
