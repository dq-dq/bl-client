// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CancleBattle.proto

#ifndef PROTOBUF_CancleBattle_2eproto__INCLUDED
#define PROTOBUF_CancleBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CancleBattle_2eproto();
void protobuf_AssignDesc_CancleBattle_2eproto();
void protobuf_ShutdownFile_CancleBattle_2eproto();

class CancleBattleRequest;
class CancleBattleResponse;

// ===================================================================

class CancleBattleRequest : public ::google::protobuf::MessageLite {
 public:
  CancleBattleRequest();
  virtual ~CancleBattleRequest();
  
  CancleBattleRequest(const CancleBattleRequest& from);
  
  inline CancleBattleRequest& operator=(const CancleBattleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CancleBattleRequest& default_instance();
  
  void Swap(CancleBattleRequest* other);
  
  // implements Message ----------------------------------------------
  
  CancleBattleRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CancleBattleRequest& from);
  void MergeFrom(const CancleBattleRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string mailAddress = 1;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 1;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // @@protoc_insertion_point(class_scope:message.CancleBattleRequest)
 private:
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  
  ::std::string* mailaddress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_CancleBattle_2eproto();
  friend void protobuf_AssignDesc_CancleBattle_2eproto();
  friend void protobuf_ShutdownFile_CancleBattle_2eproto();
  
  void InitAsDefaultInstance();
  static CancleBattleRequest* default_instance_;
};
// -------------------------------------------------------------------

class CancleBattleResponse : public ::google::protobuf::MessageLite {
 public:
  CancleBattleResponse();
  virtual ~CancleBattleResponse();
  
  CancleBattleResponse(const CancleBattleResponse& from);
  
  inline CancleBattleResponse& operator=(const CancleBattleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CancleBattleResponse& default_instance();
  
  void Swap(CancleBattleResponse* other);
  
  // implements Message ----------------------------------------------
  
  CancleBattleResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CancleBattleResponse& from);
  void MergeFrom(const CancleBattleResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:message.CancleBattleResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CancleBattle_2eproto();
  friend void protobuf_AssignDesc_CancleBattle_2eproto();
  friend void protobuf_ShutdownFile_CancleBattle_2eproto();
  
  void InitAsDefaultInstance();
  static CancleBattleResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CancleBattleRequest

// required string mailAddress = 1;
inline bool CancleBattleRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancleBattleRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancleBattleRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancleBattleRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& CancleBattleRequest::mailaddress() const {
  return *mailaddress_;
}
inline void CancleBattleRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void CancleBattleRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void CancleBattleRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancleBattleRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* CancleBattleRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CancleBattleResponse

// optional sint32 result = 1 [default = 0];
inline bool CancleBattleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancleBattleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancleBattleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancleBattleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CancleBattleResponse::result() const {
  return result_;
}
inline void CancleBattleResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool CancleBattleResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CancleBattleResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CancleBattleResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CancleBattleResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& CancleBattleResponse::info() const {
  return *info_;
}
inline void CancleBattleResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CancleBattleResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CancleBattleResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancleBattleResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* CancleBattleResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CancleBattle_2eproto__INCLUDED
