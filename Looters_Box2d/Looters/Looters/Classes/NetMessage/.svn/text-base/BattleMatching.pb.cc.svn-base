// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleMatching.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_BattleMatching_2eproto() {
  delete BattleMatchingRequest::default_instance_;
  delete BattleMatchingResponse::default_instance_;
  delete BattleMatchingResponse_UserMapData::default_instance_;
  delete BattleMatchingResponse_UserMapData_Clans::default_instance_;
  delete BattleMatchingResponse_AttackerSoldiersAndSpell::default_instance_;
  delete BattleMatchingResponse_BuildDestoryStatus::default_instance_;
}

void protobuf_AddDesc_BattleMatching_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  BattleMatchingRequest::default_instance_ = new BattleMatchingRequest();
  BattleMatchingResponse::default_instance_ = new BattleMatchingResponse();
  BattleMatchingResponse_UserMapData::default_instance_ = new BattleMatchingResponse_UserMapData();
  BattleMatchingResponse_UserMapData_Clans::default_instance_ = new BattleMatchingResponse_UserMapData_Clans();
  BattleMatchingResponse_AttackerSoldiersAndSpell::default_instance_ = new BattleMatchingResponse_AttackerSoldiersAndSpell();
  BattleMatchingResponse_BuildDestoryStatus::default_instance_ = new BattleMatchingResponse_BuildDestoryStatus();
  BattleMatchingRequest::default_instance_->InitAsDefaultInstance();
  BattleMatchingResponse::default_instance_->InitAsDefaultInstance();
  BattleMatchingResponse_UserMapData::default_instance_->InitAsDefaultInstance();
  BattleMatchingResponse_UserMapData_Clans::default_instance_->InitAsDefaultInstance();
  BattleMatchingResponse_AttackerSoldiersAndSpell::default_instance_->InitAsDefaultInstance();
  BattleMatchingResponse_BuildDestoryStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleMatching_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleMatching_2eproto {
  StaticDescriptorInitializer_BattleMatching_2eproto() {
    protobuf_AddDesc_BattleMatching_2eproto();
  }
} static_descriptor_initializer_BattleMatching_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BattleMatchingRequest::kMailAddressFieldNumber;
const int BattleMatchingRequest::kPreviousMailAddressFieldNumber;
const int BattleMatchingRequest::kStrMd5FieldNumber;
const int BattleMatchingRequest::kBattleStatusFieldNumber;
#endif  // !_MSC_VER

BattleMatchingRequest::BattleMatchingRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingRequest::InitAsDefaultInstance() {
}

BattleMatchingRequest::BattleMatchingRequest(const BattleMatchingRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previousmailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingRequest::~BattleMatchingRequest() {
  SharedDtor();
}

void BattleMatchingRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (previousmailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete previousmailaddress_;
  }
  if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete str_md5_;
  }
  if (this != default_instance_) {
  }
}

void BattleMatchingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingRequest& BattleMatchingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingRequest* BattleMatchingRequest::default_instance_ = NULL;

BattleMatchingRequest* BattleMatchingRequest::New() const {
  return new BattleMatchingRequest;
}

void BattleMatchingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    if (has_previousmailaddress()) {
      if (previousmailaddress_ != &::google::protobuf::internal::kEmptyString) {
        previousmailaddress_->clear();
      }
    }
    if (has_str_md5()) {
      if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
        str_md5_->clear();
      }
    }
    battle_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_previousMailAddress;
        break;
      }
      
      // optional string previousMailAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previousMailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousmailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_md5;
        break;
      }
      
      // optional string str_md5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_status;
        break;
      }
      
      // optional int32 battle_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_status_)));
          set_has_battle_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // optional string previousMailAddress = 2;
  if (has_previousmailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->previousmailaddress(), output);
  }
  
  // optional string str_md5 = 3;
  if (has_str_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_md5(), output);
  }
  
  // optional int32 battle_status = 4;
  if (has_battle_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_status(), output);
  }
  
}

int BattleMatchingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // optional string previousMailAddress = 2;
    if (has_previousmailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previousmailaddress());
    }
    
    // optional string str_md5 = 3;
    if (has_str_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_md5());
    }
    
    // optional int32 battle_status = 4;
    if (has_battle_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_status());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingRequest*>(&from));
}

void BattleMatchingRequest::MergeFrom(const BattleMatchingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_previousmailaddress()) {
      set_previousmailaddress(from.previousmailaddress());
    }
    if (from.has_str_md5()) {
      set_str_md5(from.str_md5());
    }
    if (from.has_battle_status()) {
      set_battle_status(from.battle_status());
    }
  }
}

void BattleMatchingRequest::CopyFrom(const BattleMatchingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BattleMatchingRequest::Swap(BattleMatchingRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(previousmailaddress_, other->previousmailaddress_);
    std::swap(str_md5_, other->str_md5_);
    std::swap(battle_status_, other->battle_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingRequest::GetTypeName() const {
  return "message.BattleMatchingRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleMatchingResponse_UserMapData_Clans::kCharacterIdFieldNumber;
const int BattleMatchingResponse_UserMapData_Clans::kCharacterLevelFieldNumber;
const int BattleMatchingResponse_UserMapData_Clans::kFinishedProduceCountFieldNumber;
#endif  // !_MSC_VER

BattleMatchingResponse_UserMapData_Clans::BattleMatchingResponse_UserMapData_Clans()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingResponse_UserMapData_Clans::InitAsDefaultInstance() {
}

BattleMatchingResponse_UserMapData_Clans::BattleMatchingResponse_UserMapData_Clans(const BattleMatchingResponse_UserMapData_Clans& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingResponse_UserMapData_Clans::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0;
  character_level_ = 0;
  finished_produce_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingResponse_UserMapData_Clans::~BattleMatchingResponse_UserMapData_Clans() {
  SharedDtor();
}

void BattleMatchingResponse_UserMapData_Clans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleMatchingResponse_UserMapData_Clans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingResponse_UserMapData_Clans& BattleMatchingResponse_UserMapData_Clans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingResponse_UserMapData_Clans* BattleMatchingResponse_UserMapData_Clans::default_instance_ = NULL;

BattleMatchingResponse_UserMapData_Clans* BattleMatchingResponse_UserMapData_Clans::New() const {
  return new BattleMatchingResponse_UserMapData_Clans;
}

void BattleMatchingResponse_UserMapData_Clans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0;
    character_level_ = 0;
    finished_produce_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingResponse_UserMapData_Clans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_level;
        break;
      }
      
      // optional int32 character_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished_produce_count;
        break;
      }
      
      // optional int32 finished_produce_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_produce_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_produce_count_)));
          set_has_finished_produce_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingResponse_UserMapData_Clans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_id(), output);
  }
  
  // optional int32 character_level = 2;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->character_level(), output);
  }
  
  // optional int32 finished_produce_count = 3;
  if (has_finished_produce_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finished_produce_count(), output);
  }
  
}

int BattleMatchingResponse_UserMapData_Clans::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }
    
    // optional int32 character_level = 2;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }
    
    // optional int32 finished_produce_count = 3;
    if (has_finished_produce_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_produce_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingResponse_UserMapData_Clans::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingResponse_UserMapData_Clans*>(&from));
}

void BattleMatchingResponse_UserMapData_Clans::MergeFrom(const BattleMatchingResponse_UserMapData_Clans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_finished_produce_count()) {
      set_finished_produce_count(from.finished_produce_count());
    }
  }
}

void BattleMatchingResponse_UserMapData_Clans::CopyFrom(const BattleMatchingResponse_UserMapData_Clans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingResponse_UserMapData_Clans::IsInitialized() const {
  
  return true;
}

void BattleMatchingResponse_UserMapData_Clans::Swap(BattleMatchingResponse_UserMapData_Clans* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(character_level_, other->character_level_);
    std::swap(finished_produce_count_, other->finished_produce_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingResponse_UserMapData_Clans::GetTypeName() const {
  return "message.BattleMatchingResponse.UserMapData.Clans";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleMatchingResponse_UserMapData::kMapIndexXFieldNumber;
const int BattleMatchingResponse_UserMapData::kUniquenessBuildIdFieldNumber;
const int BattleMatchingResponse_UserMapData::kStatusFieldNumber;
const int BattleMatchingResponse_UserMapData::kBuildingIdFieldNumber;
const int BattleMatchingResponse_UserMapData::kBuildingLevelFieldNumber;
const int BattleMatchingResponse_UserMapData::kMapIndexYFieldNumber;
const int BattleMatchingResponse_UserMapData::kClansListFieldNumber;
const int BattleMatchingResponse_UserMapData::kCollectCountFieldNumber;
const int BattleMatchingResponse_UserMapData::kSecondElixirCountFieldNumber;
const int BattleMatchingResponse_UserMapData::kBuildingStatusFieldNumber;
#endif  // !_MSC_VER

BattleMatchingResponse_UserMapData::BattleMatchingResponse_UserMapData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingResponse_UserMapData::InitAsDefaultInstance() {
}

BattleMatchingResponse_UserMapData::BattleMatchingResponse_UserMapData(const BattleMatchingResponse_UserMapData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingResponse_UserMapData::SharedCtor() {
  _cached_size_ = 0;
  map_index_x_ = 0;
  uniqueness_build_id_ = 0;
  status_ = 0;
  building_id_ = 0;
  building_level_ = 0;
  map_index_y_ = 0;
  collect_count_ = 0;
  second_elixir_count_ = 0;
  building_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingResponse_UserMapData::~BattleMatchingResponse_UserMapData() {
  SharedDtor();
}

void BattleMatchingResponse_UserMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleMatchingResponse_UserMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingResponse_UserMapData& BattleMatchingResponse_UserMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingResponse_UserMapData* BattleMatchingResponse_UserMapData::default_instance_ = NULL;

BattleMatchingResponse_UserMapData* BattleMatchingResponse_UserMapData::New() const {
  return new BattleMatchingResponse_UserMapData;
}

void BattleMatchingResponse_UserMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_index_x_ = 0;
    uniqueness_build_id_ = 0;
    status_ = 0;
    building_id_ = 0;
    building_level_ = 0;
    map_index_y_ = 0;
    collect_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    second_elixir_count_ = 0;
    building_status_ = 0;
  }
  clanslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingResponse_UserMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_index_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_x_)));
          set_has_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqueness_build_id;
        break;
      }
      
      // optional int32 uniqueness_build_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueness_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueness_build_id_)));
          set_has_uniqueness_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_building_id;
        break;
      }
      
      // optional int32 building_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Building_level;
        break;
      }
      
      // optional int32 Building_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Building_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_level_)));
          set_has_building_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_map_index_y;
        break;
      }
      
      // optional int32 map_index_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_y_)));
          set_has_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clansList;
        break;
      }
      
      // repeated .message.BattleMatchingResponse.UserMapData.Clans clansList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clansList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clanslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clansList;
        if (input->ExpectTag(64)) goto parse_collect_count;
        break;
      }
      
      // optional int32 collect_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_count_)));
          set_has_collect_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_second_elixir_count;
        break;
      }
      
      // optional int32 second_elixir_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_elixir_count_)));
          set_has_second_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_building_status;
        break;
      }
      
      // optional int32 building_status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_status_)));
          set_has_building_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingResponse_UserMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_index_x = 1;
  if (has_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_index_x(), output);
  }
  
  // optional int32 uniqueness_build_id = 2;
  if (has_uniqueness_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uniqueness_build_id(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // optional int32 building_id = 4;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->building_id(), output);
  }
  
  // optional int32 Building_level = 5;
  if (has_building_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->building_level(), output);
  }
  
  // optional int32 map_index_y = 6;
  if (has_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_index_y(), output);
  }
  
  // repeated .message.BattleMatchingResponse.UserMapData.Clans clansList = 7;
  for (int i = 0; i < this->clanslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->clanslist(i), output);
  }
  
  // optional int32 collect_count = 8;
  if (has_collect_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->collect_count(), output);
  }
  
  // optional int32 second_elixir_count = 9;
  if (has_second_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->second_elixir_count(), output);
  }
  
  // optional int32 building_status = 10;
  if (has_building_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->building_status(), output);
  }
  
}

int BattleMatchingResponse_UserMapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_index_x = 1;
    if (has_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_x());
    }
    
    // optional int32 uniqueness_build_id = 2;
    if (has_uniqueness_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueness_build_id());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 building_id = 4;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional int32 Building_level = 5;
    if (has_building_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_level());
    }
    
    // optional int32 map_index_y = 6;
    if (has_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_y());
    }
    
    // optional int32 collect_count = 8;
    if (has_collect_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 second_elixir_count = 9;
    if (has_second_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_elixir_count());
    }
    
    // optional int32 building_status = 10;
    if (has_building_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_status());
    }
    
  }
  // repeated .message.BattleMatchingResponse.UserMapData.Clans clansList = 7;
  total_size += 1 * this->clanslist_size();
  for (int i = 0; i < this->clanslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clanslist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingResponse_UserMapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingResponse_UserMapData*>(&from));
}

void BattleMatchingResponse_UserMapData::MergeFrom(const BattleMatchingResponse_UserMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  clanslist_.MergeFrom(from.clanslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_index_x()) {
      set_map_index_x(from.map_index_x());
    }
    if (from.has_uniqueness_build_id()) {
      set_uniqueness_build_id(from.uniqueness_build_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_building_level()) {
      set_building_level(from.building_level());
    }
    if (from.has_map_index_y()) {
      set_map_index_y(from.map_index_y());
    }
    if (from.has_collect_count()) {
      set_collect_count(from.collect_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_second_elixir_count()) {
      set_second_elixir_count(from.second_elixir_count());
    }
    if (from.has_building_status()) {
      set_building_status(from.building_status());
    }
  }
}

void BattleMatchingResponse_UserMapData::CopyFrom(const BattleMatchingResponse_UserMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingResponse_UserMapData::IsInitialized() const {
  
  return true;
}

void BattleMatchingResponse_UserMapData::Swap(BattleMatchingResponse_UserMapData* other) {
  if (other != this) {
    std::swap(map_index_x_, other->map_index_x_);
    std::swap(uniqueness_build_id_, other->uniqueness_build_id_);
    std::swap(status_, other->status_);
    std::swap(building_id_, other->building_id_);
    std::swap(building_level_, other->building_level_);
    std::swap(map_index_y_, other->map_index_y_);
    clanslist_.Swap(&other->clanslist_);
    std::swap(collect_count_, other->collect_count_);
    std::swap(second_elixir_count_, other->second_elixir_count_);
    std::swap(building_status_, other->building_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingResponse_UserMapData::GetTypeName() const {
  return "message.BattleMatchingResponse.UserMapData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleMatchingResponse_AttackerSoldiersAndSpell::kCharacterIdOrSpellIdFieldNumber;
const int BattleMatchingResponse_AttackerSoldiersAndSpell::kCharacterOrSpellLevelFieldNumber;
const int BattleMatchingResponse_AttackerSoldiersAndSpell::kCountFieldNumber;
const int BattleMatchingResponse_AttackerSoldiersAndSpell::kUsedTypeFieldNumber;
#endif  // !_MSC_VER

BattleMatchingResponse_AttackerSoldiersAndSpell::BattleMatchingResponse_AttackerSoldiersAndSpell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::InitAsDefaultInstance() {
}

BattleMatchingResponse_AttackerSoldiersAndSpell::BattleMatchingResponse_AttackerSoldiersAndSpell(const BattleMatchingResponse_AttackerSoldiersAndSpell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::SharedCtor() {
  _cached_size_ = 0;
  characteridorspellid_ = 0;
  characterorspelllevel_ = 0;
  count_ = 0;
  used_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingResponse_AttackerSoldiersAndSpell::~BattleMatchingResponse_AttackerSoldiersAndSpell() {
  SharedDtor();
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingResponse_AttackerSoldiersAndSpell& BattleMatchingResponse_AttackerSoldiersAndSpell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingResponse_AttackerSoldiersAndSpell* BattleMatchingResponse_AttackerSoldiersAndSpell::default_instance_ = NULL;

BattleMatchingResponse_AttackerSoldiersAndSpell* BattleMatchingResponse_AttackerSoldiersAndSpell::New() const {
  return new BattleMatchingResponse_AttackerSoldiersAndSpell;
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    characteridorspellid_ = 0;
    characterorspelllevel_ = 0;
    count_ = 0;
    used_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingResponse_AttackerSoldiersAndSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 characterIdOrSpellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &characteridorspellid_)));
          set_has_characteridorspellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_characterOrSpellLevel;
        break;
      }
      
      // optional int32 characterOrSpellLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_characterOrSpellLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &characterorspelllevel_)));
          set_has_characterorspelllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_type;
        break;
      }
      
      // optional int32 used_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_type_)));
          set_has_used_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 characterIdOrSpellId = 1;
  if (has_characteridorspellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->characteridorspellid(), output);
  }
  
  // optional int32 characterOrSpellLevel = 2;
  if (has_characterorspelllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->characterorspelllevel(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional int32 used_type = 4;
  if (has_used_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->used_type(), output);
  }
  
}

int BattleMatchingResponse_AttackerSoldiersAndSpell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 characterIdOrSpellId = 1;
    if (has_characteridorspellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->characteridorspellid());
    }
    
    // optional int32 characterOrSpellLevel = 2;
    if (has_characterorspelllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->characterorspelllevel());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 used_type = 4;
    if (has_used_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_type());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingResponse_AttackerSoldiersAndSpell*>(&from));
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::MergeFrom(const BattleMatchingResponse_AttackerSoldiersAndSpell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_characteridorspellid()) {
      set_characteridorspellid(from.characteridorspellid());
    }
    if (from.has_characterorspelllevel()) {
      set_characterorspelllevel(from.characterorspelllevel());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_used_type()) {
      set_used_type(from.used_type());
    }
  }
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::CopyFrom(const BattleMatchingResponse_AttackerSoldiersAndSpell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingResponse_AttackerSoldiersAndSpell::IsInitialized() const {
  
  return true;
}

void BattleMatchingResponse_AttackerSoldiersAndSpell::Swap(BattleMatchingResponse_AttackerSoldiersAndSpell* other) {
  if (other != this) {
    std::swap(characteridorspellid_, other->characteridorspellid_);
    std::swap(characterorspelllevel_, other->characterorspelllevel_);
    std::swap(count_, other->count_);
    std::swap(used_type_, other->used_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingResponse_AttackerSoldiersAndSpell::GetTypeName() const {
  return "message.BattleMatchingResponse.AttackerSoldiersAndSpell";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleMatchingResponse_BuildDestoryStatus::kBuildingIdFieldNumber;
const int BattleMatchingResponse_BuildDestoryStatus::kUuidFieldNumber;
const int BattleMatchingResponse_BuildDestoryStatus::kMapIndexXFieldNumber;
const int BattleMatchingResponse_BuildDestoryStatus::kMapIndexYFieldNumber;
#endif  // !_MSC_VER

BattleMatchingResponse_BuildDestoryStatus::BattleMatchingResponse_BuildDestoryStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingResponse_BuildDestoryStatus::InitAsDefaultInstance() {
}

BattleMatchingResponse_BuildDestoryStatus::BattleMatchingResponse_BuildDestoryStatus(const BattleMatchingResponse_BuildDestoryStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingResponse_BuildDestoryStatus::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0;
  uuid_ = 0;
  map_index_x_ = 0;
  map_index_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingResponse_BuildDestoryStatus::~BattleMatchingResponse_BuildDestoryStatus() {
  SharedDtor();
}

void BattleMatchingResponse_BuildDestoryStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleMatchingResponse_BuildDestoryStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingResponse_BuildDestoryStatus& BattleMatchingResponse_BuildDestoryStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingResponse_BuildDestoryStatus* BattleMatchingResponse_BuildDestoryStatus::default_instance_ = NULL;

BattleMatchingResponse_BuildDestoryStatus* BattleMatchingResponse_BuildDestoryStatus::New() const {
  return new BattleMatchingResponse_BuildDestoryStatus;
}

void BattleMatchingResponse_BuildDestoryStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0;
    uuid_ = 0;
    map_index_x_ = 0;
    map_index_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingResponse_BuildDestoryStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }
      
      // optional int32 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_index_x;
        break;
      }
      
      // optional int32 map_index_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_x_)));
          set_has_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_index_y;
        break;
      }
      
      // optional int32 map_index_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_y_)));
          set_has_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingResponse_BuildDestoryStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->building_id(), output);
  }
  
  // optional int32 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uuid(), output);
  }
  
  // optional int32 map_index_x = 3;
  if (has_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_index_x(), output);
  }
  
  // optional int32 map_index_y = 4;
  if (has_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_index_y(), output);
  }
  
}

int BattleMatchingResponse_BuildDestoryStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional int32 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }
    
    // optional int32 map_index_x = 3;
    if (has_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_x());
    }
    
    // optional int32 map_index_y = 4;
    if (has_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_y());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingResponse_BuildDestoryStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingResponse_BuildDestoryStatus*>(&from));
}

void BattleMatchingResponse_BuildDestoryStatus::MergeFrom(const BattleMatchingResponse_BuildDestoryStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_map_index_x()) {
      set_map_index_x(from.map_index_x());
    }
    if (from.has_map_index_y()) {
      set_map_index_y(from.map_index_y());
    }
  }
}

void BattleMatchingResponse_BuildDestoryStatus::CopyFrom(const BattleMatchingResponse_BuildDestoryStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingResponse_BuildDestoryStatus::IsInitialized() const {
  
  return true;
}

void BattleMatchingResponse_BuildDestoryStatus::Swap(BattleMatchingResponse_BuildDestoryStatus* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(map_index_x_, other->map_index_x_);
    std::swap(map_index_y_, other->map_index_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingResponse_BuildDestoryStatus::GetTypeName() const {
  return "message.BattleMatchingResponse.BuildDestoryStatus";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleMatchingResponse::kResultFieldNumber;
const int BattleMatchingResponse::kInfoFieldNumber;
const int BattleMatchingResponse::kDefencerMailaddressFieldNumber;
const int BattleMatchingResponse::kNickNameFieldNumber;
const int BattleMatchingResponse::kGoldenCountFieldNumber;
const int BattleMatchingResponse::kElixirCountFieldNumber;
const int BattleMatchingResponse::kPvpMarkFieldNumber;
const int BattleMatchingResponse::kLevelFieldNumber;
const int BattleMatchingResponse::kUserMapDataListFieldNumber;
const int BattleMatchingResponse::kSoldiersAndSpellListFieldNumber;
const int BattleMatchingResponse::kUsedClansCharacterCountFieldNumber;
const int BattleMatchingResponse::kLosePvpMarkFieldNumber;
const int BattleMatchingResponse::kBuildDistoryStatusListFieldNumber;
#endif  // !_MSC_VER

BattleMatchingResponse::BattleMatchingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleMatchingResponse::InitAsDefaultInstance() {
}

BattleMatchingResponse::BattleMatchingResponse(const BattleMatchingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleMatchingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defencer_mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golden_count_ = 0;
  elixir_count_ = 0;
  pvp_mark_ = 0;
  level_ = 0;
  used_clans_character_count_ = 0;
  lose_pvp_mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatchingResponse::~BattleMatchingResponse() {
  SharedDtor();
}

void BattleMatchingResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (defencer_mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete defencer_mailaddress_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void BattleMatchingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleMatchingResponse& BattleMatchingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMatching_2eproto();  return *default_instance_;
}

BattleMatchingResponse* BattleMatchingResponse::default_instance_ = NULL;

BattleMatchingResponse* BattleMatchingResponse::New() const {
  return new BattleMatchingResponse;
}

void BattleMatchingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_defencer_mailaddress()) {
      if (defencer_mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        defencer_mailaddress_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    golden_count_ = 0;
    elixir_count_ = 0;
    pvp_mark_ = 0;
    level_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    used_clans_character_count_ = 0;
    lose_pvp_mark_ = 0;
  }
  usermapdatalist_.Clear();
  soldiersandspelllist_.Clear();
  builddistorystatuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleMatchingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defencer_mailaddress;
        break;
      }
      
      // optional string defencer_mailaddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defencer_mailaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defencer_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }
      
      // optional string nick_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_golden_count;
        break;
      }
      
      // optional int32 golden_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_count_)));
          set_has_golden_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_elixir_count;
        break;
      }
      
      // optional int32 elixir_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elixir_count_)));
          set_has_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pvp_mark;
        break;
      }
      
      // optional int32 pvp_mark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_mark_)));
          set_has_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userMapDataList;
        break;
      }
      
      // repeated .message.BattleMatchingResponse.UserMapData userMapDataList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userMapDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermapdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userMapDataList;
        if (input->ExpectTag(82)) goto parse_soldiersAndSpellList;
        break;
      }
      
      // repeated .message.BattleMatchingResponse.AttackerSoldiersAndSpell soldiersAndSpellList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiersAndSpellList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiersandspelllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_soldiersAndSpellList;
        if (input->ExpectTag(88)) goto parse_used_clans_character_count;
        break;
      }
      
      // optional int32 used_clans_character_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_clans_character_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_clans_character_count_)));
          set_has_used_clans_character_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lose_pvp_mark;
        break;
      }
      
      // optional int32 lose_pvp_mark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_pvp_mark_)));
          set_has_lose_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BuildDistoryStatusList;
        break;
      }
      
      // repeated .message.BattleMatchingResponse.BuildDestoryStatus BuildDistoryStatusList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuildDistoryStatusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builddistorystatuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BuildDistoryStatusList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleMatchingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // optional string defencer_mailaddress = 3;
  if (has_defencer_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->defencer_mailaddress(), output);
  }
  
  // optional string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nick_name(), output);
  }
  
  // optional int32 golden_count = 5;
  if (has_golden_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->golden_count(), output);
  }
  
  // optional int32 elixir_count = 6;
  if (has_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->elixir_count(), output);
  }
  
  // optional int32 pvp_mark = 7;
  if (has_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pvp_mark(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // repeated .message.BattleMatchingResponse.UserMapData userMapDataList = 9;
  for (int i = 0; i < this->usermapdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->usermapdatalist(i), output);
  }
  
  // repeated .message.BattleMatchingResponse.AttackerSoldiersAndSpell soldiersAndSpellList = 10;
  for (int i = 0; i < this->soldiersandspelllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->soldiersandspelllist(i), output);
  }
  
  // optional int32 used_clans_character_count = 11;
  if (has_used_clans_character_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->used_clans_character_count(), output);
  }
  
  // optional int32 lose_pvp_mark = 12;
  if (has_lose_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lose_pvp_mark(), output);
  }
  
  // repeated .message.BattleMatchingResponse.BuildDestoryStatus BuildDistoryStatusList = 13;
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->builddistorystatuslist(i), output);
  }
  
}

int BattleMatchingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // optional string defencer_mailaddress = 3;
    if (has_defencer_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencer_mailaddress());
    }
    
    // optional string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }
    
    // optional int32 golden_count = 5;
    if (has_golden_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden_count());
    }
    
    // optional int32 elixir_count = 6;
    if (has_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elixir_count());
    }
    
    // optional int32 pvp_mark = 7;
    if (has_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_mark());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 used_clans_character_count = 11;
    if (has_used_clans_character_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_clans_character_count());
    }
    
    // optional int32 lose_pvp_mark = 12;
    if (has_lose_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_pvp_mark());
    }
    
  }
  // repeated .message.BattleMatchingResponse.UserMapData userMapDataList = 9;
  total_size += 1 * this->usermapdatalist_size();
  for (int i = 0; i < this->usermapdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermapdatalist(i));
  }
  
  // repeated .message.BattleMatchingResponse.AttackerSoldiersAndSpell soldiersAndSpellList = 10;
  total_size += 1 * this->soldiersandspelllist_size();
  for (int i = 0; i < this->soldiersandspelllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiersandspelllist(i));
  }
  
  // repeated .message.BattleMatchingResponse.BuildDestoryStatus BuildDistoryStatusList = 13;
  total_size += 1 * this->builddistorystatuslist_size();
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builddistorystatuslist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatchingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleMatchingResponse*>(&from));
}

void BattleMatchingResponse::MergeFrom(const BattleMatchingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermapdatalist_.MergeFrom(from.usermapdatalist_);
  soldiersandspelllist_.MergeFrom(from.soldiersandspelllist_);
  builddistorystatuslist_.MergeFrom(from.builddistorystatuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_defencer_mailaddress()) {
      set_defencer_mailaddress(from.defencer_mailaddress());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_golden_count()) {
      set_golden_count(from.golden_count());
    }
    if (from.has_elixir_count()) {
      set_elixir_count(from.elixir_count());
    }
    if (from.has_pvp_mark()) {
      set_pvp_mark(from.pvp_mark());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_used_clans_character_count()) {
      set_used_clans_character_count(from.used_clans_character_count());
    }
    if (from.has_lose_pvp_mark()) {
      set_lose_pvp_mark(from.lose_pvp_mark());
    }
  }
}

void BattleMatchingResponse::CopyFrom(const BattleMatchingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatchingResponse::IsInitialized() const {
  
  return true;
}

void BattleMatchingResponse::Swap(BattleMatchingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(defencer_mailaddress_, other->defencer_mailaddress_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(golden_count_, other->golden_count_);
    std::swap(elixir_count_, other->elixir_count_);
    std::swap(pvp_mark_, other->pvp_mark_);
    std::swap(level_, other->level_);
    usermapdatalist_.Swap(&other->usermapdatalist_);
    soldiersandspelllist_.Swap(&other->soldiersandspelllist_);
    std::swap(used_clans_character_count_, other->used_clans_character_count_);
    std::swap(lose_pvp_mark_, other->lose_pvp_mark_);
    builddistorystatuslist_.Swap(&other->builddistorystatuslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleMatchingResponse::GetTypeName() const {
  return "message.BattleMatchingResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
