// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UploadBattleFlow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UploadBattleFlow_2eproto() {
  delete UploadBattleFlowRequest::default_instance_;
  delete UploadBattleFlowRequest_IoData::default_instance_;
  delete UploadBattleFlowResponse::default_instance_;
}

void protobuf_AddDesc_UploadBattleFlow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UploadBattleFlowRequest::default_instance_ = new UploadBattleFlowRequest();
  UploadBattleFlowRequest_IoData::default_instance_ = new UploadBattleFlowRequest_IoData();
  UploadBattleFlowResponse::default_instance_ = new UploadBattleFlowResponse();
  UploadBattleFlowRequest::default_instance_->InitAsDefaultInstance();
  UploadBattleFlowRequest_IoData::default_instance_->InitAsDefaultInstance();
  UploadBattleFlowResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UploadBattleFlow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UploadBattleFlow_2eproto {
  StaticDescriptorInitializer_UploadBattleFlow_2eproto() {
    protobuf_AddDesc_UploadBattleFlow_2eproto();
  }
} static_descriptor_initializer_UploadBattleFlow_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UploadBattleFlowRequest_IoData::kDataFieldNumber;
#endif  // !_MSC_VER

UploadBattleFlowRequest_IoData::UploadBattleFlowRequest_IoData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleFlowRequest_IoData::InitAsDefaultInstance() {
}

UploadBattleFlowRequest_IoData::UploadBattleFlowRequest_IoData(const UploadBattleFlowRequest_IoData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleFlowRequest_IoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleFlowRequest_IoData::~UploadBattleFlowRequest_IoData() {
  SharedDtor();
}

void UploadBattleFlowRequest_IoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadBattleFlowRequest_IoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleFlowRequest_IoData& UploadBattleFlowRequest_IoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleFlow_2eproto();  return *default_instance_;
}

UploadBattleFlowRequest_IoData* UploadBattleFlowRequest_IoData::default_instance_ = NULL;

UploadBattleFlowRequest_IoData* UploadBattleFlowRequest_IoData::New() const {
  return new UploadBattleFlowRequest_IoData;
}

void UploadBattleFlowRequest_IoData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleFlowRequest_IoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleFlowRequest_IoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }
  
}

int UploadBattleFlowRequest_IoData::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleFlowRequest_IoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleFlowRequest_IoData*>(&from));
}

void UploadBattleFlowRequest_IoData::MergeFrom(const UploadBattleFlowRequest_IoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
}

void UploadBattleFlowRequest_IoData::CopyFrom(const UploadBattleFlowRequest_IoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleFlowRequest_IoData::IsInitialized() const {
  
  return true;
}

void UploadBattleFlowRequest_IoData::Swap(UploadBattleFlowRequest_IoData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleFlowRequest_IoData::GetTypeName() const {
  return "message.UploadBattleFlowRequest.IoData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UploadBattleFlowRequest::kDefenceMailAddressFieldNumber;
const int UploadBattleFlowRequest::kAttackMailAddressFieldNumber;
const int UploadBattleFlowRequest::kBattleIdFieldNumber;
const int UploadBattleFlowRequest::kIoDataFieldNumber;
const int UploadBattleFlowRequest::kMaxIndexFieldNumber;
const int UploadBattleFlowRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

UploadBattleFlowRequest::UploadBattleFlowRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleFlowRequest::InitAsDefaultInstance() {
  iodata_ = const_cast< ::message::UploadBattleFlowRequest_IoData*>(&::message::UploadBattleFlowRequest_IoData::default_instance());
}

UploadBattleFlowRequest::UploadBattleFlowRequest(const UploadBattleFlowRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleFlowRequest::SharedCtor() {
  _cached_size_ = 0;
  defencemailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackmailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battleid_ = 0;
  iodata_ = NULL;
  maxindex_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleFlowRequest::~UploadBattleFlowRequest() {
  SharedDtor();
}

void UploadBattleFlowRequest::SharedDtor() {
  if (defencemailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete defencemailaddress_;
  }
  if (attackmailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete attackmailaddress_;
  }
  if (this != default_instance_) {
    delete iodata_;
  }
}

void UploadBattleFlowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleFlowRequest& UploadBattleFlowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleFlow_2eproto();  return *default_instance_;
}

UploadBattleFlowRequest* UploadBattleFlowRequest::default_instance_ = NULL;

UploadBattleFlowRequest* UploadBattleFlowRequest::New() const {
  return new UploadBattleFlowRequest;
}

void UploadBattleFlowRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_defencemailaddress()) {
      if (defencemailaddress_ != &::google::protobuf::internal::kEmptyString) {
        defencemailaddress_->clear();
      }
    }
    if (has_attackmailaddress()) {
      if (attackmailaddress_ != &::google::protobuf::internal::kEmptyString) {
        attackmailaddress_->clear();
      }
    }
    battleid_ = 0;
    if (has_iodata()) {
      if (iodata_ != NULL) iodata_->::message::UploadBattleFlowRequest_IoData::Clear();
    }
    maxindex_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleFlowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string defenceMailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defencemailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attackMailAddress;
        break;
      }
      
      // required string attackMailAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackMailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackmailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleId;
        break;
      }
      
      // optional int32 battleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ioData;
        break;
      }
      
      // required .message.UploadBattleFlowRequest.IoData ioData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxIndex;
        break;
      }
      
      // optional sint32 maxIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxindex_)));
          set_has_maxindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }
      
      // optional sint32 index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleFlowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string defenceMailAddress = 1;
  if (has_defencemailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->defencemailaddress(), output);
  }
  
  // required string attackMailAddress = 2;
  if (has_attackmailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attackmailaddress(), output);
  }
  
  // optional int32 battleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battleid(), output);
  }
  
  // required .message.UploadBattleFlowRequest.IoData ioData = 4;
  if (has_iodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->iodata(), output);
  }
  
  // optional sint32 maxIndex = 5;
  if (has_maxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->maxindex(), output);
  }
  
  // optional sint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->index(), output);
  }
  
}

int UploadBattleFlowRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string defenceMailAddress = 1;
    if (has_defencemailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencemailaddress());
    }
    
    // required string attackMailAddress = 2;
    if (has_attackmailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackmailaddress());
    }
    
    // optional int32 battleId = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }
    
    // required .message.UploadBattleFlowRequest.IoData ioData = 4;
    if (has_iodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iodata());
    }
    
    // optional sint32 maxIndex = 5;
    if (has_maxindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxindex());
    }
    
    // optional sint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->index());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleFlowRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleFlowRequest*>(&from));
}

void UploadBattleFlowRequest::MergeFrom(const UploadBattleFlowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defencemailaddress()) {
      set_defencemailaddress(from.defencemailaddress());
    }
    if (from.has_attackmailaddress()) {
      set_attackmailaddress(from.attackmailaddress());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_iodata()) {
      mutable_iodata()->::message::UploadBattleFlowRequest_IoData::MergeFrom(from.iodata());
    }
    if (from.has_maxindex()) {
      set_maxindex(from.maxindex());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void UploadBattleFlowRequest::CopyFrom(const UploadBattleFlowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleFlowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void UploadBattleFlowRequest::Swap(UploadBattleFlowRequest* other) {
  if (other != this) {
    std::swap(defencemailaddress_, other->defencemailaddress_);
    std::swap(attackmailaddress_, other->attackmailaddress_);
    std::swap(battleid_, other->battleid_);
    std::swap(iodata_, other->iodata_);
    std::swap(maxindex_, other->maxindex_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleFlowRequest::GetTypeName() const {
  return "message.UploadBattleFlowRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadBattleFlowResponse::kResultFieldNumber;
const int UploadBattleFlowResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

UploadBattleFlowResponse::UploadBattleFlowResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadBattleFlowResponse::InitAsDefaultInstance() {
}

UploadBattleFlowResponse::UploadBattleFlowResponse(const UploadBattleFlowResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadBattleFlowResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadBattleFlowResponse::~UploadBattleFlowResponse() {
  SharedDtor();
}

void UploadBattleFlowResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void UploadBattleFlowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadBattleFlowResponse& UploadBattleFlowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadBattleFlow_2eproto();  return *default_instance_;
}

UploadBattleFlowResponse* UploadBattleFlowResponse::default_instance_ = NULL;

UploadBattleFlowResponse* UploadBattleFlowResponse::New() const {
  return new UploadBattleFlowResponse;
}

void UploadBattleFlowResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadBattleFlowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadBattleFlowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
}

int UploadBattleFlowResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadBattleFlowResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadBattleFlowResponse*>(&from));
}

void UploadBattleFlowResponse::MergeFrom(const UploadBattleFlowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void UploadBattleFlowResponse::CopyFrom(const UploadBattleFlowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadBattleFlowResponse::IsInitialized() const {
  
  return true;
}

void UploadBattleFlowResponse::Swap(UploadBattleFlowResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadBattleFlowResponse::GetTypeName() const {
  return "message.UploadBattleFlowResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
