// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownloadMapInfor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_DownloadMapInfor_2eproto() {
  delete DownloadMapInforRequest::default_instance_;
  delete DownloadMapInforResponse::default_instance_;
  delete DownloadMapInforResponse_UserMapData::default_instance_;
  delete DownloadMapInforResponse_UserMapData_HousingOrClans::default_instance_;
  delete DownloadMapInforResponse_UserMapData_BarrackOrLib::default_instance_;
  delete DownloadMapInforResponse_UserCharacter::default_instance_;
  delete DownloadMapInforResponse_Spell::default_instance_;
  delete DownloadMapInforResponse_BattleInfor::default_instance_;
  delete DownloadMapInforResponse_BuildDestoryStatus::default_instance_;
}

void protobuf_AddDesc_DownloadMapInfor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  DownloadMapInforRequest::default_instance_ = new DownloadMapInforRequest();
  DownloadMapInforResponse::default_instance_ = new DownloadMapInforResponse();
  DownloadMapInforResponse_UserMapData::default_instance_ = new DownloadMapInforResponse_UserMapData();
  DownloadMapInforResponse_UserMapData_HousingOrClans::default_instance_ = new DownloadMapInforResponse_UserMapData_HousingOrClans();
  DownloadMapInforResponse_UserMapData_BarrackOrLib::default_instance_ = new DownloadMapInforResponse_UserMapData_BarrackOrLib();
  DownloadMapInforResponse_UserCharacter::default_instance_ = new DownloadMapInforResponse_UserCharacter();
  DownloadMapInforResponse_Spell::default_instance_ = new DownloadMapInforResponse_Spell();
  DownloadMapInforResponse_BattleInfor::default_instance_ = new DownloadMapInforResponse_BattleInfor();
  DownloadMapInforResponse_BuildDestoryStatus::default_instance_ = new DownloadMapInforResponse_BuildDestoryStatus();
  DownloadMapInforRequest::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_UserMapData::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_UserMapData_HousingOrClans::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_UserMapData_BarrackOrLib::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_UserCharacter::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_Spell::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_BattleInfor::default_instance_->InitAsDefaultInstance();
  DownloadMapInforResponse_BuildDestoryStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownloadMapInfor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownloadMapInfor_2eproto {
  StaticDescriptorInitializer_DownloadMapInfor_2eproto() {
    protobuf_AddDesc_DownloadMapInfor_2eproto();
  }
} static_descriptor_initializer_DownloadMapInfor_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DownloadMapInforRequest::kMailAddressFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforRequest::DownloadMapInforRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforRequest::InitAsDefaultInstance() {
}

DownloadMapInforRequest::DownloadMapInforRequest(const DownloadMapInforRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforRequest::~DownloadMapInforRequest() {
  SharedDtor();
}

void DownloadMapInforRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforRequest& DownloadMapInforRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforRequest* DownloadMapInforRequest::default_instance_ = NULL;

DownloadMapInforRequest* DownloadMapInforRequest::New() const {
  return new DownloadMapInforRequest;
}

void DownloadMapInforRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
}

int DownloadMapInforRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforRequest*>(&from));
}

void DownloadMapInforRequest::MergeFrom(const DownloadMapInforRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
  }
}

void DownloadMapInforRequest::CopyFrom(const DownloadMapInforRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DownloadMapInforRequest::Swap(DownloadMapInforRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforRequest::GetTypeName() const {
  return "message.DownloadMapInforRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadMapInforResponse_UserMapData_HousingOrClans::kCharacterIdFieldNumber;
const int DownloadMapInforResponse_UserMapData_HousingOrClans::kCharacterLevelFieldNumber;
const int DownloadMapInforResponse_UserMapData_HousingOrClans::kFinishedProduceCountFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_UserMapData_HousingOrClans::DownloadMapInforResponse_UserMapData_HousingOrClans()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::InitAsDefaultInstance() {
}

DownloadMapInforResponse_UserMapData_HousingOrClans::DownloadMapInforResponse_UserMapData_HousingOrClans(const DownloadMapInforResponse_UserMapData_HousingOrClans& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0;
  character_level_ = 0;
  finished_produce_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_UserMapData_HousingOrClans::~DownloadMapInforResponse_UserMapData_HousingOrClans() {
  SharedDtor();
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_UserMapData_HousingOrClans& DownloadMapInforResponse_UserMapData_HousingOrClans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_UserMapData_HousingOrClans* DownloadMapInforResponse_UserMapData_HousingOrClans::default_instance_ = NULL;

DownloadMapInforResponse_UserMapData_HousingOrClans* DownloadMapInforResponse_UserMapData_HousingOrClans::New() const {
  return new DownloadMapInforResponse_UserMapData_HousingOrClans;
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0;
    character_level_ = 0;
    finished_produce_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_UserMapData_HousingOrClans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_level;
        break;
      }
      
      // optional int32 character_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished_produce_count;
        break;
      }
      
      // optional int32 finished_produce_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_produce_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_produce_count_)));
          set_has_finished_produce_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_id(), output);
  }
  
  // optional int32 character_level = 2;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->character_level(), output);
  }
  
  // optional int32 finished_produce_count = 3;
  if (has_finished_produce_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finished_produce_count(), output);
  }
  
}

int DownloadMapInforResponse_UserMapData_HousingOrClans::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }
    
    // optional int32 character_level = 2;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }
    
    // optional int32 finished_produce_count = 3;
    if (has_finished_produce_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_produce_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_UserMapData_HousingOrClans*>(&from));
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::MergeFrom(const DownloadMapInforResponse_UserMapData_HousingOrClans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_finished_produce_count()) {
      set_finished_produce_count(from.finished_produce_count());
    }
  }
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::CopyFrom(const DownloadMapInforResponse_UserMapData_HousingOrClans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_UserMapData_HousingOrClans::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_UserMapData_HousingOrClans::Swap(DownloadMapInforResponse_UserMapData_HousingOrClans* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(character_level_, other->character_level_);
    std::swap(finished_produce_count_, other->finished_produce_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_UserMapData_HousingOrClans::GetTypeName() const {
  return "message.DownloadMapInforResponse.UserMapData.HousingOrClans";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_UserMapData_BarrackOrLib::kCharacterIdFieldNumber;
const int DownloadMapInforResponse_UserMapData_BarrackOrLib::kCharacterLevelFieldNumber;
const int DownloadMapInforResponse_UserMapData_BarrackOrLib::kEndTimeFieldNumber;
const int DownloadMapInforResponse_UserMapData_BarrackOrLib::kProduceCountFieldNumber;
const int DownloadMapInforResponse_UserMapData_BarrackOrLib::kIndexFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_UserMapData_BarrackOrLib::DownloadMapInforResponse_UserMapData_BarrackOrLib()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::InitAsDefaultInstance() {
}

DownloadMapInforResponse_UserMapData_BarrackOrLib::DownloadMapInforResponse_UserMapData_BarrackOrLib(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0;
  character_level_ = 0;
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  produce_count_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_UserMapData_BarrackOrLib::~DownloadMapInforResponse_UserMapData_BarrackOrLib() {
  SharedDtor();
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::SharedDtor() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_UserMapData_BarrackOrLib& DownloadMapInforResponse_UserMapData_BarrackOrLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_UserMapData_BarrackOrLib* DownloadMapInforResponse_UserMapData_BarrackOrLib::default_instance_ = NULL;

DownloadMapInforResponse_UserMapData_BarrackOrLib* DownloadMapInforResponse_UserMapData_BarrackOrLib::New() const {
  return new DownloadMapInforResponse_UserMapData_BarrackOrLib;
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0;
    character_level_ = 0;
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    produce_count_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_UserMapData_BarrackOrLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_level;
        break;
      }
      
      // optional int32 character_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_produce_count;
        break;
      }
      
      // optional int32 produce_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produce_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &produce_count_)));
          set_has_produce_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }
      
      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_id(), output);
  }
  
  // optional int32 character_level = 2;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->character_level(), output);
  }
  
  // optional string end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->end_time(), output);
  }
  
  // optional int32 produce_count = 4;
  if (has_produce_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->produce_count(), output);
  }
  
  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }
  
}

int DownloadMapInforResponse_UserMapData_BarrackOrLib::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }
    
    // optional int32 character_level = 2;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }
    
    // optional string end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }
    
    // optional int32 produce_count = 4;
    if (has_produce_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->produce_count());
    }
    
    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_UserMapData_BarrackOrLib*>(&from));
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::MergeFrom(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_produce_count()) {
      set_produce_count(from.produce_count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::CopyFrom(const DownloadMapInforResponse_UserMapData_BarrackOrLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_UserMapData_BarrackOrLib::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_UserMapData_BarrackOrLib::Swap(DownloadMapInforResponse_UserMapData_BarrackOrLib* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(character_level_, other->character_level_);
    std::swap(end_time_, other->end_time_);
    std::swap(produce_count_, other->produce_count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_UserMapData_BarrackOrLib::GetTypeName() const {
  return "message.DownloadMapInforResponse.UserMapData.BarrackOrLib";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_UserMapData::kMapIndexXFieldNumber;
const int DownloadMapInforResponse_UserMapData::kUniquenessBuildIdFieldNumber;
const int DownloadMapInforResponse_UserMapData::kStatusFieldNumber;
const int DownloadMapInforResponse_UserMapData::kBuildingIdFieldNumber;
const int DownloadMapInforResponse_UserMapData::kBuildingLevelFieldNumber;
const int DownloadMapInforResponse_UserMapData::kMapIndexYFieldNumber;
const int DownloadMapInforResponse_UserMapData::kHousingOrClansListFieldNumber;
const int DownloadMapInforResponse_UserMapData::kBarrackOrLibListFieldNumber;
const int DownloadMapInforResponse_UserMapData::kProduceCountFieldNumber;
const int DownloadMapInforResponse_UserMapData::kHarvestStartTimeFieldNumber;
const int DownloadMapInforResponse_UserMapData::kCollectCountFieldNumber;
const int DownloadMapInforResponse_UserMapData::kEndTimeFieldNumber;
const int DownloadMapInforResponse_UserMapData::kBuildUpgradeEndTimeFieldNumber;
const int DownloadMapInforResponse_UserMapData::kBuildStatusFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_UserMapData::DownloadMapInforResponse_UserMapData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_UserMapData::InitAsDefaultInstance() {
}

DownloadMapInforResponse_UserMapData::DownloadMapInforResponse_UserMapData(const DownloadMapInforResponse_UserMapData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_UserMapData::SharedCtor() {
  _cached_size_ = 0;
  map_index_x_ = 0;
  uniqueness_build_id_ = 0;
  status_ = 0;
  building_id_ = 0;
  building_level_ = 0;
  map_index_y_ = 0;
  produce_count_ = 0;
  harvest_start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collect_count_ = 0;
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  build_upgrade_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  build_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_UserMapData::~DownloadMapInforResponse_UserMapData() {
  SharedDtor();
}

void DownloadMapInforResponse_UserMapData::SharedDtor() {
  if (harvest_start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete harvest_start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (build_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete build_upgrade_end_time_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_UserMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_UserMapData& DownloadMapInforResponse_UserMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_UserMapData* DownloadMapInforResponse_UserMapData::default_instance_ = NULL;

DownloadMapInforResponse_UserMapData* DownloadMapInforResponse_UserMapData::New() const {
  return new DownloadMapInforResponse_UserMapData;
}

void DownloadMapInforResponse_UserMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_index_x_ = 0;
    uniqueness_build_id_ = 0;
    status_ = 0;
    building_id_ = 0;
    building_level_ = 0;
    map_index_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    produce_count_ = 0;
    if (has_harvest_start_time()) {
      if (harvest_start_time_ != &::google::protobuf::internal::kEmptyString) {
        harvest_start_time_->clear();
      }
    }
    collect_count_ = 0;
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    if (has_build_upgrade_end_time()) {
      if (build_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
        build_upgrade_end_time_->clear();
      }
    }
    build_status_ = 0;
  }
  housingorclanslist_.Clear();
  barrackorliblist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_UserMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_index_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_x_)));
          set_has_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqueness_build_id;
        break;
      }
      
      // optional int32 uniqueness_build_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueness_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueness_build_id_)));
          set_has_uniqueness_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_building_id;
        break;
      }
      
      // optional int32 building_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Building_level;
        break;
      }
      
      // optional int32 Building_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Building_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_level_)));
          set_has_building_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_map_index_y;
        break;
      }
      
      // optional int32 map_index_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_y_)));
          set_has_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_housingOrClansList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.UserMapData.HousingOrClans housingOrClansList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_housingOrClansList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_housingorclanslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_housingOrClansList;
        if (input->ExpectTag(66)) goto parse_barrackOrLibList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.UserMapData.BarrackOrLib barrackOrLibList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrackOrLibList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrackorliblist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_barrackOrLibList;
        if (input->ExpectTag(72)) goto parse_produce_count;
        break;
      }
      
      // optional int32 produce_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produce_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &produce_count_)));
          set_has_produce_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_harvest_start_time;
        break;
      }
      
      // optional string harvest_start_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harvest_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_harvest_start_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_collect_count;
        break;
      }
      
      // optional int32 collect_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_count_)));
          set_has_collect_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_build_upgrade_end_time;
        break;
      }
      
      // optional string build_upgrade_end_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build_upgrade_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_upgrade_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_build_status;
        break;
      }
      
      // optional int32 build_status = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_status_)));
          set_has_build_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_UserMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_index_x = 1;
  if (has_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_index_x(), output);
  }
  
  // optional int32 uniqueness_build_id = 2;
  if (has_uniqueness_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uniqueness_build_id(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // optional int32 building_id = 4;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->building_id(), output);
  }
  
  // optional int32 Building_level = 5;
  if (has_building_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->building_level(), output);
  }
  
  // optional int32 map_index_y = 6;
  if (has_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_index_y(), output);
  }
  
  // repeated .message.DownloadMapInforResponse.UserMapData.HousingOrClans housingOrClansList = 7;
  for (int i = 0; i < this->housingorclanslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->housingorclanslist(i), output);
  }
  
  // repeated .message.DownloadMapInforResponse.UserMapData.BarrackOrLib barrackOrLibList = 8;
  for (int i = 0; i < this->barrackorliblist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->barrackorliblist(i), output);
  }
  
  // optional int32 produce_count = 9;
  if (has_produce_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->produce_count(), output);
  }
  
  // optional string harvest_start_time = 10;
  if (has_harvest_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->harvest_start_time(), output);
  }
  
  // optional int32 collect_count = 11;
  if (has_collect_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->collect_count(), output);
  }
  
  // optional string end_time = 12;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->end_time(), output);
  }
  
  // optional string build_upgrade_end_time = 13;
  if (has_build_upgrade_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->build_upgrade_end_time(), output);
  }
  
  // optional int32 build_status = 14;
  if (has_build_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->build_status(), output);
  }
  
}

int DownloadMapInforResponse_UserMapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_index_x = 1;
    if (has_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_x());
    }
    
    // optional int32 uniqueness_build_id = 2;
    if (has_uniqueness_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueness_build_id());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 building_id = 4;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional int32 Building_level = 5;
    if (has_building_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_level());
    }
    
    // optional int32 map_index_y = 6;
    if (has_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_y());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 produce_count = 9;
    if (has_produce_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->produce_count());
    }
    
    // optional string harvest_start_time = 10;
    if (has_harvest_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->harvest_start_time());
    }
    
    // optional int32 collect_count = 11;
    if (has_collect_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_count());
    }
    
    // optional string end_time = 12;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }
    
    // optional string build_upgrade_end_time = 13;
    if (has_build_upgrade_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_upgrade_end_time());
    }
    
    // optional int32 build_status = 14;
    if (has_build_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_status());
    }
    
  }
  // repeated .message.DownloadMapInforResponse.UserMapData.HousingOrClans housingOrClansList = 7;
  total_size += 1 * this->housingorclanslist_size();
  for (int i = 0; i < this->housingorclanslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->housingorclanslist(i));
  }
  
  // repeated .message.DownloadMapInforResponse.UserMapData.BarrackOrLib barrackOrLibList = 8;
  total_size += 1 * this->barrackorliblist_size();
  for (int i = 0; i < this->barrackorliblist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrackorliblist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_UserMapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_UserMapData*>(&from));
}

void DownloadMapInforResponse_UserMapData::MergeFrom(const DownloadMapInforResponse_UserMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  housingorclanslist_.MergeFrom(from.housingorclanslist_);
  barrackorliblist_.MergeFrom(from.barrackorliblist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_index_x()) {
      set_map_index_x(from.map_index_x());
    }
    if (from.has_uniqueness_build_id()) {
      set_uniqueness_build_id(from.uniqueness_build_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_building_level()) {
      set_building_level(from.building_level());
    }
    if (from.has_map_index_y()) {
      set_map_index_y(from.map_index_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_produce_count()) {
      set_produce_count(from.produce_count());
    }
    if (from.has_harvest_start_time()) {
      set_harvest_start_time(from.harvest_start_time());
    }
    if (from.has_collect_count()) {
      set_collect_count(from.collect_count());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_build_upgrade_end_time()) {
      set_build_upgrade_end_time(from.build_upgrade_end_time());
    }
    if (from.has_build_status()) {
      set_build_status(from.build_status());
    }
  }
}

void DownloadMapInforResponse_UserMapData::CopyFrom(const DownloadMapInforResponse_UserMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_UserMapData::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_UserMapData::Swap(DownloadMapInforResponse_UserMapData* other) {
  if (other != this) {
    std::swap(map_index_x_, other->map_index_x_);
    std::swap(uniqueness_build_id_, other->uniqueness_build_id_);
    std::swap(status_, other->status_);
    std::swap(building_id_, other->building_id_);
    std::swap(building_level_, other->building_level_);
    std::swap(map_index_y_, other->map_index_y_);
    housingorclanslist_.Swap(&other->housingorclanslist_);
    barrackorliblist_.Swap(&other->barrackorliblist_);
    std::swap(produce_count_, other->produce_count_);
    std::swap(harvest_start_time_, other->harvest_start_time_);
    std::swap(collect_count_, other->collect_count_);
    std::swap(end_time_, other->end_time_);
    std::swap(build_upgrade_end_time_, other->build_upgrade_end_time_);
    std::swap(build_status_, other->build_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_UserMapData::GetTypeName() const {
  return "message.DownloadMapInforResponse.UserMapData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_UserCharacter::kCharacterIdFieldNumber;
const int DownloadMapInforResponse_UserCharacter::kCharacterLevelFieldNumber;
const int DownloadMapInforResponse_UserCharacter::kUpgradeCharacterFinishTimeFieldNumber;
const int DownloadMapInforResponse_UserCharacter::kCharacterCountFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_UserCharacter::DownloadMapInforResponse_UserCharacter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_UserCharacter::InitAsDefaultInstance() {
}

DownloadMapInforResponse_UserCharacter::DownloadMapInforResponse_UserCharacter(const DownloadMapInforResponse_UserCharacter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_UserCharacter::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0;
  character_level_ = 0;
  upgrade_character_finish_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  character_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_UserCharacter::~DownloadMapInforResponse_UserCharacter() {
  SharedDtor();
}

void DownloadMapInforResponse_UserCharacter::SharedDtor() {
  if (upgrade_character_finish_time_ != &::google::protobuf::internal::kEmptyString) {
    delete upgrade_character_finish_time_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_UserCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_UserCharacter& DownloadMapInforResponse_UserCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_UserCharacter* DownloadMapInforResponse_UserCharacter::default_instance_ = NULL;

DownloadMapInforResponse_UserCharacter* DownloadMapInforResponse_UserCharacter::New() const {
  return new DownloadMapInforResponse_UserCharacter;
}

void DownloadMapInforResponse_UserCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0;
    character_level_ = 0;
    if (has_upgrade_character_finish_time()) {
      if (upgrade_character_finish_time_ != &::google::protobuf::internal::kEmptyString) {
        upgrade_character_finish_time_->clear();
      }
    }
    character_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_UserCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_level;
        break;
      }
      
      // optional int32 character_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_upgrade_character_finish_time;
        break;
      }
      
      // optional string upgrade_character_finish_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgrade_character_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgrade_character_finish_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_character_count;
        break;
      }
      
      // optional int32 character_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_count_)));
          set_has_character_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_UserCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_id(), output);
  }
  
  // optional int32 character_level = 2;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->character_level(), output);
  }
  
  // optional string upgrade_character_finish_time = 3;
  if (has_upgrade_character_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->upgrade_character_finish_time(), output);
  }
  
  // optional int32 character_count = 4;
  if (has_character_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->character_count(), output);
  }
  
}

int DownloadMapInforResponse_UserCharacter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }
    
    // optional int32 character_level = 2;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }
    
    // optional string upgrade_character_finish_time = 3;
    if (has_upgrade_character_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upgrade_character_finish_time());
    }
    
    // optional int32 character_count = 4;
    if (has_character_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_UserCharacter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_UserCharacter*>(&from));
}

void DownloadMapInforResponse_UserCharacter::MergeFrom(const DownloadMapInforResponse_UserCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_upgrade_character_finish_time()) {
      set_upgrade_character_finish_time(from.upgrade_character_finish_time());
    }
    if (from.has_character_count()) {
      set_character_count(from.character_count());
    }
  }
}

void DownloadMapInforResponse_UserCharacter::CopyFrom(const DownloadMapInforResponse_UserCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_UserCharacter::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_UserCharacter::Swap(DownloadMapInforResponse_UserCharacter* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(character_level_, other->character_level_);
    std::swap(upgrade_character_finish_time_, other->upgrade_character_finish_time_);
    std::swap(character_count_, other->character_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_UserCharacter::GetTypeName() const {
  return "message.DownloadMapInforResponse.UserCharacter";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_Spell::kSpellTypeIdFieldNumber;
const int DownloadMapInforResponse_Spell::kSpellLevelFieldNumber;
const int DownloadMapInforResponse_Spell::kSpellCountFieldNumber;
const int DownloadMapInforResponse_Spell::kSpellCreateEndTimeFieldNumber;
const int DownloadMapInforResponse_Spell::kSpellUpgradeEndTimeFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_Spell::DownloadMapInforResponse_Spell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_Spell::InitAsDefaultInstance() {
}

DownloadMapInforResponse_Spell::DownloadMapInforResponse_Spell(const DownloadMapInforResponse_Spell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_Spell::SharedCtor() {
  _cached_size_ = 0;
  spell_type_id_ = 0;
  spell_level_ = 0;
  spell_count_ = 0;
  spell_create_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spell_upgrade_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_Spell::~DownloadMapInforResponse_Spell() {
  SharedDtor();
}

void DownloadMapInforResponse_Spell::SharedDtor() {
  if (spell_create_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete spell_create_end_time_;
  }
  if (spell_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete spell_upgrade_end_time_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_Spell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_Spell& DownloadMapInforResponse_Spell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_Spell* DownloadMapInforResponse_Spell::default_instance_ = NULL;

DownloadMapInforResponse_Spell* DownloadMapInforResponse_Spell::New() const {
  return new DownloadMapInforResponse_Spell;
}

void DownloadMapInforResponse_Spell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spell_type_id_ = 0;
    spell_level_ = 0;
    spell_count_ = 0;
    if (has_spell_create_end_time()) {
      if (spell_create_end_time_ != &::google::protobuf::internal::kEmptyString) {
        spell_create_end_time_->clear();
      }
    }
    if (has_spell_upgrade_end_time()) {
      if (spell_upgrade_end_time_ != &::google::protobuf::internal::kEmptyString) {
        spell_upgrade_end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_Spell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Spell_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_type_id_)));
          set_has_spell_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spell_level;
        break;
      }
      
      // optional int32 spell_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_level_)));
          set_has_spell_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spell_count;
        break;
      }
      
      // optional int32 spell_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_count_)));
          set_has_spell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spell_create_end_time;
        break;
      }
      
      // optional string spell_create_end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spell_create_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spell_create_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spell_upgrade_end_time;
        break;
      }
      
      // optional string spell_upgrade_end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spell_upgrade_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spell_upgrade_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_Spell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Spell_type_id = 1;
  if (has_spell_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->spell_type_id(), output);
  }
  
  // optional int32 spell_level = 2;
  if (has_spell_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spell_level(), output);
  }
  
  // optional int32 spell_count = 3;
  if (has_spell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spell_count(), output);
  }
  
  // optional string spell_create_end_time = 4;
  if (has_spell_create_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->spell_create_end_time(), output);
  }
  
  // optional string spell_upgrade_end_time = 5;
  if (has_spell_upgrade_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spell_upgrade_end_time(), output);
  }
  
}

int DownloadMapInforResponse_Spell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Spell_type_id = 1;
    if (has_spell_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_type_id());
    }
    
    // optional int32 spell_level = 2;
    if (has_spell_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_level());
    }
    
    // optional int32 spell_count = 3;
    if (has_spell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_count());
    }
    
    // optional string spell_create_end_time = 4;
    if (has_spell_create_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spell_create_end_time());
    }
    
    // optional string spell_upgrade_end_time = 5;
    if (has_spell_upgrade_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spell_upgrade_end_time());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_Spell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_Spell*>(&from));
}

void DownloadMapInforResponse_Spell::MergeFrom(const DownloadMapInforResponse_Spell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spell_type_id()) {
      set_spell_type_id(from.spell_type_id());
    }
    if (from.has_spell_level()) {
      set_spell_level(from.spell_level());
    }
    if (from.has_spell_count()) {
      set_spell_count(from.spell_count());
    }
    if (from.has_spell_create_end_time()) {
      set_spell_create_end_time(from.spell_create_end_time());
    }
    if (from.has_spell_upgrade_end_time()) {
      set_spell_upgrade_end_time(from.spell_upgrade_end_time());
    }
  }
}

void DownloadMapInforResponse_Spell::CopyFrom(const DownloadMapInforResponse_Spell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_Spell::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_Spell::Swap(DownloadMapInforResponse_Spell* other) {
  if (other != this) {
    std::swap(spell_type_id_, other->spell_type_id_);
    std::swap(spell_level_, other->spell_level_);
    std::swap(spell_count_, other->spell_count_);
    std::swap(spell_create_end_time_, other->spell_create_end_time_);
    std::swap(spell_upgrade_end_time_, other->spell_upgrade_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_Spell::GetTypeName() const {
  return "message.DownloadMapInforResponse.Spell";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_BattleInfor::kAttackerNickNameFieldNumber;
const int DownloadMapInforResponse_BattleInfor::kDefencerGetPvpMarkFieldNumber;
const int DownloadMapInforResponse_BattleInfor::kAttackTimeFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_BattleInfor::DownloadMapInforResponse_BattleInfor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_BattleInfor::InitAsDefaultInstance() {
}

DownloadMapInforResponse_BattleInfor::DownloadMapInforResponse_BattleInfor(const DownloadMapInforResponse_BattleInfor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_BattleInfor::SharedCtor() {
  _cached_size_ = 0;
  attacker_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defencer_get_pvp_mark_ = 0;
  attack_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_BattleInfor::~DownloadMapInforResponse_BattleInfor() {
  SharedDtor();
}

void DownloadMapInforResponse_BattleInfor::SharedDtor() {
  if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_nick_name_;
  }
  if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
    delete attack_time_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_BattleInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_BattleInfor& DownloadMapInforResponse_BattleInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_BattleInfor* DownloadMapInforResponse_BattleInfor::default_instance_ = NULL;

DownloadMapInforResponse_BattleInfor* DownloadMapInforResponse_BattleInfor::New() const {
  return new DownloadMapInforResponse_BattleInfor;
}

void DownloadMapInforResponse_BattleInfor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attacker_nick_name()) {
      if (attacker_nick_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_nick_name_->clear();
      }
    }
    defencer_get_pvp_mark_ = 0;
    if (has_attack_time()) {
      if (attack_time_ != &::google::protobuf::internal::kEmptyString) {
        attack_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_BattleInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string attacker_nick_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defencer_get_pvp_mark;
        break;
      }
      
      // optional sint32 defencer_get_pvp_mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defencer_get_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defencer_get_pvp_mark_)));
          set_has_defencer_get_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attack_time;
        break;
      }
      
      // optional string attack_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attack_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_BattleInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string attacker_nick_name = 1;
  if (has_attacker_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attacker_nick_name(), output);
  }
  
  // optional sint32 defencer_get_pvp_mark = 2;
  if (has_defencer_get_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->defencer_get_pvp_mark(), output);
  }
  
  // optional string attack_time = 3;
  if (has_attack_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attack_time(), output);
  }
  
}

int DownloadMapInforResponse_BattleInfor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string attacker_nick_name = 1;
    if (has_attacker_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_nick_name());
    }
    
    // optional sint32 defencer_get_pvp_mark = 2;
    if (has_defencer_get_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defencer_get_pvp_mark());
    }
    
    // optional string attack_time = 3;
    if (has_attack_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attack_time());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_BattleInfor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_BattleInfor*>(&from));
}

void DownloadMapInforResponse_BattleInfor::MergeFrom(const DownloadMapInforResponse_BattleInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_nick_name()) {
      set_attacker_nick_name(from.attacker_nick_name());
    }
    if (from.has_defencer_get_pvp_mark()) {
      set_defencer_get_pvp_mark(from.defencer_get_pvp_mark());
    }
    if (from.has_attack_time()) {
      set_attack_time(from.attack_time());
    }
  }
}

void DownloadMapInforResponse_BattleInfor::CopyFrom(const DownloadMapInforResponse_BattleInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_BattleInfor::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_BattleInfor::Swap(DownloadMapInforResponse_BattleInfor* other) {
  if (other != this) {
    std::swap(attacker_nick_name_, other->attacker_nick_name_);
    std::swap(defencer_get_pvp_mark_, other->defencer_get_pvp_mark_);
    std::swap(attack_time_, other->attack_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_BattleInfor::GetTypeName() const {
  return "message.DownloadMapInforResponse.BattleInfor";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse_BuildDestoryStatus::kBuildingIdFieldNumber;
const int DownloadMapInforResponse_BuildDestoryStatus::kUuidFieldNumber;
const int DownloadMapInforResponse_BuildDestoryStatus::kMapIndexXFieldNumber;
const int DownloadMapInforResponse_BuildDestoryStatus::kMapIndexYFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse_BuildDestoryStatus::DownloadMapInforResponse_BuildDestoryStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse_BuildDestoryStatus::InitAsDefaultInstance() {
}

DownloadMapInforResponse_BuildDestoryStatus::DownloadMapInforResponse_BuildDestoryStatus(const DownloadMapInforResponse_BuildDestoryStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse_BuildDestoryStatus::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0;
  uuid_ = 0;
  map_index_x_ = 0;
  map_index_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse_BuildDestoryStatus::~DownloadMapInforResponse_BuildDestoryStatus() {
  SharedDtor();
}

void DownloadMapInforResponse_BuildDestoryStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse_BuildDestoryStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse_BuildDestoryStatus& DownloadMapInforResponse_BuildDestoryStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse_BuildDestoryStatus* DownloadMapInforResponse_BuildDestoryStatus::default_instance_ = NULL;

DownloadMapInforResponse_BuildDestoryStatus* DownloadMapInforResponse_BuildDestoryStatus::New() const {
  return new DownloadMapInforResponse_BuildDestoryStatus;
}

void DownloadMapInforResponse_BuildDestoryStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0;
    uuid_ = 0;
    map_index_x_ = 0;
    map_index_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse_BuildDestoryStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }
      
      // optional int32 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_index_x;
        break;
      }
      
      // optional int32 map_index_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_x_)));
          set_has_map_index_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_index_y;
        break;
      }
      
      // optional int32 map_index_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_y_)));
          set_has_map_index_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse_BuildDestoryStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->building_id(), output);
  }
  
  // optional int32 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uuid(), output);
  }
  
  // optional int32 map_index_x = 3;
  if (has_map_index_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_index_x(), output);
  }
  
  // optional int32 map_index_y = 4;
  if (has_map_index_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_index_y(), output);
  }
  
}

int DownloadMapInforResponse_BuildDestoryStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_id());
    }
    
    // optional int32 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }
    
    // optional int32 map_index_x = 3;
    if (has_map_index_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_x());
    }
    
    // optional int32 map_index_y = 4;
    if (has_map_index_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index_y());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse_BuildDestoryStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse_BuildDestoryStatus*>(&from));
}

void DownloadMapInforResponse_BuildDestoryStatus::MergeFrom(const DownloadMapInforResponse_BuildDestoryStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_map_index_x()) {
      set_map_index_x(from.map_index_x());
    }
    if (from.has_map_index_y()) {
      set_map_index_y(from.map_index_y());
    }
  }
}

void DownloadMapInforResponse_BuildDestoryStatus::CopyFrom(const DownloadMapInforResponse_BuildDestoryStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse_BuildDestoryStatus::IsInitialized() const {
  
  return true;
}

void DownloadMapInforResponse_BuildDestoryStatus::Swap(DownloadMapInforResponse_BuildDestoryStatus* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(map_index_x_, other->map_index_x_);
    std::swap(map_index_y_, other->map_index_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse_BuildDestoryStatus::GetTypeName() const {
  return "message.DownloadMapInforResponse.BuildDestoryStatus";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DownloadMapInforResponse::kResultFieldNumber;
const int DownloadMapInforResponse::kInfoFieldNumber;
const int DownloadMapInforResponse::kNickNameFieldNumber;
const int DownloadMapInforResponse::kGoldenCountFieldNumber;
const int DownloadMapInforResponse::kElixirCountFieldNumber;
const int DownloadMapInforResponse::kPvpMarkFieldNumber;
const int DownloadMapInforResponse::kExpFieldNumber;
const int DownloadMapInforResponse::kLevelFieldNumber;
const int DownloadMapInforResponse::kUserMapDataListFieldNumber;
const int DownloadMapInforResponse::kUserCharacterListFieldNumber;
const int DownloadMapInforResponse::kSpellListFieldNumber;
const int DownloadMapInforResponse::kShieldTimeFieldNumber;
const int DownloadMapInforResponse::kDestroyStatusFieldNumber;
const int DownloadMapInforResponse::kBattleRequestFlagFieldNumber;
const int DownloadMapInforResponse::kBattleEndTimeFieldNumber;
const int DownloadMapInforResponse::kBattleInforListFieldNumber;
const int DownloadMapInforResponse::kGemCountFieldNumber;
const int DownloadMapInforResponse::kBuildDistoryStatusListFieldNumber;
const int DownloadMapInforResponse::kBattleMathingUseCountFieldNumber;
#endif  // !_MSC_VER

DownloadMapInforResponse::DownloadMapInforResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadMapInforResponse::InitAsDefaultInstance() {
}

DownloadMapInforResponse::DownloadMapInforResponse(const DownloadMapInforResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadMapInforResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golden_count_ = 0;
  elixir_count_ = 0;
  pvp_mark_ = 0;
  exp_ = 0;
  level_ = 0;
  shield_time_ = GOOGLE_LONGLONG(0);
  destroy_status_ = 0;
  battle_request_flag_ = false;
  battle_end_time_ = 0;
  gem_count_ = 0;
  battlemathingusecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadMapInforResponse::~DownloadMapInforResponse() {
  SharedDtor();
}

void DownloadMapInforResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void DownloadMapInforResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadMapInforResponse& DownloadMapInforResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadMapInfor_2eproto();  return *default_instance_;
}

DownloadMapInforResponse* DownloadMapInforResponse::default_instance_ = NULL;

DownloadMapInforResponse* DownloadMapInforResponse::New() const {
  return new DownloadMapInforResponse;
}

void DownloadMapInforResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    golden_count_ = 0;
    elixir_count_ = 0;
    pvp_mark_ = 0;
    exp_ = 0;
    level_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    shield_time_ = GOOGLE_LONGLONG(0);
    destroy_status_ = 0;
    battle_request_flag_ = false;
    battle_end_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    gem_count_ = 0;
    battlemathingusecount_ = 0;
  }
  usermapdatalist_.Clear();
  usercharacterlist_.Clear();
  spelllist_.Clear();
  battleinforlist_.Clear();
  builddistorystatuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadMapInforResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }
      
      // required string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_golden_count;
        break;
      }
      
      // required int32 golden_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_count_)));
          set_has_golden_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_elixir_count;
        break;
      }
      
      // required int32 elixir_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elixir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elixir_count_)));
          set_has_elixir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pvp_mark;
        break;
      }
      
      // required int32 pvp_mark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_mark_)));
          set_has_pvp_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // required int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userMapDataList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.UserMapData userMapDataList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userMapDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermapdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userMapDataList;
        if (input->ExpectTag(82)) goto parse_userCharacterList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.UserCharacter userCharacterList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCharacterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercharacterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_userCharacterList;
        if (input->ExpectTag(90)) goto parse_spellList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.Spell spellList = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spellList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spelllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_spellList;
        if (input->ExpectTag(96)) goto parse_shield_time;
        break;
      }
      
      // optional int64 shield_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_time_)));
          set_has_shield_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_destroy_status;
        break;
      }
      
      // optional int32 destroy_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroy_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destroy_status_)));
          set_has_destroy_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_battle_request_flag;
        break;
      }
      
      // optional bool battle_request_flag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_request_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battle_request_flag_)));
          set_has_battle_request_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_battle_end_time;
        break;
      }
      
      // optional int32 battle_end_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_end_time_)));
          set_has_battle_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_battleInforList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.BattleInfor battleInforList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleInforList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleinforlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_battleInforList;
        if (input->ExpectTag(136)) goto parse_gem_count;
        break;
      }
      
      // optional int32 gem_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_count_)));
          set_has_gem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_BuildDistoryStatusList;
        break;
      }
      
      // repeated .message.DownloadMapInforResponse.BuildDestoryStatus BuildDistoryStatusList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuildDistoryStatusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builddistorystatuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_BuildDistoryStatusList;
        if (input->ExpectTag(152)) goto parse_battleMathingUseCount;
        break;
      }
      
      // optional int32 battleMathingUseCount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleMathingUseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlemathingusecount_)));
          set_has_battlemathingusecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadMapInforResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // required string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }
  
  // required int32 golden_count = 4;
  if (has_golden_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->golden_count(), output);
  }
  
  // required int32 elixir_count = 5;
  if (has_elixir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->elixir_count(), output);
  }
  
  // required int32 pvp_mark = 6;
  if (has_pvp_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvp_mark(), output);
  }
  
  // required int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }
  
  // required int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // repeated .message.DownloadMapInforResponse.UserMapData userMapDataList = 9;
  for (int i = 0; i < this->usermapdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->usermapdatalist(i), output);
  }
  
  // repeated .message.DownloadMapInforResponse.UserCharacter userCharacterList = 10;
  for (int i = 0; i < this->usercharacterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->usercharacterlist(i), output);
  }
  
  // repeated .message.DownloadMapInforResponse.Spell spellList = 11;
  for (int i = 0; i < this->spelllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->spelllist(i), output);
  }
  
  // optional int64 shield_time = 12;
  if (has_shield_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->shield_time(), output);
  }
  
  // optional int32 destroy_status = 13;
  if (has_destroy_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->destroy_status(), output);
  }
  
  // optional bool battle_request_flag = 14;
  if (has_battle_request_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->battle_request_flag(), output);
  }
  
  // optional int32 battle_end_time = 15;
  if (has_battle_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->battle_end_time(), output);
  }
  
  // repeated .message.DownloadMapInforResponse.BattleInfor battleInforList = 16;
  for (int i = 0; i < this->battleinforlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->battleinforlist(i), output);
  }
  
  // optional int32 gem_count = 17;
  if (has_gem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gem_count(), output);
  }
  
  // repeated .message.DownloadMapInforResponse.BuildDestoryStatus BuildDistoryStatusList = 18;
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->builddistorystatuslist(i), output);
  }
  
  // optional int32 battleMathingUseCount = 19;
  if (has_battlemathingusecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->battlemathingusecount(), output);
  }
  
}

int DownloadMapInforResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // required string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }
    
    // required int32 golden_count = 4;
    if (has_golden_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden_count());
    }
    
    // required int32 elixir_count = 5;
    if (has_elixir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elixir_count());
    }
    
    // required int32 pvp_mark = 6;
    if (has_pvp_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_mark());
    }
    
    // required int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int64 shield_time = 12;
    if (has_shield_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield_time());
    }
    
    // optional int32 destroy_status = 13;
    if (has_destroy_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroy_status());
    }
    
    // optional bool battle_request_flag = 14;
    if (has_battle_request_flag()) {
      total_size += 1 + 1;
    }
    
    // optional int32 battle_end_time = 15;
    if (has_battle_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_end_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 gem_count = 17;
    if (has_gem_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_count());
    }
    
    // optional int32 battleMathingUseCount = 19;
    if (has_battlemathingusecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlemathingusecount());
    }
    
  }
  // repeated .message.DownloadMapInforResponse.UserMapData userMapDataList = 9;
  total_size += 1 * this->usermapdatalist_size();
  for (int i = 0; i < this->usermapdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermapdatalist(i));
  }
  
  // repeated .message.DownloadMapInforResponse.UserCharacter userCharacterList = 10;
  total_size += 1 * this->usercharacterlist_size();
  for (int i = 0; i < this->usercharacterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercharacterlist(i));
  }
  
  // repeated .message.DownloadMapInforResponse.Spell spellList = 11;
  total_size += 1 * this->spelllist_size();
  for (int i = 0; i < this->spelllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spelllist(i));
  }
  
  // repeated .message.DownloadMapInforResponse.BattleInfor battleInforList = 16;
  total_size += 2 * this->battleinforlist_size();
  for (int i = 0; i < this->battleinforlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleinforlist(i));
  }
  
  // repeated .message.DownloadMapInforResponse.BuildDestoryStatus BuildDistoryStatusList = 18;
  total_size += 2 * this->builddistorystatuslist_size();
  for (int i = 0; i < this->builddistorystatuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builddistorystatuslist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadMapInforResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadMapInforResponse*>(&from));
}

void DownloadMapInforResponse::MergeFrom(const DownloadMapInforResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermapdatalist_.MergeFrom(from.usermapdatalist_);
  usercharacterlist_.MergeFrom(from.usercharacterlist_);
  spelllist_.MergeFrom(from.spelllist_);
  battleinforlist_.MergeFrom(from.battleinforlist_);
  builddistorystatuslist_.MergeFrom(from.builddistorystatuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_golden_count()) {
      set_golden_count(from.golden_count());
    }
    if (from.has_elixir_count()) {
      set_elixir_count(from.elixir_count());
    }
    if (from.has_pvp_mark()) {
      set_pvp_mark(from.pvp_mark());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_shield_time()) {
      set_shield_time(from.shield_time());
    }
    if (from.has_destroy_status()) {
      set_destroy_status(from.destroy_status());
    }
    if (from.has_battle_request_flag()) {
      set_battle_request_flag(from.battle_request_flag());
    }
    if (from.has_battle_end_time()) {
      set_battle_end_time(from.battle_end_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gem_count()) {
      set_gem_count(from.gem_count());
    }
    if (from.has_battlemathingusecount()) {
      set_battlemathingusecount(from.battlemathingusecount());
    }
  }
}

void DownloadMapInforResponse::CopyFrom(const DownloadMapInforResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapInforResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fc) != 0x000000fc) return false;
  
  return true;
}

void DownloadMapInforResponse::Swap(DownloadMapInforResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(golden_count_, other->golden_count_);
    std::swap(elixir_count_, other->elixir_count_);
    std::swap(pvp_mark_, other->pvp_mark_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    usermapdatalist_.Swap(&other->usermapdatalist_);
    usercharacterlist_.Swap(&other->usercharacterlist_);
    spelllist_.Swap(&other->spelllist_);
    std::swap(shield_time_, other->shield_time_);
    std::swap(destroy_status_, other->destroy_status_);
    std::swap(battle_request_flag_, other->battle_request_flag_);
    std::swap(battle_end_time_, other->battle_end_time_);
    battleinforlist_.Swap(&other->battleinforlist_);
    std::swap(gem_count_, other->gem_count_);
    builddistorystatuslist_.Swap(&other->builddistorystatuslist_);
    std::swap(battlemathingusecount_, other->battlemathingusecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadMapInforResponse::GetTypeName() const {
  return "message.DownloadMapInforResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
