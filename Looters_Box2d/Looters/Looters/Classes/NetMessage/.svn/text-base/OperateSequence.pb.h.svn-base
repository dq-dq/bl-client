// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OperateSequence.proto

#ifndef PROTOBUF_OperateSequence_2eproto__INCLUDED
#define PROTOBUF_OperateSequence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OperateSequence_2eproto();
void protobuf_AssignDesc_OperateSequence_2eproto();
void protobuf_ShutdownFile_OperateSequence_2eproto();

class OperateSequenceRequest;
class OperateSequenceRequest_Operate;
class OperateSequenceRequest_Accelerate;
class OperateSequenceResponse;

// ===================================================================

class OperateSequenceRequest_Operate : public ::google::protobuf::MessageLite {
 public:
  OperateSequenceRequest_Operate();
  virtual ~OperateSequenceRequest_Operate();
  
  OperateSequenceRequest_Operate(const OperateSequenceRequest_Operate& from);
  
  inline OperateSequenceRequest_Operate& operator=(const OperateSequenceRequest_Operate& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const OperateSequenceRequest_Operate& default_instance();
  
  void Swap(OperateSequenceRequest_Operate* other);
  
  // implements Message ----------------------------------------------
  
  OperateSequenceRequest_Operate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OperateSequenceRequest_Operate& from);
  void MergeFrom(const OperateSequenceRequest_Operate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string operation_time = 2;
  inline bool has_operation_time() const;
  inline void clear_operation_time();
  static const int kOperationTimeFieldNumber = 2;
  inline const ::std::string& operation_time() const;
  inline void set_operation_time(const ::std::string& value);
  inline void set_operation_time(const char* value);
  inline void set_operation_time(const char* value, size_t size);
  inline ::std::string* mutable_operation_time();
  inline ::std::string* release_operation_time();
  
  // optional int32 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);
  
  // optional int32 building_id = 4;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 4;
  inline ::google::protobuf::int32 building_id() const;
  inline void set_building_id(::google::protobuf::int32 value);
  
  // optional string end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const char* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  
  // optional int32 move_to_map_index_x = 6;
  inline bool has_move_to_map_index_x() const;
  inline void clear_move_to_map_index_x();
  static const int kMoveToMapIndexXFieldNumber = 6;
  inline ::google::protobuf::int32 move_to_map_index_x() const;
  inline void set_move_to_map_index_x(::google::protobuf::int32 value);
  
  // optional int32 character_id = 7;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 7;
  inline ::google::protobuf::int32 character_id() const;
  inline void set_character_id(::google::protobuf::int32 value);
  
  // optional int32 produce_count = 8;
  inline bool has_produce_count() const;
  inline void clear_produce_count();
  static const int kProduceCountFieldNumber = 8;
  inline ::google::protobuf::int32 produce_count() const;
  inline void set_produce_count(::google::protobuf::int32 value);
  
  // optional string remaining_time = 9;
  inline bool has_remaining_time() const;
  inline void clear_remaining_time();
  static const int kRemainingTimeFieldNumber = 9;
  inline const ::std::string& remaining_time() const;
  inline void set_remaining_time(const ::std::string& value);
  inline void set_remaining_time(const char* value);
  inline void set_remaining_time(const char* value, size_t size);
  inline ::std::string* mutable_remaining_time();
  inline ::std::string* release_remaining_time();
  
  // optional int32 move_to_map_index_y = 10;
  inline bool has_move_to_map_index_y() const;
  inline void clear_move_to_map_index_y();
  static const int kMoveToMapIndexYFieldNumber = 10;
  inline ::google::protobuf::int32 move_to_map_index_y() const;
  inline void set_move_to_map_index_y(::google::protobuf::int32 value);
  
  // optional int32 build_upgrade_status = 11;
  inline bool has_build_upgrade_status() const;
  inline void clear_build_upgrade_status();
  static const int kBuildUpgradeStatusFieldNumber = 11;
  inline ::google::protobuf::int32 build_upgrade_status() const;
  inline void set_build_upgrade_status(::google::protobuf::int32 value);
  
  // optional int32 treasure_id = 12;
  inline bool has_treasure_id() const;
  inline void clear_treasure_id();
  static const int kTreasureIdFieldNumber = 12;
  inline ::google::protobuf::int32 treasure_id() const;
  inline void set_treasure_id(::google::protobuf::int32 value);
  
  // optional string str_md5 = 13;
  inline bool has_str_md5() const;
  inline void clear_str_md5();
  static const int kStrMd5FieldNumber = 13;
  inline const ::std::string& str_md5() const;
  inline void set_str_md5(const ::std::string& value);
  inline void set_str_md5(const char* value);
  inline void set_str_md5(const char* value, size_t size);
  inline ::std::string* mutable_str_md5();
  inline ::std::string* release_str_md5();
  
  // @@protoc_insertion_point(class_scope:message.OperateSequenceRequest.Operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operation_time();
  inline void clear_has_operation_time();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_move_to_map_index_x();
  inline void clear_has_move_to_map_index_x();
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_produce_count();
  inline void clear_has_produce_count();
  inline void set_has_remaining_time();
  inline void clear_has_remaining_time();
  inline void set_has_move_to_map_index_y();
  inline void clear_has_move_to_map_index_y();
  inline void set_has_build_upgrade_status();
  inline void clear_has_build_upgrade_status();
  inline void set_has_treasure_id();
  inline void clear_has_treasure_id();
  inline void set_has_str_md5();
  inline void clear_has_str_md5();
  
  ::std::string* operation_time_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 uuid_;
  ::std::string* end_time_;
  ::google::protobuf::int32 building_id_;
  ::google::protobuf::int32 move_to_map_index_x_;
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 produce_count_;
  ::std::string* remaining_time_;
  ::google::protobuf::int32 move_to_map_index_y_;
  ::google::protobuf::int32 build_upgrade_status_;
  ::std::string* str_md5_;
  ::google::protobuf::int32 treasure_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_OperateSequence_2eproto();
  friend void protobuf_AssignDesc_OperateSequence_2eproto();
  friend void protobuf_ShutdownFile_OperateSequence_2eproto();
  
  void InitAsDefaultInstance();
  static OperateSequenceRequest_Operate* default_instance_;
};
// -------------------------------------------------------------------

class OperateSequenceRequest_Accelerate : public ::google::protobuf::MessageLite {
 public:
  OperateSequenceRequest_Accelerate();
  virtual ~OperateSequenceRequest_Accelerate();
  
  OperateSequenceRequest_Accelerate(const OperateSequenceRequest_Accelerate& from);
  
  inline OperateSequenceRequest_Accelerate& operator=(const OperateSequenceRequest_Accelerate& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const OperateSequenceRequest_Accelerate& default_instance();
  
  void Swap(OperateSequenceRequest_Accelerate* other);
  
  // implements Message ----------------------------------------------
  
  OperateSequenceRequest_Accelerate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OperateSequenceRequest_Accelerate& from);
  void MergeFrom(const OperateSequenceRequest_Accelerate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);
  
  // optional string remain_time = 4;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 4;
  inline const ::std::string& remain_time() const;
  inline void set_remain_time(const ::std::string& value);
  inline void set_remain_time(const char* value);
  inline void set_remain_time(const char* value, size_t size);
  inline ::std::string* mutable_remain_time();
  inline ::std::string* release_remain_time();
  
  // required int32 gem_count = 5;
  inline bool has_gem_count() const;
  inline void clear_gem_count();
  static const int kGemCountFieldNumber = 5;
  inline ::google::protobuf::int32 gem_count() const;
  inline void set_gem_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.OperateSequenceRequest.Accelerate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_gem_count();
  inline void clear_has_gem_count();
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::std::string* remain_time_;
  ::google::protobuf::int32 uuid_;
  ::google::protobuf::int32 gem_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_OperateSequence_2eproto();
  friend void protobuf_AssignDesc_OperateSequence_2eproto();
  friend void protobuf_ShutdownFile_OperateSequence_2eproto();
  
  void InitAsDefaultInstance();
  static OperateSequenceRequest_Accelerate* default_instance_;
};
// -------------------------------------------------------------------

class OperateSequenceRequest : public ::google::protobuf::MessageLite {
 public:
  OperateSequenceRequest();
  virtual ~OperateSequenceRequest();
  
  OperateSequenceRequest(const OperateSequenceRequest& from);
  
  inline OperateSequenceRequest& operator=(const OperateSequenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const OperateSequenceRequest& default_instance();
  
  void Swap(OperateSequenceRequest* other);
  
  // implements Message ----------------------------------------------
  
  OperateSequenceRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OperateSequenceRequest& from);
  void MergeFrom(const OperateSequenceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef OperateSequenceRequest_Operate Operate;
  typedef OperateSequenceRequest_Accelerate Accelerate;
  
  // accessors -------------------------------------------------------
  
  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // required string mailAddress = 2;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 2;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // repeated .message.OperateSequenceRequest.Operate operateList = 3;
  inline int operatelist_size() const;
  inline void clear_operatelist();
  static const int kOperateListFieldNumber = 3;
  inline const ::message::OperateSequenceRequest_Operate& operatelist(int index) const;
  inline ::message::OperateSequenceRequest_Operate* mutable_operatelist(int index);
  inline ::message::OperateSequenceRequest_Operate* add_operatelist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Operate >&
      operatelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Operate >*
      mutable_operatelist();
  
  // repeated .message.OperateSequenceRequest.Accelerate accelerateList = 4;
  inline int acceleratelist_size() const;
  inline void clear_acceleratelist();
  static const int kAccelerateListFieldNumber = 4;
  inline const ::message::OperateSequenceRequest_Accelerate& acceleratelist(int index) const;
  inline ::message::OperateSequenceRequest_Accelerate* mutable_acceleratelist(int index);
  inline ::message::OperateSequenceRequest_Accelerate* add_acceleratelist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Accelerate >&
      acceleratelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Accelerate >*
      mutable_acceleratelist();
  
  // @@protoc_insertion_point(class_scope:message.OperateSequenceRequest)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  
  ::std::string* version_;
  ::std::string* mailaddress_;
  ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Operate > operatelist_;
  ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Accelerate > acceleratelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OperateSequence_2eproto();
  friend void protobuf_AssignDesc_OperateSequence_2eproto();
  friend void protobuf_ShutdownFile_OperateSequence_2eproto();
  
  void InitAsDefaultInstance();
  static OperateSequenceRequest* default_instance_;
};
// -------------------------------------------------------------------

class OperateSequenceResponse : public ::google::protobuf::MessageLite {
 public:
  OperateSequenceResponse();
  virtual ~OperateSequenceResponse();
  
  OperateSequenceResponse(const OperateSequenceResponse& from);
  
  inline OperateSequenceResponse& operator=(const OperateSequenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const OperateSequenceResponse& default_instance();
  
  void Swap(OperateSequenceResponse* other);
  
  // implements Message ----------------------------------------------
  
  OperateSequenceResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OperateSequenceResponse& from);
  void MergeFrom(const OperateSequenceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:message.OperateSequenceResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OperateSequence_2eproto();
  friend void protobuf_AssignDesc_OperateSequence_2eproto();
  friend void protobuf_ShutdownFile_OperateSequence_2eproto();
  
  void InitAsDefaultInstance();
  static OperateSequenceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// OperateSequenceRequest_Operate

// required sint32 type = 1;
inline bool OperateSequenceRequest_Operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateSequenceRequest_Operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateSequenceRequest_Operate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::type() const {
  return type_;
}
inline void OperateSequenceRequest_Operate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string operation_time = 2;
inline bool OperateSequenceRequest_Operate::has_operation_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_operation_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateSequenceRequest_Operate::clear_has_operation_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateSequenceRequest_Operate::clear_operation_time() {
  if (operation_time_ != &::google::protobuf::internal::kEmptyString) {
    operation_time_->clear();
  }
  clear_has_operation_time();
}
inline const ::std::string& OperateSequenceRequest_Operate::operation_time() const {
  return *operation_time_;
}
inline void OperateSequenceRequest_Operate::set_operation_time(const ::std::string& value) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::kEmptyString) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_operation_time(const char* value) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::kEmptyString) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_operation_time(const char* value, size_t size) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::kEmptyString) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest_Operate::mutable_operation_time() {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::kEmptyString) {
    operation_time_ = new ::std::string;
  }
  return operation_time_;
}
inline ::std::string* OperateSequenceRequest_Operate::release_operation_time() {
  clear_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operation_time_;
    operation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 uuid = 3;
inline bool OperateSequenceRequest_Operate::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperateSequenceRequest_Operate::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperateSequenceRequest_Operate::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::uuid() const {
  return uuid_;
}
inline void OperateSequenceRequest_Operate::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 building_id = 4;
inline bool OperateSequenceRequest_Operate::has_building_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_building_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperateSequenceRequest_Operate::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperateSequenceRequest_Operate::clear_building_id() {
  building_id_ = 0;
  clear_has_building_id();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::building_id() const {
  return building_id_;
}
inline void OperateSequenceRequest_Operate::set_building_id(::google::protobuf::int32 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional string end_time = 5;
inline bool OperateSequenceRequest_Operate::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperateSequenceRequest_Operate::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperateSequenceRequest_Operate::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& OperateSequenceRequest_Operate::end_time() const {
  return *end_time_;
}
inline void OperateSequenceRequest_Operate::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_end_time(const char* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest_Operate::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  return end_time_;
}
inline ::std::string* OperateSequenceRequest_Operate::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 move_to_map_index_x = 6;
inline bool OperateSequenceRequest_Operate::has_move_to_map_index_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_move_to_map_index_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperateSequenceRequest_Operate::clear_has_move_to_map_index_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperateSequenceRequest_Operate::clear_move_to_map_index_x() {
  move_to_map_index_x_ = 0;
  clear_has_move_to_map_index_x();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::move_to_map_index_x() const {
  return move_to_map_index_x_;
}
inline void OperateSequenceRequest_Operate::set_move_to_map_index_x(::google::protobuf::int32 value) {
  set_has_move_to_map_index_x();
  move_to_map_index_x_ = value;
}

// optional int32 character_id = 7;
inline bool OperateSequenceRequest_Operate::has_character_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_character_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperateSequenceRequest_Operate::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperateSequenceRequest_Operate::clear_character_id() {
  character_id_ = 0;
  clear_has_character_id();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::character_id() const {
  return character_id_;
}
inline void OperateSequenceRequest_Operate::set_character_id(::google::protobuf::int32 value) {
  set_has_character_id();
  character_id_ = value;
}

// optional int32 produce_count = 8;
inline bool OperateSequenceRequest_Operate::has_produce_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_produce_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OperateSequenceRequest_Operate::clear_has_produce_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OperateSequenceRequest_Operate::clear_produce_count() {
  produce_count_ = 0;
  clear_has_produce_count();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::produce_count() const {
  return produce_count_;
}
inline void OperateSequenceRequest_Operate::set_produce_count(::google::protobuf::int32 value) {
  set_has_produce_count();
  produce_count_ = value;
}

// optional string remaining_time = 9;
inline bool OperateSequenceRequest_Operate::has_remaining_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_remaining_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OperateSequenceRequest_Operate::clear_has_remaining_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OperateSequenceRequest_Operate::clear_remaining_time() {
  if (remaining_time_ != &::google::protobuf::internal::kEmptyString) {
    remaining_time_->clear();
  }
  clear_has_remaining_time();
}
inline const ::std::string& OperateSequenceRequest_Operate::remaining_time() const {
  return *remaining_time_;
}
inline void OperateSequenceRequest_Operate::set_remaining_time(const ::std::string& value) {
  set_has_remaining_time();
  if (remaining_time_ == &::google::protobuf::internal::kEmptyString) {
    remaining_time_ = new ::std::string;
  }
  remaining_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_remaining_time(const char* value) {
  set_has_remaining_time();
  if (remaining_time_ == &::google::protobuf::internal::kEmptyString) {
    remaining_time_ = new ::std::string;
  }
  remaining_time_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_remaining_time(const char* value, size_t size) {
  set_has_remaining_time();
  if (remaining_time_ == &::google::protobuf::internal::kEmptyString) {
    remaining_time_ = new ::std::string;
  }
  remaining_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest_Operate::mutable_remaining_time() {
  set_has_remaining_time();
  if (remaining_time_ == &::google::protobuf::internal::kEmptyString) {
    remaining_time_ = new ::std::string;
  }
  return remaining_time_;
}
inline ::std::string* OperateSequenceRequest_Operate::release_remaining_time() {
  clear_has_remaining_time();
  if (remaining_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remaining_time_;
    remaining_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 move_to_map_index_y = 10;
inline bool OperateSequenceRequest_Operate::has_move_to_map_index_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_move_to_map_index_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OperateSequenceRequest_Operate::clear_has_move_to_map_index_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OperateSequenceRequest_Operate::clear_move_to_map_index_y() {
  move_to_map_index_y_ = 0;
  clear_has_move_to_map_index_y();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::move_to_map_index_y() const {
  return move_to_map_index_y_;
}
inline void OperateSequenceRequest_Operate::set_move_to_map_index_y(::google::protobuf::int32 value) {
  set_has_move_to_map_index_y();
  move_to_map_index_y_ = value;
}

// optional int32 build_upgrade_status = 11;
inline bool OperateSequenceRequest_Operate::has_build_upgrade_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_build_upgrade_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OperateSequenceRequest_Operate::clear_has_build_upgrade_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OperateSequenceRequest_Operate::clear_build_upgrade_status() {
  build_upgrade_status_ = 0;
  clear_has_build_upgrade_status();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::build_upgrade_status() const {
  return build_upgrade_status_;
}
inline void OperateSequenceRequest_Operate::set_build_upgrade_status(::google::protobuf::int32 value) {
  set_has_build_upgrade_status();
  build_upgrade_status_ = value;
}

// optional int32 treasure_id = 12;
inline bool OperateSequenceRequest_Operate::has_treasure_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_treasure_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OperateSequenceRequest_Operate::clear_has_treasure_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OperateSequenceRequest_Operate::clear_treasure_id() {
  treasure_id_ = 0;
  clear_has_treasure_id();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Operate::treasure_id() const {
  return treasure_id_;
}
inline void OperateSequenceRequest_Operate::set_treasure_id(::google::protobuf::int32 value) {
  set_has_treasure_id();
  treasure_id_ = value;
}

// optional string str_md5 = 13;
inline bool OperateSequenceRequest_Operate::has_str_md5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OperateSequenceRequest_Operate::set_has_str_md5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OperateSequenceRequest_Operate::clear_has_str_md5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OperateSequenceRequest_Operate::clear_str_md5() {
  if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
    str_md5_->clear();
  }
  clear_has_str_md5();
}
inline const ::std::string& OperateSequenceRequest_Operate::str_md5() const {
  return *str_md5_;
}
inline void OperateSequenceRequest_Operate::set_str_md5(const ::std::string& value) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_str_md5(const char* value) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(value);
}
inline void OperateSequenceRequest_Operate::set_str_md5(const char* value, size_t size) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest_Operate::mutable_str_md5() {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  return str_md5_;
}
inline ::std::string* OperateSequenceRequest_Operate::release_str_md5() {
  clear_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_md5_;
    str_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OperateSequenceRequest_Accelerate

// required int32 type = 1;
inline bool OperateSequenceRequest_Accelerate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateSequenceRequest_Accelerate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateSequenceRequest_Accelerate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateSequenceRequest_Accelerate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Accelerate::type() const {
  return type_;
}
inline void OperateSequenceRequest_Accelerate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool OperateSequenceRequest_Accelerate::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateSequenceRequest_Accelerate::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateSequenceRequest_Accelerate::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateSequenceRequest_Accelerate::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Accelerate::id() const {
  return id_;
}
inline void OperateSequenceRequest_Accelerate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 uuid = 3;
inline bool OperateSequenceRequest_Accelerate::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperateSequenceRequest_Accelerate::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperateSequenceRequest_Accelerate::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperateSequenceRequest_Accelerate::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Accelerate::uuid() const {
  return uuid_;
}
inline void OperateSequenceRequest_Accelerate::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional string remain_time = 4;
inline bool OperateSequenceRequest_Accelerate::has_remain_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperateSequenceRequest_Accelerate::set_has_remain_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperateSequenceRequest_Accelerate::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperateSequenceRequest_Accelerate::clear_remain_time() {
  if (remain_time_ != &::google::protobuf::internal::kEmptyString) {
    remain_time_->clear();
  }
  clear_has_remain_time();
}
inline const ::std::string& OperateSequenceRequest_Accelerate::remain_time() const {
  return *remain_time_;
}
inline void OperateSequenceRequest_Accelerate::set_remain_time(const ::std::string& value) {
  set_has_remain_time();
  if (remain_time_ == &::google::protobuf::internal::kEmptyString) {
    remain_time_ = new ::std::string;
  }
  remain_time_->assign(value);
}
inline void OperateSequenceRequest_Accelerate::set_remain_time(const char* value) {
  set_has_remain_time();
  if (remain_time_ == &::google::protobuf::internal::kEmptyString) {
    remain_time_ = new ::std::string;
  }
  remain_time_->assign(value);
}
inline void OperateSequenceRequest_Accelerate::set_remain_time(const char* value, size_t size) {
  set_has_remain_time();
  if (remain_time_ == &::google::protobuf::internal::kEmptyString) {
    remain_time_ = new ::std::string;
  }
  remain_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest_Accelerate::mutable_remain_time() {
  set_has_remain_time();
  if (remain_time_ == &::google::protobuf::internal::kEmptyString) {
    remain_time_ = new ::std::string;
  }
  return remain_time_;
}
inline ::std::string* OperateSequenceRequest_Accelerate::release_remain_time() {
  clear_has_remain_time();
  if (remain_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remain_time_;
    remain_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 gem_count = 5;
inline bool OperateSequenceRequest_Accelerate::has_gem_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperateSequenceRequest_Accelerate::set_has_gem_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperateSequenceRequest_Accelerate::clear_has_gem_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperateSequenceRequest_Accelerate::clear_gem_count() {
  gem_count_ = 0;
  clear_has_gem_count();
}
inline ::google::protobuf::int32 OperateSequenceRequest_Accelerate::gem_count() const {
  return gem_count_;
}
inline void OperateSequenceRequest_Accelerate::set_gem_count(::google::protobuf::int32 value) {
  set_has_gem_count();
  gem_count_ = value;
}

// -------------------------------------------------------------------

// OperateSequenceRequest

// required string version = 1;
inline bool OperateSequenceRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateSequenceRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateSequenceRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateSequenceRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& OperateSequenceRequest::version() const {
  return *version_;
}
inline void OperateSequenceRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void OperateSequenceRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void OperateSequenceRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* OperateSequenceRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mailAddress = 2;
inline bool OperateSequenceRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateSequenceRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateSequenceRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateSequenceRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& OperateSequenceRequest::mailaddress() const {
  return *mailaddress_;
}
inline void OperateSequenceRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void OperateSequenceRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void OperateSequenceRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* OperateSequenceRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .message.OperateSequenceRequest.Operate operateList = 3;
inline int OperateSequenceRequest::operatelist_size() const {
  return operatelist_.size();
}
inline void OperateSequenceRequest::clear_operatelist() {
  operatelist_.Clear();
}
inline const ::message::OperateSequenceRequest_Operate& OperateSequenceRequest::operatelist(int index) const {
  return operatelist_.Get(index);
}
inline ::message::OperateSequenceRequest_Operate* OperateSequenceRequest::mutable_operatelist(int index) {
  return operatelist_.Mutable(index);
}
inline ::message::OperateSequenceRequest_Operate* OperateSequenceRequest::add_operatelist() {
  return operatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Operate >&
OperateSequenceRequest::operatelist() const {
  return operatelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Operate >*
OperateSequenceRequest::mutable_operatelist() {
  return &operatelist_;
}

// repeated .message.OperateSequenceRequest.Accelerate accelerateList = 4;
inline int OperateSequenceRequest::acceleratelist_size() const {
  return acceleratelist_.size();
}
inline void OperateSequenceRequest::clear_acceleratelist() {
  acceleratelist_.Clear();
}
inline const ::message::OperateSequenceRequest_Accelerate& OperateSequenceRequest::acceleratelist(int index) const {
  return acceleratelist_.Get(index);
}
inline ::message::OperateSequenceRequest_Accelerate* OperateSequenceRequest::mutable_acceleratelist(int index) {
  return acceleratelist_.Mutable(index);
}
inline ::message::OperateSequenceRequest_Accelerate* OperateSequenceRequest::add_acceleratelist() {
  return acceleratelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Accelerate >&
OperateSequenceRequest::acceleratelist() const {
  return acceleratelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::OperateSequenceRequest_Accelerate >*
OperateSequenceRequest::mutable_acceleratelist() {
  return &acceleratelist_;
}

// -------------------------------------------------------------------

// OperateSequenceResponse

// optional sint32 result = 1;
inline bool OperateSequenceResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateSequenceResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateSequenceResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateSequenceResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OperateSequenceResponse::result() const {
  return result_;
}
inline void OperateSequenceResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool OperateSequenceResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateSequenceResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateSequenceResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateSequenceResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& OperateSequenceResponse::info() const {
  return *info_;
}
inline void OperateSequenceResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void OperateSequenceResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void OperateSequenceResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperateSequenceResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* OperateSequenceResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OperateSequence_2eproto__INCLUDED
