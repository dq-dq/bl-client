// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMessage.proto

#ifndef PROTOBUF_IMessage_2eproto__INCLUDED
#define PROTOBUF_IMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IMessage_2eproto();
void protobuf_AssignDesc_IMessage_2eproto();
void protobuf_ShutdownFile_IMessage_2eproto();

class PNPCMessage;
class Head;

// ===================================================================

class PNPCMessage : public ::google::protobuf::MessageLite {
 public:
  PNPCMessage();
  virtual ~PNPCMessage();
  
  PNPCMessage(const PNPCMessage& from);
  
  inline PNPCMessage& operator=(const PNPCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PNPCMessage& default_instance();
  
  void Swap(PNPCMessage* other);
  
  // implements Message ----------------------------------------------
  
  PNPCMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PNPCMessage& from);
  void MergeFrom(const PNPCMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes msgHead = 1;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  inline const ::std::string& msghead() const;
  inline void set_msghead(const ::std::string& value);
  inline void set_msghead(const char* value);
  inline void set_msghead(const void* value, size_t size);
  inline ::std::string* mutable_msghead();
  inline ::std::string* release_msghead();
  
  // required bytes msgBody = 2;
  inline bool has_msgbody() const;
  inline void clear_msgbody();
  static const int kMsgBodyFieldNumber = 2;
  inline const ::std::string& msgbody() const;
  inline void set_msgbody(const ::std::string& value);
  inline void set_msgbody(const char* value);
  inline void set_msgbody(const void* value, size_t size);
  inline ::std::string* mutable_msgbody();
  inline ::std::string* release_msgbody();
  
  // @@protoc_insertion_point(class_scope:message.PNPCMessage)
 private:
  inline void set_has_msghead();
  inline void clear_has_msghead();
  inline void set_has_msgbody();
  inline void clear_has_msgbody();
  
  ::std::string* msghead_;
  ::std::string* msgbody_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_IMessage_2eproto();
  friend void protobuf_AssignDesc_IMessage_2eproto();
  friend void protobuf_ShutdownFile_IMessage_2eproto();
  
  void InitAsDefaultInstance();
  static PNPCMessage* default_instance_;
};
// -------------------------------------------------------------------

class Head : public ::google::protobuf::MessageLite {
 public:
  Head();
  virtual ~Head();
  
  Head(const Head& from);
  
  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Head& default_instance();
  
  void Swap(Head* other);
  
  // implements Message ----------------------------------------------
  
  Head* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Head& from);
  void MergeFrom(const Head& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 commandId = 1;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 commandid() const;
  inline void set_commandid(::google::protobuf::uint32 value);
  
  // required sint64 checkSum = 2;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kCheckSumFieldNumber = 2;
  inline ::google::protobuf::int64 checksum() const;
  inline void set_checksum(::google::protobuf::int64 value);
  
  // optional int64 sequence = 3 [default = 0];
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  inline ::google::protobuf::int64 sequence() const;
  inline void set_sequence(::google::protobuf::int64 value);
  
  // optional bool isHttp = 4 [default = false];
  inline bool has_ishttp() const;
  inline void clear_ishttp();
  static const int kIsHttpFieldNumber = 4;
  inline bool ishttp() const;
  inline void set_ishttp(bool value);
  
  // @@protoc_insertion_point(class_scope:message.Head)
 private:
  inline void set_has_commandid();
  inline void clear_has_commandid();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_ishttp();
  inline void clear_has_ishttp();
  
  ::google::protobuf::int64 checksum_;
  ::google::protobuf::uint32 commandid_;
  bool ishttp_;
  ::google::protobuf::int64 sequence_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IMessage_2eproto();
  friend void protobuf_AssignDesc_IMessage_2eproto();
  friend void protobuf_ShutdownFile_IMessage_2eproto();
  
  void InitAsDefaultInstance();
  static Head* default_instance_;
};
// ===================================================================


// ===================================================================

// PNPCMessage

// required bytes msgHead = 1;
inline bool PNPCMessage::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNPCMessage::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNPCMessage::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PNPCMessage::clear_msghead() {
  if (msghead_ != &::google::protobuf::internal::kEmptyString) {
    msghead_->clear();
  }
  clear_has_msghead();
}
inline const ::std::string& PNPCMessage::msghead() const {
  return *msghead_;
}
inline void PNPCMessage::set_msghead(const ::std::string& value) {
  set_has_msghead();
  if (msghead_ == &::google::protobuf::internal::kEmptyString) {
    msghead_ = new ::std::string;
  }
  msghead_->assign(value);
}
inline void PNPCMessage::set_msghead(const char* value) {
  set_has_msghead();
  if (msghead_ == &::google::protobuf::internal::kEmptyString) {
    msghead_ = new ::std::string;
  }
  msghead_->assign(value);
}
inline void PNPCMessage::set_msghead(const void* value, size_t size) {
  set_has_msghead();
  if (msghead_ == &::google::protobuf::internal::kEmptyString) {
    msghead_ = new ::std::string;
  }
  msghead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PNPCMessage::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == &::google::protobuf::internal::kEmptyString) {
    msghead_ = new ::std::string;
  }
  return msghead_;
}
inline ::std::string* PNPCMessage::release_msghead() {
  clear_has_msghead();
  if (msghead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msghead_;
    msghead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes msgBody = 2;
inline bool PNPCMessage::has_msgbody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PNPCMessage::set_has_msgbody() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PNPCMessage::clear_has_msgbody() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PNPCMessage::clear_msgbody() {
  if (msgbody_ != &::google::protobuf::internal::kEmptyString) {
    msgbody_->clear();
  }
  clear_has_msgbody();
}
inline const ::std::string& PNPCMessage::msgbody() const {
  return *msgbody_;
}
inline void PNPCMessage::set_msgbody(const ::std::string& value) {
  set_has_msgbody();
  if (msgbody_ == &::google::protobuf::internal::kEmptyString) {
    msgbody_ = new ::std::string;
  }
  msgbody_->assign(value);
}
inline void PNPCMessage::set_msgbody(const char* value) {
  set_has_msgbody();
  if (msgbody_ == &::google::protobuf::internal::kEmptyString) {
    msgbody_ = new ::std::string;
  }
  msgbody_->assign(value);
}
inline void PNPCMessage::set_msgbody(const void* value, size_t size) {
  set_has_msgbody();
  if (msgbody_ == &::google::protobuf::internal::kEmptyString) {
    msgbody_ = new ::std::string;
  }
  msgbody_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PNPCMessage::mutable_msgbody() {
  set_has_msgbody();
  if (msgbody_ == &::google::protobuf::internal::kEmptyString) {
    msgbody_ = new ::std::string;
  }
  return msgbody_;
}
inline ::std::string* PNPCMessage::release_msgbody() {
  clear_has_msgbody();
  if (msgbody_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgbody_;
    msgbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Head

// required uint32 commandId = 1;
inline bool Head::has_commandid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Head::set_has_commandid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Head::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Head::clear_commandid() {
  commandid_ = 0u;
  clear_has_commandid();
}
inline ::google::protobuf::uint32 Head::commandid() const {
  return commandid_;
}
inline void Head::set_commandid(::google::protobuf::uint32 value) {
  set_has_commandid();
  commandid_ = value;
}

// required sint64 checkSum = 2;
inline bool Head::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Head::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Head::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Head::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
  clear_has_checksum();
}
inline ::google::protobuf::int64 Head::checksum() const {
  return checksum_;
}
inline void Head::set_checksum(::google::protobuf::int64 value) {
  set_has_checksum();
  checksum_ = value;
}

// optional int64 sequence = 3 [default = 0];
inline bool Head::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Head::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Head::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Head::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
inline ::google::protobuf::int64 Head::sequence() const {
  return sequence_;
}
inline void Head::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional bool isHttp = 4 [default = false];
inline bool Head::has_ishttp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Head::set_has_ishttp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Head::clear_has_ishttp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Head::clear_ishttp() {
  ishttp_ = false;
  clear_has_ishttp();
}
inline bool Head::ishttp() const {
  return ishttp_;
}
inline void Head::set_ishttp(bool value) {
  set_has_ishttp();
  ishttp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IMessage_2eproto__INCLUDED
