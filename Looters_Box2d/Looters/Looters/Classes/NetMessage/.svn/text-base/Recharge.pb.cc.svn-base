// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Recharge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_Recharge_2eproto() {
  delete RechargeRequest::default_instance_;
  delete RechargeResponse::default_instance_;
}

void protobuf_AddDesc_Recharge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  RechargeRequest::default_instance_ = new RechargeRequest();
  RechargeResponse::default_instance_ = new RechargeResponse();
  RechargeRequest::default_instance_->InitAsDefaultInstance();
  RechargeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Recharge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Recharge_2eproto {
  StaticDescriptorInitializer_Recharge_2eproto() {
    protobuf_AddDesc_Recharge_2eproto();
  }
} static_descriptor_initializer_Recharge_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RechargeRequest::kMailAddressFieldNumber;
const int RechargeRequest::kBuyGemCountFieldNumber;
const int RechargeRequest::kPayMoneyFieldNumber;
const int RechargeRequest::kTreasureIdFieldNumber;
const int RechargeRequest::kGameMailAddressFieldNumber;
const int RechargeRequest::kReceiptFieldNumber;
#endif  // !_MSC_VER

RechargeRequest::RechargeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RechargeRequest::InitAsDefaultInstance() {
}

RechargeRequest::RechargeRequest(const RechargeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buy_gem_count_ = 0;
  pay_money_ = 0;
  treasure_id_ = 0;
  gamemailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeRequest::~RechargeRequest() {
  SharedDtor();
}

void RechargeRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (gamemailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemailaddress_;
  }
  if (receipt_ != &::google::protobuf::internal::kEmptyString) {
    delete receipt_;
  }
  if (this != default_instance_) {
  }
}

void RechargeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RechargeRequest& RechargeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Recharge_2eproto();  return *default_instance_;
}

RechargeRequest* RechargeRequest::default_instance_ = NULL;

RechargeRequest* RechargeRequest::New() const {
  return new RechargeRequest;
}

void RechargeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    buy_gem_count_ = 0;
    pay_money_ = 0;
    treasure_id_ = 0;
    if (has_gamemailaddress()) {
      if (gamemailaddress_ != &::google::protobuf::internal::kEmptyString) {
        gamemailaddress_->clear();
      }
    }
    if (has_receipt()) {
      if (receipt_ != &::google::protobuf::internal::kEmptyString) {
        receipt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RechargeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_gem_count;
        break;
      }
      
      // optional int32 buy_gem_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_gem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_gem_count_)));
          set_has_buy_gem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pay_money;
        break;
      }
      
      // optional int32 pay_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_money_)));
          set_has_pay_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_treasure_id;
        break;
      }
      
      // optional int32 treasure_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gameMailAddress;
        break;
      }
      
      // required string gameMailAddress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamemailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receipt;
        break;
      }
      
      // optional string receipt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receipt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // optional int32 buy_gem_count = 2;
  if (has_buy_gem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_gem_count(), output);
  }
  
  // optional int32 pay_money = 3;
  if (has_pay_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pay_money(), output);
  }
  
  // optional int32 treasure_id = 4;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->treasure_id(), output);
  }
  
  // required string gameMailAddress = 5;
  if (has_gamemailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gamemailaddress(), output);
  }
  
  // optional string receipt = 6;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->receipt(), output);
  }
  
}

int RechargeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // optional int32 buy_gem_count = 2;
    if (has_buy_gem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_gem_count());
    }
    
    // optional int32 pay_money = 3;
    if (has_pay_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_money());
    }
    
    // optional int32 treasure_id = 4;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }
    
    // required string gameMailAddress = 5;
    if (has_gamemailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamemailaddress());
    }
    
    // optional string receipt = 6;
    if (has_receipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receipt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RechargeRequest*>(&from));
}

void RechargeRequest::MergeFrom(const RechargeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_buy_gem_count()) {
      set_buy_gem_count(from.buy_gem_count());
    }
    if (from.has_pay_money()) {
      set_pay_money(from.pay_money());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
    if (from.has_gamemailaddress()) {
      set_gamemailaddress(from.gamemailaddress());
    }
    if (from.has_receipt()) {
      set_receipt(from.receipt());
    }
  }
}

void RechargeRequest::CopyFrom(const RechargeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  
  return true;
}

void RechargeRequest::Swap(RechargeRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(buy_gem_count_, other->buy_gem_count_);
    std::swap(pay_money_, other->pay_money_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(gamemailaddress_, other->gamemailaddress_);
    std::swap(receipt_, other->receipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RechargeRequest::GetTypeName() const {
  return "message.RechargeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeResponse::kResultFieldNumber;
const int RechargeResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

RechargeResponse::RechargeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RechargeResponse::InitAsDefaultInstance() {
}

RechargeResponse::RechargeResponse(const RechargeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeResponse::~RechargeResponse() {
  SharedDtor();
}

void RechargeResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void RechargeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RechargeResponse& RechargeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Recharge_2eproto();  return *default_instance_;
}

RechargeResponse* RechargeResponse::default_instance_ = NULL;

RechargeResponse* RechargeResponse::New() const {
  return new RechargeResponse;
}

void RechargeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RechargeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
}

int RechargeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RechargeResponse*>(&from));
}

void RechargeResponse::MergeFrom(const RechargeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void RechargeResponse::CopyFrom(const RechargeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeResponse::IsInitialized() const {
  
  return true;
}

void RechargeResponse::Swap(RechargeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RechargeResponse::GetTypeName() const {
  return "message.RechargeResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
