// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadBattleResult.proto

#ifndef PROTOBUF_UploadBattleResult_2eproto__INCLUDED
#define PROTOBUF_UploadBattleResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UploadBattleResult_2eproto();
void protobuf_AssignDesc_UploadBattleResult_2eproto();
void protobuf_ShutdownFile_UploadBattleResult_2eproto();

class UploadBattleResultRequest;
class UploadBattleResultRequest_BuildDestoryStatus;
class UploadBattleResultRequest_CharacterUsedStatus;
class UploadBattleResultResponse;

// ===================================================================

class UploadBattleResultRequest_BuildDestoryStatus : public ::google::protobuf::MessageLite {
 public:
  UploadBattleResultRequest_BuildDestoryStatus();
  virtual ~UploadBattleResultRequest_BuildDestoryStatus();
  
  UploadBattleResultRequest_BuildDestoryStatus(const UploadBattleResultRequest_BuildDestoryStatus& from);
  
  inline UploadBattleResultRequest_BuildDestoryStatus& operator=(const UploadBattleResultRequest_BuildDestoryStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleResultRequest_BuildDestoryStatus& default_instance();
  
  void Swap(UploadBattleResultRequest_BuildDestoryStatus* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleResultRequest_BuildDestoryStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleResultRequest_BuildDestoryStatus& from);
  void MergeFrom(const UploadBattleResultRequest_BuildDestoryStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 building_id = 1;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 1;
  inline ::google::protobuf::int32 building_id() const;
  inline void set_building_id(::google::protobuf::int32 value);
  
  // optional int32 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);
  
  // optional int32 map_index_x = 3;
  inline bool has_map_index_x() const;
  inline void clear_map_index_x();
  static const int kMapIndexXFieldNumber = 3;
  inline ::google::protobuf::int32 map_index_x() const;
  inline void set_map_index_x(::google::protobuf::int32 value);
  
  // optional int32 map_index_y = 4;
  inline bool has_map_index_y() const;
  inline void clear_map_index_y();
  static const int kMapIndexYFieldNumber = 4;
  inline ::google::protobuf::int32 map_index_y() const;
  inline void set_map_index_y(::google::protobuf::int32 value);
  
  // optional int32 destory_status = 5;
  inline bool has_destory_status() const;
  inline void clear_destory_status();
  static const int kDestoryStatusFieldNumber = 5;
  inline ::google::protobuf::int32 destory_status() const;
  inline void set_destory_status(::google::protobuf::int32 value);
  
  // optional int32 lose_count = 6;
  inline bool has_lose_count() const;
  inline void clear_lose_count();
  static const int kLoseCountFieldNumber = 6;
  inline ::google::protobuf::int32 lose_count() const;
  inline void set_lose_count(::google::protobuf::int32 value);
  
  // optional int32 lose_elixir_count = 7;
  inline bool has_lose_elixir_count() const;
  inline void clear_lose_elixir_count();
  static const int kLoseElixirCountFieldNumber = 7;
  inline ::google::protobuf::int32 lose_elixir_count() const;
  inline void set_lose_elixir_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleResultRequest.BuildDestoryStatus)
 private:
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_map_index_x();
  inline void clear_has_map_index_x();
  inline void set_has_map_index_y();
  inline void clear_has_map_index_y();
  inline void set_has_destory_status();
  inline void clear_has_destory_status();
  inline void set_has_lose_count();
  inline void clear_has_lose_count();
  inline void set_has_lose_elixir_count();
  inline void clear_has_lose_elixir_count();
  
  ::google::protobuf::int32 building_id_;
  ::google::protobuf::int32 uuid_;
  ::google::protobuf::int32 map_index_x_;
  ::google::protobuf::int32 map_index_y_;
  ::google::protobuf::int32 destory_status_;
  ::google::protobuf::int32 lose_count_;
  ::google::protobuf::int32 lose_elixir_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleResult_2eproto();
  friend void protobuf_AssignDesc_UploadBattleResult_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleResult_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleResultRequest_BuildDestoryStatus* default_instance_;
};
// -------------------------------------------------------------------

class UploadBattleResultRequest_CharacterUsedStatus : public ::google::protobuf::MessageLite {
 public:
  UploadBattleResultRequest_CharacterUsedStatus();
  virtual ~UploadBattleResultRequest_CharacterUsedStatus();
  
  UploadBattleResultRequest_CharacterUsedStatus(const UploadBattleResultRequest_CharacterUsedStatus& from);
  
  inline UploadBattleResultRequest_CharacterUsedStatus& operator=(const UploadBattleResultRequest_CharacterUsedStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleResultRequest_CharacterUsedStatus& default_instance();
  
  void Swap(UploadBattleResultRequest_CharacterUsedStatus* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleResultRequest_CharacterUsedStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleResultRequest_CharacterUsedStatus& from);
  void MergeFrom(const UploadBattleResultRequest_CharacterUsedStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 characterIdOrSpellId = 1;
  inline bool has_characteridorspellid() const;
  inline void clear_characteridorspellid();
  static const int kCharacterIdOrSpellIdFieldNumber = 1;
  inline ::google::protobuf::int32 characteridorspellid() const;
  inline void set_characteridorspellid(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 used_type = 3;
  inline bool has_used_type() const;
  inline void clear_used_type();
  static const int kUsedTypeFieldNumber = 3;
  inline ::google::protobuf::int32 used_type() const;
  inline void set_used_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleResultRequest.CharacterUsedStatus)
 private:
  inline void set_has_characteridorspellid();
  inline void clear_has_characteridorspellid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_used_type();
  inline void clear_has_used_type();
  
  ::google::protobuf::int32 characteridorspellid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 used_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleResult_2eproto();
  friend void protobuf_AssignDesc_UploadBattleResult_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleResult_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleResultRequest_CharacterUsedStatus* default_instance_;
};
// -------------------------------------------------------------------

class UploadBattleResultRequest : public ::google::protobuf::MessageLite {
 public:
  UploadBattleResultRequest();
  virtual ~UploadBattleResultRequest();
  
  UploadBattleResultRequest(const UploadBattleResultRequest& from);
  
  inline UploadBattleResultRequest& operator=(const UploadBattleResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleResultRequest& default_instance();
  
  void Swap(UploadBattleResultRequest* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleResultRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleResultRequest& from);
  void MergeFrom(const UploadBattleResultRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef UploadBattleResultRequest_BuildDestoryStatus BuildDestoryStatus;
  typedef UploadBattleResultRequest_CharacterUsedStatus CharacterUsedStatus;
  
  // accessors -------------------------------------------------------
  
  // required string mailAddress = 1;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 1;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // optional int32 golden_count = 2;
  inline bool has_golden_count() const;
  inline void clear_golden_count();
  static const int kGoldenCountFieldNumber = 2;
  inline ::google::protobuf::int32 golden_count() const;
  inline void set_golden_count(::google::protobuf::int32 value);
  
  // optional int32 elixir_count = 3;
  inline bool has_elixir_count() const;
  inline void clear_elixir_count();
  static const int kElixirCountFieldNumber = 3;
  inline ::google::protobuf::int32 elixir_count() const;
  inline void set_elixir_count(::google::protobuf::int32 value);
  
  // optional int32 pvp_mark = 4;
  inline bool has_pvp_mark() const;
  inline void clear_pvp_mark();
  static const int kPvpMarkFieldNumber = 4;
  inline ::google::protobuf::int32 pvp_mark() const;
  inline void set_pvp_mark(::google::protobuf::int32 value);
  
  // optional int32 star_percent = 5;
  inline bool has_star_percent() const;
  inline void clear_star_percent();
  static const int kStarPercentFieldNumber = 5;
  inline ::google::protobuf::int32 star_percent() const;
  inline void set_star_percent(::google::protobuf::int32 value);
  
  // repeated .message.UploadBattleResultRequest.BuildDestoryStatus BuildDistoryStatusList = 6;
  inline int builddistorystatuslist_size() const;
  inline void clear_builddistorystatuslist();
  static const int kBuildDistoryStatusListFieldNumber = 6;
  inline const ::message::UploadBattleResultRequest_BuildDestoryStatus& builddistorystatuslist(int index) const;
  inline ::message::UploadBattleResultRequest_BuildDestoryStatus* mutable_builddistorystatuslist(int index);
  inline ::message::UploadBattleResultRequest_BuildDestoryStatus* add_builddistorystatuslist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_BuildDestoryStatus >&
      builddistorystatuslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_BuildDestoryStatus >*
      mutable_builddistorystatuslist();
  
  // repeated .message.UploadBattleResultRequest.CharacterUsedStatus characterUsedStatusList = 7;
  inline int characterusedstatuslist_size() const;
  inline void clear_characterusedstatuslist();
  static const int kCharacterUsedStatusListFieldNumber = 7;
  inline const ::message::UploadBattleResultRequest_CharacterUsedStatus& characterusedstatuslist(int index) const;
  inline ::message::UploadBattleResultRequest_CharacterUsedStatus* mutable_characterusedstatuslist(int index);
  inline ::message::UploadBattleResultRequest_CharacterUsedStatus* add_characterusedstatuslist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_CharacterUsedStatus >&
      characterusedstatuslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_CharacterUsedStatus >*
      mutable_characterusedstatuslist();
  
  // optional bool use_clans_flag = 8;
  inline bool has_use_clans_flag() const;
  inline void clear_use_clans_flag();
  static const int kUseClansFlagFieldNumber = 8;
  inline bool use_clans_flag() const;
  inline void set_use_clans_flag(bool value);
  
  // optional int32 star_count = 9;
  inline bool has_star_count() const;
  inline void clear_star_count();
  static const int kStarCountFieldNumber = 9;
  inline ::google::protobuf::int32 star_count() const;
  inline void set_star_count(::google::protobuf::int32 value);
  
  // optional string str_md5 = 10;
  inline bool has_str_md5() const;
  inline void clear_str_md5();
  static const int kStrMd5FieldNumber = 10;
  inline const ::std::string& str_md5() const;
  inline void set_str_md5(const ::std::string& value);
  inline void set_str_md5(const char* value);
  inline void set_str_md5(const char* value, size_t size);
  inline ::std::string* mutable_str_md5();
  inline ::std::string* release_str_md5();
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleResultRequest)
 private:
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  inline void set_has_golden_count();
  inline void clear_has_golden_count();
  inline void set_has_elixir_count();
  inline void clear_has_elixir_count();
  inline void set_has_pvp_mark();
  inline void clear_has_pvp_mark();
  inline void set_has_star_percent();
  inline void clear_has_star_percent();
  inline void set_has_use_clans_flag();
  inline void clear_has_use_clans_flag();
  inline void set_has_star_count();
  inline void clear_has_star_count();
  inline void set_has_str_md5();
  inline void clear_has_str_md5();
  
  ::std::string* mailaddress_;
  ::google::protobuf::int32 golden_count_;
  ::google::protobuf::int32 elixir_count_;
  ::google::protobuf::int32 pvp_mark_;
  ::google::protobuf::int32 star_percent_;
  ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_BuildDestoryStatus > builddistorystatuslist_;
  ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_CharacterUsedStatus > characterusedstatuslist_;
  bool use_clans_flag_;
  ::google::protobuf::int32 star_count_;
  ::std::string* str_md5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleResult_2eproto();
  friend void protobuf_AssignDesc_UploadBattleResult_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleResult_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleResultRequest* default_instance_;
};
// -------------------------------------------------------------------

class UploadBattleResultResponse : public ::google::protobuf::MessageLite {
 public:
  UploadBattleResultResponse();
  virtual ~UploadBattleResultResponse();
  
  UploadBattleResultResponse(const UploadBattleResultResponse& from);
  
  inline UploadBattleResultResponse& operator=(const UploadBattleResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleResultResponse& default_instance();
  
  void Swap(UploadBattleResultResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleResultResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleResultResponse& from);
  void MergeFrom(const UploadBattleResultResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleResultResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleResult_2eproto();
  friend void protobuf_AssignDesc_UploadBattleResult_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleResult_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleResultResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UploadBattleResultRequest_BuildDestoryStatus

// optional int32 building_id = 1;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_building_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_building_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_building_id() {
  building_id_ = 0;
  clear_has_building_id();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::building_id() const {
  return building_id_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_building_id(::google::protobuf::int32 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional int32 uuid = 2;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::uuid() const {
  return uuid_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 map_index_x = 3;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_map_index_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_map_index_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_map_index_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_map_index_x() {
  map_index_x_ = 0;
  clear_has_map_index_x();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::map_index_x() const {
  return map_index_x_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_map_index_x(::google::protobuf::int32 value) {
  set_has_map_index_x();
  map_index_x_ = value;
}

// optional int32 map_index_y = 4;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_map_index_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_map_index_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_map_index_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_map_index_y() {
  map_index_y_ = 0;
  clear_has_map_index_y();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::map_index_y() const {
  return map_index_y_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_map_index_y(::google::protobuf::int32 value) {
  set_has_map_index_y();
  map_index_y_ = value;
}

// optional int32 destory_status = 5;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_destory_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_destory_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_destory_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_destory_status() {
  destory_status_ = 0;
  clear_has_destory_status();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::destory_status() const {
  return destory_status_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_destory_status(::google::protobuf::int32 value) {
  set_has_destory_status();
  destory_status_ = value;
}

// optional int32 lose_count = 6;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_lose_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_lose_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_lose_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_lose_count() {
  lose_count_ = 0;
  clear_has_lose_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::lose_count() const {
  return lose_count_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_lose_count(::google::protobuf::int32 value) {
  set_has_lose_count();
  lose_count_ = value;
}

// optional int32 lose_elixir_count = 7;
inline bool UploadBattleResultRequest_BuildDestoryStatus::has_lose_elixir_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_has_lose_elixir_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_has_lose_elixir_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::clear_lose_elixir_count() {
  lose_elixir_count_ = 0;
  clear_has_lose_elixir_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_BuildDestoryStatus::lose_elixir_count() const {
  return lose_elixir_count_;
}
inline void UploadBattleResultRequest_BuildDestoryStatus::set_lose_elixir_count(::google::protobuf::int32 value) {
  set_has_lose_elixir_count();
  lose_elixir_count_ = value;
}

// -------------------------------------------------------------------

// UploadBattleResultRequest_CharacterUsedStatus

// optional int32 characterIdOrSpellId = 1;
inline bool UploadBattleResultRequest_CharacterUsedStatus::has_characteridorspellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_has_characteridorspellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_has_characteridorspellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_characteridorspellid() {
  characteridorspellid_ = 0;
  clear_has_characteridorspellid();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_CharacterUsedStatus::characteridorspellid() const {
  return characteridorspellid_;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_characteridorspellid(::google::protobuf::int32 value) {
  set_has_characteridorspellid();
  characteridorspellid_ = value;
}

// optional int32 count = 2;
inline bool UploadBattleResultRequest_CharacterUsedStatus::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_CharacterUsedStatus::count() const {
  return count_;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 used_type = 3;
inline bool UploadBattleResultRequest_CharacterUsedStatus::has_used_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_has_used_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_has_used_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::clear_used_type() {
  used_type_ = 0;
  clear_has_used_type();
}
inline ::google::protobuf::int32 UploadBattleResultRequest_CharacterUsedStatus::used_type() const {
  return used_type_;
}
inline void UploadBattleResultRequest_CharacterUsedStatus::set_used_type(::google::protobuf::int32 value) {
  set_has_used_type();
  used_type_ = value;
}

// -------------------------------------------------------------------

// UploadBattleResultRequest

// required string mailAddress = 1;
inline bool UploadBattleResultRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleResultRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleResultRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleResultRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& UploadBattleResultRequest::mailaddress() const {
  return *mailaddress_;
}
inline void UploadBattleResultRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void UploadBattleResultRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void UploadBattleResultRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleResultRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* UploadBattleResultRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 golden_count = 2;
inline bool UploadBattleResultRequest::has_golden_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleResultRequest::set_has_golden_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleResultRequest::clear_has_golden_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleResultRequest::clear_golden_count() {
  golden_count_ = 0;
  clear_has_golden_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest::golden_count() const {
  return golden_count_;
}
inline void UploadBattleResultRequest::set_golden_count(::google::protobuf::int32 value) {
  set_has_golden_count();
  golden_count_ = value;
}

// optional int32 elixir_count = 3;
inline bool UploadBattleResultRequest::has_elixir_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadBattleResultRequest::set_has_elixir_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadBattleResultRequest::clear_has_elixir_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadBattleResultRequest::clear_elixir_count() {
  elixir_count_ = 0;
  clear_has_elixir_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest::elixir_count() const {
  return elixir_count_;
}
inline void UploadBattleResultRequest::set_elixir_count(::google::protobuf::int32 value) {
  set_has_elixir_count();
  elixir_count_ = value;
}

// optional int32 pvp_mark = 4;
inline bool UploadBattleResultRequest::has_pvp_mark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadBattleResultRequest::set_has_pvp_mark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadBattleResultRequest::clear_has_pvp_mark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadBattleResultRequest::clear_pvp_mark() {
  pvp_mark_ = 0;
  clear_has_pvp_mark();
}
inline ::google::protobuf::int32 UploadBattleResultRequest::pvp_mark() const {
  return pvp_mark_;
}
inline void UploadBattleResultRequest::set_pvp_mark(::google::protobuf::int32 value) {
  set_has_pvp_mark();
  pvp_mark_ = value;
}

// optional int32 star_percent = 5;
inline bool UploadBattleResultRequest::has_star_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadBattleResultRequest::set_has_star_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadBattleResultRequest::clear_has_star_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadBattleResultRequest::clear_star_percent() {
  star_percent_ = 0;
  clear_has_star_percent();
}
inline ::google::protobuf::int32 UploadBattleResultRequest::star_percent() const {
  return star_percent_;
}
inline void UploadBattleResultRequest::set_star_percent(::google::protobuf::int32 value) {
  set_has_star_percent();
  star_percent_ = value;
}

// repeated .message.UploadBattleResultRequest.BuildDestoryStatus BuildDistoryStatusList = 6;
inline int UploadBattleResultRequest::builddistorystatuslist_size() const {
  return builddistorystatuslist_.size();
}
inline void UploadBattleResultRequest::clear_builddistorystatuslist() {
  builddistorystatuslist_.Clear();
}
inline const ::message::UploadBattleResultRequest_BuildDestoryStatus& UploadBattleResultRequest::builddistorystatuslist(int index) const {
  return builddistorystatuslist_.Get(index);
}
inline ::message::UploadBattleResultRequest_BuildDestoryStatus* UploadBattleResultRequest::mutable_builddistorystatuslist(int index) {
  return builddistorystatuslist_.Mutable(index);
}
inline ::message::UploadBattleResultRequest_BuildDestoryStatus* UploadBattleResultRequest::add_builddistorystatuslist() {
  return builddistorystatuslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_BuildDestoryStatus >&
UploadBattleResultRequest::builddistorystatuslist() const {
  return builddistorystatuslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_BuildDestoryStatus >*
UploadBattleResultRequest::mutable_builddistorystatuslist() {
  return &builddistorystatuslist_;
}

// repeated .message.UploadBattleResultRequest.CharacterUsedStatus characterUsedStatusList = 7;
inline int UploadBattleResultRequest::characterusedstatuslist_size() const {
  return characterusedstatuslist_.size();
}
inline void UploadBattleResultRequest::clear_characterusedstatuslist() {
  characterusedstatuslist_.Clear();
}
inline const ::message::UploadBattleResultRequest_CharacterUsedStatus& UploadBattleResultRequest::characterusedstatuslist(int index) const {
  return characterusedstatuslist_.Get(index);
}
inline ::message::UploadBattleResultRequest_CharacterUsedStatus* UploadBattleResultRequest::mutable_characterusedstatuslist(int index) {
  return characterusedstatuslist_.Mutable(index);
}
inline ::message::UploadBattleResultRequest_CharacterUsedStatus* UploadBattleResultRequest::add_characterusedstatuslist() {
  return characterusedstatuslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_CharacterUsedStatus >&
UploadBattleResultRequest::characterusedstatuslist() const {
  return characterusedstatuslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::UploadBattleResultRequest_CharacterUsedStatus >*
UploadBattleResultRequest::mutable_characterusedstatuslist() {
  return &characterusedstatuslist_;
}

// optional bool use_clans_flag = 8;
inline bool UploadBattleResultRequest::has_use_clans_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadBattleResultRequest::set_has_use_clans_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadBattleResultRequest::clear_has_use_clans_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadBattleResultRequest::clear_use_clans_flag() {
  use_clans_flag_ = false;
  clear_has_use_clans_flag();
}
inline bool UploadBattleResultRequest::use_clans_flag() const {
  return use_clans_flag_;
}
inline void UploadBattleResultRequest::set_use_clans_flag(bool value) {
  set_has_use_clans_flag();
  use_clans_flag_ = value;
}

// optional int32 star_count = 9;
inline bool UploadBattleResultRequest::has_star_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadBattleResultRequest::set_has_star_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadBattleResultRequest::clear_has_star_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadBattleResultRequest::clear_star_count() {
  star_count_ = 0;
  clear_has_star_count();
}
inline ::google::protobuf::int32 UploadBattleResultRequest::star_count() const {
  return star_count_;
}
inline void UploadBattleResultRequest::set_star_count(::google::protobuf::int32 value) {
  set_has_star_count();
  star_count_ = value;
}

// optional string str_md5 = 10;
inline bool UploadBattleResultRequest::has_str_md5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UploadBattleResultRequest::set_has_str_md5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UploadBattleResultRequest::clear_has_str_md5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UploadBattleResultRequest::clear_str_md5() {
  if (str_md5_ != &::google::protobuf::internal::kEmptyString) {
    str_md5_->clear();
  }
  clear_has_str_md5();
}
inline const ::std::string& UploadBattleResultRequest::str_md5() const {
  return *str_md5_;
}
inline void UploadBattleResultRequest::set_str_md5(const ::std::string& value) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(value);
}
inline void UploadBattleResultRequest::set_str_md5(const char* value) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(value);
}
inline void UploadBattleResultRequest::set_str_md5(const char* value, size_t size) {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  str_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleResultRequest::mutable_str_md5() {
  set_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    str_md5_ = new ::std::string;
  }
  return str_md5_;
}
inline ::std::string* UploadBattleResultRequest::release_str_md5() {
  clear_has_str_md5();
  if (str_md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_md5_;
    str_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UploadBattleResultResponse

// optional sint32 result = 1 [default = 0];
inline bool UploadBattleResultResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleResultResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleResultResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleResultResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UploadBattleResultResponse::result() const {
  return result_;
}
inline void UploadBattleResultResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool UploadBattleResultResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleResultResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleResultResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleResultResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& UploadBattleResultResponse::info() const {
  return *info_;
}
inline void UploadBattleResultResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void UploadBattleResultResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void UploadBattleResultResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleResultResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* UploadBattleResultResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UploadBattleResult_2eproto__INCLUDED
