// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadBattleFlow.proto

#ifndef PROTOBUF_UploadBattleFlow_2eproto__INCLUDED
#define PROTOBUF_UploadBattleFlow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UploadBattleFlow_2eproto();
void protobuf_AssignDesc_UploadBattleFlow_2eproto();
void protobuf_ShutdownFile_UploadBattleFlow_2eproto();

class UploadBattleFlowRequest;
class UploadBattleFlowRequest_IoData;
class UploadBattleFlowResponse;

// ===================================================================

class UploadBattleFlowRequest_IoData : public ::google::protobuf::MessageLite {
 public:
  UploadBattleFlowRequest_IoData();
  virtual ~UploadBattleFlowRequest_IoData();
  
  UploadBattleFlowRequest_IoData(const UploadBattleFlowRequest_IoData& from);
  
  inline UploadBattleFlowRequest_IoData& operator=(const UploadBattleFlowRequest_IoData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleFlowRequest_IoData& default_instance();
  
  void Swap(UploadBattleFlowRequest_IoData* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleFlowRequest_IoData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleFlowRequest_IoData& from);
  void MergeFrom(const UploadBattleFlowRequest_IoData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleFlowRequest.IoData)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleFlow_2eproto();
  friend void protobuf_AssignDesc_UploadBattleFlow_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleFlow_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleFlowRequest_IoData* default_instance_;
};
// -------------------------------------------------------------------

class UploadBattleFlowRequest : public ::google::protobuf::MessageLite {
 public:
  UploadBattleFlowRequest();
  virtual ~UploadBattleFlowRequest();
  
  UploadBattleFlowRequest(const UploadBattleFlowRequest& from);
  
  inline UploadBattleFlowRequest& operator=(const UploadBattleFlowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleFlowRequest& default_instance();
  
  void Swap(UploadBattleFlowRequest* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleFlowRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleFlowRequest& from);
  void MergeFrom(const UploadBattleFlowRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef UploadBattleFlowRequest_IoData IoData;
  
  // accessors -------------------------------------------------------
  
  // required string defenceMailAddress = 1;
  inline bool has_defencemailaddress() const;
  inline void clear_defencemailaddress();
  static const int kDefenceMailAddressFieldNumber = 1;
  inline const ::std::string& defencemailaddress() const;
  inline void set_defencemailaddress(const ::std::string& value);
  inline void set_defencemailaddress(const char* value);
  inline void set_defencemailaddress(const char* value, size_t size);
  inline ::std::string* mutable_defencemailaddress();
  inline ::std::string* release_defencemailaddress();
  
  // required string attackMailAddress = 2;
  inline bool has_attackmailaddress() const;
  inline void clear_attackmailaddress();
  static const int kAttackMailAddressFieldNumber = 2;
  inline const ::std::string& attackmailaddress() const;
  inline void set_attackmailaddress(const ::std::string& value);
  inline void set_attackmailaddress(const char* value);
  inline void set_attackmailaddress(const char* value, size_t size);
  inline ::std::string* mutable_attackmailaddress();
  inline ::std::string* release_attackmailaddress();
  
  // optional int32 battleId = 3;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 3;
  inline ::google::protobuf::int32 battleid() const;
  inline void set_battleid(::google::protobuf::int32 value);
  
  // required .message.UploadBattleFlowRequest.IoData ioData = 4;
  inline bool has_iodata() const;
  inline void clear_iodata();
  static const int kIoDataFieldNumber = 4;
  inline const ::message::UploadBattleFlowRequest_IoData& iodata() const;
  inline ::message::UploadBattleFlowRequest_IoData* mutable_iodata();
  inline ::message::UploadBattleFlowRequest_IoData* release_iodata();
  
  // optional sint32 maxIndex = 5;
  inline bool has_maxindex() const;
  inline void clear_maxindex();
  static const int kMaxIndexFieldNumber = 5;
  inline ::google::protobuf::int32 maxindex() const;
  inline void set_maxindex(::google::protobuf::int32 value);
  
  // optional sint32 index = 6;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 6;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleFlowRequest)
 private:
  inline void set_has_defencemailaddress();
  inline void clear_has_defencemailaddress();
  inline void set_has_attackmailaddress();
  inline void clear_has_attackmailaddress();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_iodata();
  inline void clear_has_iodata();
  inline void set_has_maxindex();
  inline void clear_has_maxindex();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::std::string* defencemailaddress_;
  ::std::string* attackmailaddress_;
  ::message::UploadBattleFlowRequest_IoData* iodata_;
  ::google::protobuf::int32 battleid_;
  ::google::protobuf::int32 maxindex_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleFlow_2eproto();
  friend void protobuf_AssignDesc_UploadBattleFlow_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleFlow_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleFlowRequest* default_instance_;
};
// -------------------------------------------------------------------

class UploadBattleFlowResponse : public ::google::protobuf::MessageLite {
 public:
  UploadBattleFlowResponse();
  virtual ~UploadBattleFlowResponse();
  
  UploadBattleFlowResponse(const UploadBattleFlowResponse& from);
  
  inline UploadBattleFlowResponse& operator=(const UploadBattleFlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const UploadBattleFlowResponse& default_instance();
  
  void Swap(UploadBattleFlowResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadBattleFlowResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadBattleFlowResponse& from);
  void MergeFrom(const UploadBattleFlowResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:message.UploadBattleFlowResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UploadBattleFlow_2eproto();
  friend void protobuf_AssignDesc_UploadBattleFlow_2eproto();
  friend void protobuf_ShutdownFile_UploadBattleFlow_2eproto();
  
  void InitAsDefaultInstance();
  static UploadBattleFlowResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UploadBattleFlowRequest_IoData

// repeated bytes data = 1;
inline int UploadBattleFlowRequest_IoData::data_size() const {
  return data_.size();
}
inline void UploadBattleFlowRequest_IoData::clear_data() {
  data_.Clear();
}
inline const ::std::string& UploadBattleFlowRequest_IoData::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* UploadBattleFlowRequest_IoData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void UploadBattleFlowRequest_IoData::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void UploadBattleFlowRequest_IoData::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void UploadBattleFlowRequest_IoData::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleFlowRequest_IoData::add_data() {
  return data_.Add();
}
inline void UploadBattleFlowRequest_IoData::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void UploadBattleFlowRequest_IoData::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void UploadBattleFlowRequest_IoData::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UploadBattleFlowRequest_IoData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UploadBattleFlowRequest_IoData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// UploadBattleFlowRequest

// required string defenceMailAddress = 1;
inline bool UploadBattleFlowRequest::has_defencemailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleFlowRequest::set_has_defencemailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleFlowRequest::clear_has_defencemailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleFlowRequest::clear_defencemailaddress() {
  if (defencemailaddress_ != &::google::protobuf::internal::kEmptyString) {
    defencemailaddress_->clear();
  }
  clear_has_defencemailaddress();
}
inline const ::std::string& UploadBattleFlowRequest::defencemailaddress() const {
  return *defencemailaddress_;
}
inline void UploadBattleFlowRequest::set_defencemailaddress(const ::std::string& value) {
  set_has_defencemailaddress();
  if (defencemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    defencemailaddress_ = new ::std::string;
  }
  defencemailaddress_->assign(value);
}
inline void UploadBattleFlowRequest::set_defencemailaddress(const char* value) {
  set_has_defencemailaddress();
  if (defencemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    defencemailaddress_ = new ::std::string;
  }
  defencemailaddress_->assign(value);
}
inline void UploadBattleFlowRequest::set_defencemailaddress(const char* value, size_t size) {
  set_has_defencemailaddress();
  if (defencemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    defencemailaddress_ = new ::std::string;
  }
  defencemailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleFlowRequest::mutable_defencemailaddress() {
  set_has_defencemailaddress();
  if (defencemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    defencemailaddress_ = new ::std::string;
  }
  return defencemailaddress_;
}
inline ::std::string* UploadBattleFlowRequest::release_defencemailaddress() {
  clear_has_defencemailaddress();
  if (defencemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defencemailaddress_;
    defencemailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string attackMailAddress = 2;
inline bool UploadBattleFlowRequest::has_attackmailaddress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleFlowRequest::set_has_attackmailaddress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleFlowRequest::clear_has_attackmailaddress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleFlowRequest::clear_attackmailaddress() {
  if (attackmailaddress_ != &::google::protobuf::internal::kEmptyString) {
    attackmailaddress_->clear();
  }
  clear_has_attackmailaddress();
}
inline const ::std::string& UploadBattleFlowRequest::attackmailaddress() const {
  return *attackmailaddress_;
}
inline void UploadBattleFlowRequest::set_attackmailaddress(const ::std::string& value) {
  set_has_attackmailaddress();
  if (attackmailaddress_ == &::google::protobuf::internal::kEmptyString) {
    attackmailaddress_ = new ::std::string;
  }
  attackmailaddress_->assign(value);
}
inline void UploadBattleFlowRequest::set_attackmailaddress(const char* value) {
  set_has_attackmailaddress();
  if (attackmailaddress_ == &::google::protobuf::internal::kEmptyString) {
    attackmailaddress_ = new ::std::string;
  }
  attackmailaddress_->assign(value);
}
inline void UploadBattleFlowRequest::set_attackmailaddress(const char* value, size_t size) {
  set_has_attackmailaddress();
  if (attackmailaddress_ == &::google::protobuf::internal::kEmptyString) {
    attackmailaddress_ = new ::std::string;
  }
  attackmailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleFlowRequest::mutable_attackmailaddress() {
  set_has_attackmailaddress();
  if (attackmailaddress_ == &::google::protobuf::internal::kEmptyString) {
    attackmailaddress_ = new ::std::string;
  }
  return attackmailaddress_;
}
inline ::std::string* UploadBattleFlowRequest::release_attackmailaddress() {
  clear_has_attackmailaddress();
  if (attackmailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attackmailaddress_;
    attackmailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 battleId = 3;
inline bool UploadBattleFlowRequest::has_battleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadBattleFlowRequest::set_has_battleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadBattleFlowRequest::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadBattleFlowRequest::clear_battleid() {
  battleid_ = 0;
  clear_has_battleid();
}
inline ::google::protobuf::int32 UploadBattleFlowRequest::battleid() const {
  return battleid_;
}
inline void UploadBattleFlowRequest::set_battleid(::google::protobuf::int32 value) {
  set_has_battleid();
  battleid_ = value;
}

// required .message.UploadBattleFlowRequest.IoData ioData = 4;
inline bool UploadBattleFlowRequest::has_iodata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadBattleFlowRequest::set_has_iodata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadBattleFlowRequest::clear_has_iodata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadBattleFlowRequest::clear_iodata() {
  if (iodata_ != NULL) iodata_->::message::UploadBattleFlowRequest_IoData::Clear();
  clear_has_iodata();
}
inline const ::message::UploadBattleFlowRequest_IoData& UploadBattleFlowRequest::iodata() const {
  return iodata_ != NULL ? *iodata_ : *default_instance_->iodata_;
}
inline ::message::UploadBattleFlowRequest_IoData* UploadBattleFlowRequest::mutable_iodata() {
  set_has_iodata();
  if (iodata_ == NULL) iodata_ = new ::message::UploadBattleFlowRequest_IoData;
  return iodata_;
}
inline ::message::UploadBattleFlowRequest_IoData* UploadBattleFlowRequest::release_iodata() {
  clear_has_iodata();
  ::message::UploadBattleFlowRequest_IoData* temp = iodata_;
  iodata_ = NULL;
  return temp;
}

// optional sint32 maxIndex = 5;
inline bool UploadBattleFlowRequest::has_maxindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadBattleFlowRequest::set_has_maxindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadBattleFlowRequest::clear_has_maxindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadBattleFlowRequest::clear_maxindex() {
  maxindex_ = 0;
  clear_has_maxindex();
}
inline ::google::protobuf::int32 UploadBattleFlowRequest::maxindex() const {
  return maxindex_;
}
inline void UploadBattleFlowRequest::set_maxindex(::google::protobuf::int32 value) {
  set_has_maxindex();
  maxindex_ = value;
}

// optional sint32 index = 6;
inline bool UploadBattleFlowRequest::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadBattleFlowRequest::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadBattleFlowRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadBattleFlowRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 UploadBattleFlowRequest::index() const {
  return index_;
}
inline void UploadBattleFlowRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// UploadBattleFlowResponse

// optional sint32 result = 1 [default = 0];
inline bool UploadBattleFlowResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadBattleFlowResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadBattleFlowResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadBattleFlowResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UploadBattleFlowResponse::result() const {
  return result_;
}
inline void UploadBattleFlowResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool UploadBattleFlowResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadBattleFlowResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadBattleFlowResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadBattleFlowResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& UploadBattleFlowResponse::info() const {
  return *info_;
}
inline void UploadBattleFlowResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void UploadBattleFlowResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void UploadBattleFlowResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadBattleFlowResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* UploadBattleFlowResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UploadBattleFlow_2eproto__INCLUDED
