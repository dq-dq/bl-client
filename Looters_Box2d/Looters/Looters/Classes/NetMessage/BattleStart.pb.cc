// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleStart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_BattleStart_2eproto() {
  delete BattleStartRequest::default_instance_;
  delete BattleStartResponse::default_instance_;
}

void protobuf_AddDesc_BattleStart_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  BattleStartRequest::default_instance_ = new BattleStartRequest();
  BattleStartResponse::default_instance_ = new BattleStartResponse();
  BattleStartRequest::default_instance_->InitAsDefaultInstance();
  BattleStartResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleStart_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleStart_2eproto {
  StaticDescriptorInitializer_BattleStart_2eproto() {
    protobuf_AddDesc_BattleStart_2eproto();
  }
} static_descriptor_initializer_BattleStart_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BattleStartRequest::kMailAddressFieldNumber;
const int BattleStartRequest::kDefenceMailAddressFieldNumber;
const int BattleStartRequest::kStartBattleTimeFieldNumber;
#endif  // !_MSC_VER

BattleStartRequest::BattleStartRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleStartRequest::InitAsDefaultInstance() {
}

BattleStartRequest::BattleStartRequest(const BattleStartRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStartRequest::SharedCtor() {
  _cached_size_ = 0;
  mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defencemailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_battle_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStartRequest::~BattleStartRequest() {
  SharedDtor();
}

void BattleStartRequest::SharedDtor() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete mailaddress_;
  }
  if (defencemailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete defencemailaddress_;
  }
  if (start_battle_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_battle_time_;
  }
  if (this != default_instance_) {
  }
}

void BattleStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleStartRequest& BattleStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStart_2eproto();  return *default_instance_;
}

BattleStartRequest* BattleStartRequest::default_instance_ = NULL;

BattleStartRequest* BattleStartRequest::New() const {
  return new BattleStartRequest;
}

void BattleStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailaddress()) {
      if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
        mailaddress_->clear();
      }
    }
    if (has_defencemailaddress()) {
      if (defencemailaddress_ != &::google::protobuf::internal::kEmptyString) {
        defencemailaddress_->clear();
      }
    }
    if (has_start_battle_time()) {
      if (start_battle_time_ != &::google::protobuf::internal::kEmptyString) {
        start_battle_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defenceMailAddress;
        break;
      }
      
      // required string defenceMailAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenceMailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defencemailaddress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_battle_time;
        break;
      }
      
      // required string start_battle_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_battle_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_battle_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailAddress = 1;
  if (has_mailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailaddress(), output);
  }
  
  // required string defenceMailAddress = 2;
  if (has_defencemailaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->defencemailaddress(), output);
  }
  
  // required string start_battle_time = 3;
  if (has_start_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->start_battle_time(), output);
  }
  
}

int BattleStartRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailAddress = 1;
    if (has_mailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailaddress());
    }
    
    // required string defenceMailAddress = 2;
    if (has_defencemailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencemailaddress());
    }
    
    // required string start_battle_time = 3;
    if (has_start_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_battle_time());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStartRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleStartRequest*>(&from));
}

void BattleStartRequest::MergeFrom(const BattleStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailaddress()) {
      set_mailaddress(from.mailaddress());
    }
    if (from.has_defencemailaddress()) {
      set_defencemailaddress(from.defencemailaddress());
    }
    if (from.has_start_battle_time()) {
      set_start_battle_time(from.start_battle_time());
    }
  }
}

void BattleStartRequest::CopyFrom(const BattleStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BattleStartRequest::Swap(BattleStartRequest* other) {
  if (other != this) {
    std::swap(mailaddress_, other->mailaddress_);
    std::swap(defencemailaddress_, other->defencemailaddress_);
    std::swap(start_battle_time_, other->start_battle_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleStartRequest::GetTypeName() const {
  return "message.BattleStartRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStartResponse::kResultFieldNumber;
const int BattleStartResponse::kInfoFieldNumber;
const int BattleStartResponse::kBattleIdFieldNumber;
const int BattleStartResponse::kVerifyCodeFieldNumber;
#endif  // !_MSC_VER

BattleStartResponse::BattleStartResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleStartResponse::InitAsDefaultInstance() {
}

BattleStartResponse::BattleStartResponse(const BattleStartResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStartResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battleid_ = GOOGLE_LONGLONG(0);
  verifycode_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStartResponse::~BattleStartResponse() {
  SharedDtor();
}

void BattleStartResponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void BattleStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleStartResponse& BattleStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStart_2eproto();  return *default_instance_;
}

BattleStartResponse* BattleStartResponse::default_instance_ = NULL;

BattleStartResponse* BattleStartResponse::New() const {
  return new BattleStartResponse;
}

void BattleStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    battleid_ = GOOGLE_LONGLONG(0);
    verifycode_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleId;
        break;
      }
      
      // optional int64 battleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_verifyCode;
        break;
      }
      
      // optional uint64 verifyCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verifyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &verifycode_)));
          set_has_verifycode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  // optional int64 battleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->battleid(), output);
  }
  
  // optional uint64 verifyCode = 4;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->verifycode(), output);
  }
  
}

int BattleStartResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // optional int64 battleId = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battleid());
    }
    
    // optional uint64 verifyCode = 4;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->verifycode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStartResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleStartResponse*>(&from));
}

void BattleStartResponse::MergeFrom(const BattleStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
  }
}

void BattleStartResponse::CopyFrom(const BattleStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStartResponse::IsInitialized() const {
  
  return true;
}

void BattleStartResponse::Swap(BattleStartResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(battleid_, other->battleid_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleStartResponse::GetTypeName() const {
  return "message.BattleStartResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
