// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Recharge.proto

#ifndef PROTOBUF_Recharge_2eproto__INCLUDED
#define PROTOBUF_Recharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Recharge_2eproto();
void protobuf_AssignDesc_Recharge_2eproto();
void protobuf_ShutdownFile_Recharge_2eproto();

class RechargeRequest;
class RechargeResponse;

// ===================================================================

class RechargeRequest : public ::google::protobuf::MessageLite {
 public:
  RechargeRequest();
  virtual ~RechargeRequest();
  
  RechargeRequest(const RechargeRequest& from);
  
  inline RechargeRequest& operator=(const RechargeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RechargeRequest& default_instance();
  
  void Swap(RechargeRequest* other);
  
  // implements Message ----------------------------------------------
  
  RechargeRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RechargeRequest& from);
  void MergeFrom(const RechargeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string mailAddress = 1;
  inline bool has_mailaddress() const;
  inline void clear_mailaddress();
  static const int kMailAddressFieldNumber = 1;
  inline const ::std::string& mailaddress() const;
  inline void set_mailaddress(const ::std::string& value);
  inline void set_mailaddress(const char* value);
  inline void set_mailaddress(const char* value, size_t size);
  inline ::std::string* mutable_mailaddress();
  inline ::std::string* release_mailaddress();
  
  // optional int32 buy_gem_count = 2;
  inline bool has_buy_gem_count() const;
  inline void clear_buy_gem_count();
  static const int kBuyGemCountFieldNumber = 2;
  inline ::google::protobuf::int32 buy_gem_count() const;
  inline void set_buy_gem_count(::google::protobuf::int32 value);
  
  // optional int32 pay_money = 3;
  inline bool has_pay_money() const;
  inline void clear_pay_money();
  static const int kPayMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 pay_money() const;
  inline void set_pay_money(::google::protobuf::int32 value);
  
  // optional int32 treasure_id = 4;
  inline bool has_treasure_id() const;
  inline void clear_treasure_id();
  static const int kTreasureIdFieldNumber = 4;
  inline ::google::protobuf::int32 treasure_id() const;
  inline void set_treasure_id(::google::protobuf::int32 value);
  
  // required string gameMailAddress = 5;
  inline bool has_gamemailaddress() const;
  inline void clear_gamemailaddress();
  static const int kGameMailAddressFieldNumber = 5;
  inline const ::std::string& gamemailaddress() const;
  inline void set_gamemailaddress(const ::std::string& value);
  inline void set_gamemailaddress(const char* value);
  inline void set_gamemailaddress(const char* value, size_t size);
  inline ::std::string* mutable_gamemailaddress();
  inline ::std::string* release_gamemailaddress();
  
  // optional string receipt = 6;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 6;
  inline const ::std::string& receipt() const;
  inline void set_receipt(const ::std::string& value);
  inline void set_receipt(const char* value);
  inline void set_receipt(const char* value, size_t size);
  inline ::std::string* mutable_receipt();
  inline ::std::string* release_receipt();
  
  // @@protoc_insertion_point(class_scope:message.RechargeRequest)
 private:
  inline void set_has_mailaddress();
  inline void clear_has_mailaddress();
  inline void set_has_buy_gem_count();
  inline void clear_has_buy_gem_count();
  inline void set_has_pay_money();
  inline void clear_has_pay_money();
  inline void set_has_treasure_id();
  inline void clear_has_treasure_id();
  inline void set_has_gamemailaddress();
  inline void clear_has_gamemailaddress();
  inline void set_has_receipt();
  inline void clear_has_receipt();
  
  ::std::string* mailaddress_;
  ::google::protobuf::int32 buy_gem_count_;
  ::google::protobuf::int32 pay_money_;
  ::std::string* gamemailaddress_;
  ::std::string* receipt_;
  ::google::protobuf::int32 treasure_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Recharge_2eproto();
  friend void protobuf_AssignDesc_Recharge_2eproto();
  friend void protobuf_ShutdownFile_Recharge_2eproto();
  
  void InitAsDefaultInstance();
  static RechargeRequest* default_instance_;
};
// -------------------------------------------------------------------

class RechargeResponse : public ::google::protobuf::MessageLite {
 public:
  RechargeResponse();
  virtual ~RechargeResponse();
  
  RechargeResponse(const RechargeResponse& from);
  
  inline RechargeResponse& operator=(const RechargeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RechargeResponse& default_instance();
  
  void Swap(RechargeResponse* other);
  
  // implements Message ----------------------------------------------
  
  RechargeResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RechargeResponse& from);
  void MergeFrom(const RechargeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:message.RechargeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::std::string* info_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Recharge_2eproto();
  friend void protobuf_AssignDesc_Recharge_2eproto();
  friend void protobuf_ShutdownFile_Recharge_2eproto();
  
  void InitAsDefaultInstance();
  static RechargeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RechargeRequest

// required string mailAddress = 1;
inline bool RechargeRequest::has_mailaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeRequest::set_has_mailaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeRequest::clear_has_mailaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeRequest::clear_mailaddress() {
  if (mailaddress_ != &::google::protobuf::internal::kEmptyString) {
    mailaddress_->clear();
  }
  clear_has_mailaddress();
}
inline const ::std::string& RechargeRequest::mailaddress() const {
  return *mailaddress_;
}
inline void RechargeRequest::set_mailaddress(const ::std::string& value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void RechargeRequest::set_mailaddress(const char* value) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(value);
}
inline void RechargeRequest::set_mailaddress(const char* value, size_t size) {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  mailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeRequest::mutable_mailaddress() {
  set_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    mailaddress_ = new ::std::string;
  }
  return mailaddress_;
}
inline ::std::string* RechargeRequest::release_mailaddress() {
  clear_has_mailaddress();
  if (mailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailaddress_;
    mailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 buy_gem_count = 2;
inline bool RechargeRequest::has_buy_gem_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeRequest::set_has_buy_gem_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeRequest::clear_has_buy_gem_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeRequest::clear_buy_gem_count() {
  buy_gem_count_ = 0;
  clear_has_buy_gem_count();
}
inline ::google::protobuf::int32 RechargeRequest::buy_gem_count() const {
  return buy_gem_count_;
}
inline void RechargeRequest::set_buy_gem_count(::google::protobuf::int32 value) {
  set_has_buy_gem_count();
  buy_gem_count_ = value;
}

// optional int32 pay_money = 3;
inline bool RechargeRequest::has_pay_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeRequest::set_has_pay_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeRequest::clear_has_pay_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeRequest::clear_pay_money() {
  pay_money_ = 0;
  clear_has_pay_money();
}
inline ::google::protobuf::int32 RechargeRequest::pay_money() const {
  return pay_money_;
}
inline void RechargeRequest::set_pay_money(::google::protobuf::int32 value) {
  set_has_pay_money();
  pay_money_ = value;
}

// optional int32 treasure_id = 4;
inline bool RechargeRequest::has_treasure_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeRequest::set_has_treasure_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeRequest::clear_has_treasure_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeRequest::clear_treasure_id() {
  treasure_id_ = 0;
  clear_has_treasure_id();
}
inline ::google::protobuf::int32 RechargeRequest::treasure_id() const {
  return treasure_id_;
}
inline void RechargeRequest::set_treasure_id(::google::protobuf::int32 value) {
  set_has_treasure_id();
  treasure_id_ = value;
}

// required string gameMailAddress = 5;
inline bool RechargeRequest::has_gamemailaddress() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RechargeRequest::set_has_gamemailaddress() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RechargeRequest::clear_has_gamemailaddress() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RechargeRequest::clear_gamemailaddress() {
  if (gamemailaddress_ != &::google::protobuf::internal::kEmptyString) {
    gamemailaddress_->clear();
  }
  clear_has_gamemailaddress();
}
inline const ::std::string& RechargeRequest::gamemailaddress() const {
  return *gamemailaddress_;
}
inline void RechargeRequest::set_gamemailaddress(const ::std::string& value) {
  set_has_gamemailaddress();
  if (gamemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    gamemailaddress_ = new ::std::string;
  }
  gamemailaddress_->assign(value);
}
inline void RechargeRequest::set_gamemailaddress(const char* value) {
  set_has_gamemailaddress();
  if (gamemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    gamemailaddress_ = new ::std::string;
  }
  gamemailaddress_->assign(value);
}
inline void RechargeRequest::set_gamemailaddress(const char* value, size_t size) {
  set_has_gamemailaddress();
  if (gamemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    gamemailaddress_ = new ::std::string;
  }
  gamemailaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeRequest::mutable_gamemailaddress() {
  set_has_gamemailaddress();
  if (gamemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    gamemailaddress_ = new ::std::string;
  }
  return gamemailaddress_;
}
inline ::std::string* RechargeRequest::release_gamemailaddress() {
  clear_has_gamemailaddress();
  if (gamemailaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamemailaddress_;
    gamemailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string receipt = 6;
inline bool RechargeRequest::has_receipt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RechargeRequest::set_has_receipt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RechargeRequest::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RechargeRequest::clear_receipt() {
  if (receipt_ != &::google::protobuf::internal::kEmptyString) {
    receipt_->clear();
  }
  clear_has_receipt();
}
inline const ::std::string& RechargeRequest::receipt() const {
  return *receipt_;
}
inline void RechargeRequest::set_receipt(const ::std::string& value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::kEmptyString) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
}
inline void RechargeRequest::set_receipt(const char* value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::kEmptyString) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
}
inline void RechargeRequest::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::kEmptyString) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeRequest::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::kEmptyString) {
    receipt_ = new ::std::string;
  }
  return receipt_;
}
inline ::std::string* RechargeRequest::release_receipt() {
  clear_has_receipt();
  if (receipt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receipt_;
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RechargeResponse

// optional sint32 result = 1;
inline bool RechargeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RechargeResponse::result() const {
  return result_;
}
inline void RechargeResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string info = 2;
inline bool RechargeResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& RechargeResponse::info() const {
  return *info_;
}
inline void RechargeResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RechargeResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RechargeResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* RechargeResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Recharge_2eproto__INCLUDED
